!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){t=t||ne;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function i(e){var t=!!e&&"length"in e&&e.length,n=he.type(e);return"function"!==n&&!he.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function o(e,t,n){return he.isFunction(t)?he.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?he.grep(e,function(e){return e===t!==n}):"string"!=typeof t?he.grep(e,function(e){return se.call(t,e)>-1!==n}):Se.test(t)?he.filter(t,e,n):(t=he.filter(t,e),he.grep(e,function(e){return se.call(t,e)>-1!==n&&1===e.nodeType}))}function a(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function s(e){var t={};return he.each(e.match(Me)||[],function(e,n){t[n]=!0}),t}function l(e){return e}function c(e){throw e}function u(e,t,n,i){var r;try{e&&he.isFunction(r=e.promise)?r.call(e).done(t).fail(n):e&&he.isFunction(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}function d(){ne.removeEventListener("DOMContentLoaded",d),e.removeEventListener("load",d),he.ready()}function f(){this.expando=he.expando+f.uid++}function p(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Fe.test(e)?JSON.parse(e):e)}function h(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Re,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=p(n)}catch(e){}je.set(e,t,n)}else n=void 0;return n}function g(e,t,n,i){var r,o=1,a=20,s=i?function(){return i.cur()}:function(){return he.css(e,t,"")},l=s(),c=n&&n[3]||(he.cssNumber[t]?"":"px"),u=(he.cssNumber[t]||"px"!==c&&+l)&&_e.exec(he.css(e,t));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{o=o||".5",u/=o,he.style(e,t,u+c)}while(o!==(o=s()/l)&&1!==o&&--a)}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}function m(e){var t,n=e.ownerDocument,i=e.nodeName,r=Ye[i];return r||(t=n.body.appendChild(n.createElement(i)),r=he.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),Ye[i]=r,r)}function v(e,t){for(var n,i,r=[],o=0,a=e.length;o<a;o++)i=e[o],i.style&&(n=i.style.display,t?("none"===n&&(r[o]=Ie.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&qe(i)&&(r[o]=m(i))):"none"!==n&&(r[o]="none",Ie.set(i,"display",n)));for(o=0;o<a;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&r(e,t)?he.merge([e],n):n}function b(e,t){for(var n=0,i=e.length;n<i;n++)Ie.set(e[n],"globalEval",!t||Ie.get(t[n],"globalEval"))}function x(e,t,n,i,r){for(var o,a,s,l,c,u,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===he.type(o))he.merge(f,o.nodeType?[o]:o);else if(Xe.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(ze.exec(o)||["",""])[1].toLowerCase(),l=Ge[s]||Ge._default,a.innerHTML=l[1]+he.htmlPrefilter(o)+l[2],u=l[0];u--;)a=a.lastChild;he.merge(f,a.childNodes),a=d.firstChild,a.textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",p=0;o=f[p++];)if(i&&he.inArray(o,i)>-1)r&&r.push(o);else if(c=he.contains(o.ownerDocument,o),a=y(d.appendChild(o),"script"),c&&b(a),n)for(u=0;o=a[u++];)Ue.test(o.type||"")&&n.push(o);return d}function w(){return!0}function k(){return!1}function C(){try{return ne.activeElement}catch(e){}}function S(e,t,n,i,r,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(s in t)S(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=k;else if(!r)return e;return 1===o&&(a=r,r=function(e){return he().off(e),a.apply(this,arguments)},r.guid=a.guid||(a.guid=he.guid++)),e.each(function(){he.event.add(this,t,r,i,n)})}function E(e,t){return r(e,"table")&&r(11!==t.nodeType?t:t.firstChild,"tr")?he(">tbody",e)[0]||e:e}function T(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function P(e){var t=nt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function D(e,t){var n,i,r,o,a,s,l,c;if(1===t.nodeType){if(Ie.hasData(e)&&(o=Ie.access(e),a=Ie.set(t,o),c=o.events)){delete a.handle,a.events={};for(r in c)for(n=0,i=c[r].length;n<i;n++)he.event.add(t,r,c[r][n])}je.hasData(e)&&(s=je.access(e),l=he.extend({},s),je.set(t,l))}}function M(e,t){var n=t.nodeName.toLowerCase();"input"===n&&We.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function A(e,t,i,r){t=oe.apply([],t);var o,a,s,l,c,u,d=0,f=e.length,p=f-1,h=t[0],g=he.isFunction(h);if(g||f>1&&"string"==typeof h&&!pe.checkClone&&tt.test(h))return e.each(function(n){var o=e.eq(n);g&&(t[0]=h.call(this,n,o.html())),A(o,t,i,r)});if(f&&(o=x(t,e[0].ownerDocument,!1,e,r),a=o.firstChild,1===o.childNodes.length&&(o=a),a||r)){for(s=he.map(y(o,"script"),T),l=s.length;d<f;d++)c=o,d!==p&&(c=he.clone(c,!0,!0),l&&he.merge(s,y(c,"script"))),i.call(e[d],c,d);if(l)for(u=s[s.length-1].ownerDocument,he.map(s,P),d=0;d<l;d++)c=s[d],Ue.test(c.type||"")&&!Ie.access(c,"globalEval")&&he.contains(u,c)&&(c.src?he._evalUrl&&he._evalUrl(c.src):n(c.textContent.replace(it,""),u))}return e}function O(e,t,n){for(var i,r=t?he.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||he.cleanData(y(i)),i.parentNode&&(n&&he.contains(i.ownerDocument,i)&&b(y(i,"script")),i.parentNode.removeChild(i));return e}function L(e,t,n){var i,r,o,a,s=e.style;return n=n||at(e),n&&(a=n.getPropertyValue(t)||n[t],""!==a||he.contains(e.ownerDocument,e)||(a=he.style(e,t)),!pe.pixelMarginRight()&&ot.test(a)&&rt.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function N(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function I(e){if(e in ft)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=dt.length;n--;)if((e=dt[n]+t)in ft)return e}function j(e){var t=he.cssProps[e];return t||(t=he.cssProps[e]=I(e)||e),t}function F(e,t,n){var i=_e.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function R(e,t,n,i,r){var o,a=0;for(o=n===(i?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(a+=he.css(e,n+He[o],!0,r)),i?("content"===n&&(a-=he.css(e,"padding"+He[o],!0,r)),"margin"!==n&&(a-=he.css(e,"border"+He[o]+"Width",!0,r))):(a+=he.css(e,"padding"+He[o],!0,r),"padding"!==n&&(a+=he.css(e,"border"+He[o]+"Width",!0,r)));return a}function $(e,t,n){var i,r=at(e),o=L(e,t,r),a="border-box"===he.css(e,"boxSizing",!1,r);return ot.test(o)?o:(i=a&&(pe.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+R(e,t,n||(a?"border":"content"),i,r)+"px")}function _(e,t,n,i,r){return new _.prototype.init(e,t,n,i,r)}function H(){ht&&(!1===ne.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(H):e.setTimeout(H,he.fx.interval),he.fx.tick())}function q(){return e.setTimeout(function(){pt=void 0}),pt=he.now()}function B(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)n=He[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function Y(e,t,n){for(var i,r=(U.tweeners[t]||[]).concat(U.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function W(e,t,n){var i,r,o,a,s,l,c,u,d="width"in t||"height"in t,f=this,p={},h=e.style,g=e.nodeType&&qe(e),m=Ie.get(e,"fxshow");n.queue||(a=he._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,he.queue(e,"fx").length||a.empty.fire()})}));for(i in t)if(r=t[i],gt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}p[i]=m&&m[i]||he.style(e,i)}if((l=!he.isEmptyObject(t))||!he.isEmptyObject(p)){d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=m&&m.display,null==c&&(c=Ie.get(e,"display")),u=he.css(e,"display"),"none"===u&&(c?u=c:(v([e],!0),c=e.style.display||c,u=he.css(e,"display"),v([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===he.css(e,"float")&&(l||(f.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1;for(i in p)l||(m?"hidden"in m&&(g=m.hidden):m=Ie.access(e,"fxshow",{display:c}),o&&(m.hidden=!g),g&&v([e],!0),f.done(function(){g||v([e]),Ie.remove(e,"fxshow");for(i in p)he.style(e,i,p[i])})),l=Y(g?m[i]:0,i,f),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}}function z(e,t){var n,i,r,o,a;for(n in e)if(i=he.camelCase(n),r=t[i],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=he.cssHooks[i])&&"expand"in a){o=a.expand(o),delete e[i];for(n in o)n in e||(e[n]=o[n],t[n]=r)}else t[i]=r}function U(e,t,n){var i,r,o=0,a=U.prefilters.length,s=he.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=pt||q(),n=Math.max(0,c.startTime+c.duration-t),i=n/c.duration||0,o=1-i,a=0,l=c.tweens.length;a<l;a++)c.tweens[a].run(o);return s.notifyWith(e,[c,o,n]),o<1&&l?n:(l||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:he.extend({},t),opts:he.extend(!0,{specialEasing:{},easing:he.easing._default},n),originalProperties:t,originalOptions:n,startTime:pt||q(),duration:n.duration,tweens:[],createTween:function(t,n){var i=he.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(z(u,c.opts.specialEasing);o<a;o++)if(i=U.prefilters[o].call(c,e,u,c.opts))return he.isFunction(i.stop)&&(he._queueHooks(c.elem,c.opts.queue).stop=he.proxy(i.stop,i)),i;return he.map(u,Y,c),he.isFunction(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),he.fx.timer(he.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}function G(e){return(e.match(Me)||[]).join(" ")}function X(e){return e.getAttribute&&e.getAttribute("class")||""}function V(e,t,n,i){var r;if(Array.isArray(t))he.each(t,function(t,r){n||Tt.test(e)?i(e,r):V(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==he.type(t))i(e,t);else for(r in t)V(e+"["+r+"]",t[r],n,i)}function K(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(Me)||[];if(he.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Q(e,t,n,i){function r(s){var l;return o[s]=!0,he.each(e[s]||[],function(e,s){var c=s(t,n,i);return"string"!=typeof c||a||o[c]?a?!(l=c):void 0:(t.dataTypes.unshift(c),r(c),!1)}),l}var o={},a=e===$t;return r(t.dataTypes[0])||!o["*"]&&r("*")}function Z(e,t){var n,i,r=he.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&he.extend(!0,e,i),e}function J(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}function ee(e,t,n,i){var r,o,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=c[l+" "+o]||c["* "+o]))for(r in c)if(s=r.split(" "),s[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[r]:!0!==c[r]&&(o=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}var te=[],ne=e.document,ie=Object.getPrototypeOf,re=te.slice,oe=te.concat,ae=te.push,se=te.indexOf,le={},ce=le.toString,ue=le.hasOwnProperty,de=ue.toString,fe=de.call(Object),pe={},he=function(e,t){return new he.fn.init(e,t)},ge=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ve=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};he.fn=he.prototype={jquery:"3.2.1",constructor:he,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=he.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return he.each(this,e)},map:function(e){return this.pushStack(he.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ae,sort:te.sort,splice:te.splice},he.extend=he.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||he.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],i=e[t],a!==i&&(c&&i&&(he.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&he.isPlainObject(n)?n:{},a[t]=he.extend(c,o,i)):void 0!==i&&(a[t]=i));return a},he.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===he.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=he.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ce.call(e))&&(!(t=ie(e))||"function"==typeof(n=ue.call(t,"constructor")&&t.constructor)&&de.call(n)===fe)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ce.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ve,ye)},each:function(e,t){var n,r=0;if(i(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(ge,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?he.merge(n,"string"==typeof e?[e]:e):ae.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var r,o,a=0,s=[];if(i(e))for(r=e.length;a<r;a++)null!=(o=t(e[a],a,n))&&s.push(o);else for(a in e)null!=(o=t(e[a],a,n))&&s.push(o);return oe.apply([],s)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),he.isFunction(e))return i=re.call(arguments,2),r=function(){return e.apply(t||this,i.concat(re.call(arguments)))},r.guid=e.guid=e.guid||he.guid++,r},now:Date.now,support:pe}),"function"==typeof Symbol&&(he.fn[Symbol.iterator]=te[Symbol.iterator]),he.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var be=function(e){function t(e,t,n,i){var r,o,a,s,l,u,f,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!i&&((t?t.ownerDocument||t:_)!==O&&A(t),t=t||O,N)){if(11!==h&&(l=ge.exec(e)))if(r=l[1]){if(9===h){if(!(a=t.getElementById(r)))return n;if(a.id===r)return n.push(a),n}else if(p&&(a=p.getElementById(r))&&R(t,a)&&a.id===r)return n.push(a),n}else{if(l[2])return K.apply(n,t.getElementsByTagName(e)),n;if((r=l[3])&&x.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(r)),n}if(x.qsa&&!W[e+" "]&&(!I||!I.test(e))){if(1!==h)p=t,f=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(be,xe):t.setAttribute("id",s=$),u=S(e),o=u.length;o--;)u[o]="#"+s+" "+d(u[o]);f=u.join(","),p=me.test(e)&&c(t.parentNode)||t}if(f)try{return K.apply(n,p.querySelectorAll(f)),n}catch(e){}finally{s===$&&t.removeAttribute("id")}}}return T(e.replace(oe,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[$]=!0,e}function r(e){var t=O.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=t}function a(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ke(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return i(function(t){return t=+t,i(function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))})})}function c(e){return e&&void 0!==e.getElementsByTagName&&e}function u(){}function d(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function f(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&"parentNode"===o,s=q++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,l){var c,u,d,f=[H,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(d=t[$]||(t[$]={}),u=d[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[o])&&c[0]===H&&c[1]===s)return f[2]=c[2];if(u[o]=f,f[2]=e(t,n,l))return!0}return!1}}function p(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function h(e,n,i){for(var r=0,o=n.length;r<o;r++)t(e,n[r],i);return i}function g(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),c&&t.push(s)));return a}function m(e,t,n,r,o,a){return r&&!r[$]&&(r=m(r)),o&&!o[$]&&(o=m(o,a)),i(function(i,a,s,l){var c,u,d,f=[],p=[],m=a.length,v=i||h(t||"*",s.nodeType?[s]:s,[]),y=!e||!i&&t?v:g(v,f,e,s,l),b=n?o||(i?e:m||r)?[]:a:y;if(n&&n(y,b,s,l),r)for(c=g(b,p),r(c,[],s,l),u=c.length;u--;)(d=c[u])&&(b[p[u]]=!(y[p[u]]=d));if(i){if(o||e){if(o){for(c=[],u=b.length;u--;)(d=b[u])&&c.push(y[u]=d);o(null,b=[],c,l)}for(u=b.length;u--;)(d=b[u])&&(c=o?Z(i,d):f[u])>-1&&(i[c]=!(a[c]=d))}}else b=g(b===a?b.splice(m,b.length):b),o?o(null,a,b,l):K.apply(a,b)})}function v(e){for(var t,n,i,r=e.length,o=w.relative[e[0].type],a=o||w.relative[" "],s=o?1:0,l=f(function(e){return e===t},a,!0),c=f(function(e){return Z(t,e)>-1},a,!0),u=[function(e,n,i){var r=!o&&(i||n!==P)||((t=n).nodeType?l(e,n,i):c(e,n,i));return t=null,r}];s<r;s++)if(n=w.relative[e[s].type])u=[f(p(u),n)];else{if(n=w.filter[e[s].type].apply(null,e[s].matches),n[$]){for(i=++s;i<r&&!w.relative[e[i].type];i++);return m(s>1&&p(u),s>1&&d(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(oe,"$1"),n,s<i&&v(e.slice(s,i)),i<r&&v(e=e.slice(i)),i<r&&d(e))}u.push(n)}return p(u)}function y(e,n){var r=n.length>0,o=e.length>0,a=function(i,a,s,l,c){var u,d,f,p=0,h="0",m=i&&[],v=[],y=P,b=i||o&&w.find.TAG("*",c),x=H+=null==y?1:Math.random()||.1,k=b.length;for(c&&(P=a===O||a||c);h!==k&&null!=(u=b[h]);h++){if(o&&u){for(d=0,a||u.ownerDocument===O||(A(u),s=!N);f=e[d++];)if(f(u,a||O,s)){l.push(u);break}c&&(H=x)}r&&((u=!f&&u)&&p--,i&&m.push(u))}if(p+=h,r&&h!==p){for(d=0;f=n[d++];)f(m,v,a,s);if(i){if(p>0)for(;h--;)m[h]||v[h]||(v[h]=X.call(l));v=g(v)}K.apply(l,v),c&&!i&&v.length>0&&p+n.length>1&&t.uniqueSort(l)}return c&&(H=x,P=y),m};return r?i(a):a}var b,x,w,k,C,S,E,T,P,D,M,A,O,L,N,I,j,F,R,$="sizzle"+1*new Date,_=e.document,H=0,q=0,B=n(),Y=n(),W=n(),z=function(e,t){return e===t&&(M=!0),0},U={}.hasOwnProperty,G=[],X=G.pop,V=G.push,K=G.push,Q=G.slice,Z=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ie=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",re=new RegExp(ee+"+","g"),oe=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),ae=new RegExp("^"+ee+"*,"+ee+"*"),se=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ce=new RegExp(ie),ue=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ie),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},fe=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},we=function(){A()},ke=f(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{K.apply(G=Q.call(_.childNodes),_.childNodes),G[_.childNodes.length].nodeType}catch(e){K={apply:G.length?function(e,t){V.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}x=t.support={},C=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},A=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:_;return i!==O&&9===i.nodeType&&i.documentElement?(O=i,L=O.documentElement,N=!C(O),_!==O&&(n=O.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",we,!1):n.attachEvent&&n.attachEvent("onunload",we)),x.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=r(function(e){return e.appendChild(O.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=he.test(O.getElementsByClassName),x.getById=r(function(e){return L.appendChild(e).id=$,!O.getElementsByName||!O.getElementsByName($).length}),x.getById?(w.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&N){var n=t.getElementById(e);return n?[n]:[]}}):(w.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&N){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),w.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},w.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&N)return t.getElementsByClassName(e)},j=[],I=[],(x.qsa=he.test(O.querySelectorAll))&&(r(function(e){L.appendChild(e).innerHTML="<a id='"+$+"'></a><select id='"+$+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&I.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||I.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+$+"-]").length||I.push("~="),e.querySelectorAll(":checked").length||I.push(":checked"),e.querySelectorAll("a#"+$+"+*").length||I.push(".#.+[+~]")}),r(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=O.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&I.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&I.push(":enabled",":disabled"),L.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&I.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),I.push(",.*:")})),(x.matchesSelector=he.test(F=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&r(function(e){x.disconnectedMatch=F.call(e,"*"),F.call(e,"[s!='']:x"),j.push("!=",ie)}),I=I.length&&new RegExp(I.join("|")),j=j.length&&new RegExp(j.join("|")),t=he.test(L.compareDocumentPosition),R=t||he.test(L.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},z=t?function(e,t){if(e===t)return M=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===O||e.ownerDocument===_&&R(_,e)?-1:t===O||t.ownerDocument===_&&R(_,t)?1:D?Z(D,e)-Z(D,t):0:4&n?-1:1)}:function(e,t){if(e===t)return M=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],l=[t];if(!r||!o)return e===O?-1:t===O?1:r?-1:o?1:D?Z(D,e)-Z(D,t):0;if(r===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[i]===l[i];)i++;return i?a(s[i],l[i]):s[i]===_?-1:l[i]===_?1:0},O):O},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==O&&A(e),n=n.replace(le,"='$1']"),x.matchesSelector&&N&&!W[n+" "]&&(!j||!j.test(n))&&(!I||!I.test(n)))try{var i=F.call(e,n);if(i||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,O,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==O&&A(e),R(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==O&&A(e);var n=w.attrHandle[t.toLowerCase()],i=n&&U.call(w.attrHandle,t.toLowerCase())?n(e,t,!N):void 0;return void 0!==i?i:x.attributes||!N?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(be,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,r=0;if(M=!x.detectDuplicates,D=!x.sortStable&&e.slice(0),e.sort(z),M){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return D=null,e},k=t.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=k(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=k(t);return n},w=t.selectors={cacheLength:50,createPseudo:i,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ce.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=B[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&B(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(r){var o=t.attr(r,e);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(re," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,f,p,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(m){if(o){for(;g;){for(f=t;f=f[g];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(f=m,d=f[$]||(f[$]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),c=u[e]||[],p=c[0]===H&&c[1],b=p&&c[2],f=p&&m.childNodes[p];f=++p&&f&&f[g]||(b=p=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){u[e]=[H,p,b];break}}else if(y&&(f=t,d=f[$]||(f[$]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),c=u[e]||[],p=c[0]===H&&c[1],b=p),!1===b)for(;(f=++p&&f&&f[g]||(b=p=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++b||(y&&(d=f[$]||(f[$]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),u[e]=[H,b]),f!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,n){var r,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[$]?o(n):o.length>1?(r=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,r=o(e,n),a=r.length;a--;)i=Z(e,r[a]),e[i]=!(t[i]=r[a])}):function(e){return o(e,0,r)}):o}},pseudos:{not:i(function(e){var t=[],n=[],r=E(e.replace(oe,"$1"));return r[$]?i(function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||k(t)).indexOf(e)>-1}}),lang:i(function(e){return ue.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=N?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===L},focus:function(e){return e===O.activeElement&&(!O.hasFocus||O.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:s(!1),disabled:s(!0),checked:function(e){var t=e.nodeName.toLowerCase()
;return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return fe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:l(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}},w.pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return u.prototype=w.filters=w.pseudos,w.setFilters=new u,S=t.tokenize=function(e,n){var i,r,o,a,s,l,c,u=Y[e+" "];if(u)return n?0:u.slice(0);for(s=e,l=[],c=w.preFilter;s;){i&&!(r=ae.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),i=!1,(r=se.exec(s))&&(i=r.shift(),o.push({value:i,type:r[0].replace(oe," ")}),s=s.slice(i.length));for(a in w.filter)!(r=de[a].exec(s))||c[a]&&!(r=c[a](r))||(i=r.shift(),o.push({value:i,type:a,matches:r}),s=s.slice(i.length));if(!i)break}return n?s.length:s?t.error(e):Y(e,l).slice(0)},E=t.compile=function(e,t){var n,i=[],r=[],o=W[e+" "];if(!o){for(t||(t=S(e)),n=t.length;n--;)o=v(t[n]),o[$]?i.push(o):r.push(o);o=W(e,y(r,i)),o.selector=e}return o},T=t.select=function(e,t,n,i){var r,o,a,s,l,u="function"==typeof e&&e,f=!i&&S(e=u.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===t.nodeType&&N&&w.relative[o[1].type]){if(!(t=(w.find.ID(a.matches[0].replace(ve,ye),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=de.needsContext.test(e)?0:o.length;r--&&(a=o[r],!w.relative[s=a.type]);)if((l=w.find[s])&&(i=l(a.matches[0].replace(ve,ye),me.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(r,1),!(e=i.length&&d(o)))return K.apply(n,i),n;break}}return(u||E(e,f))(i,t,!N,n,!t||me.test(e)&&c(t.parentNode)||t),n},x.sortStable=$.split("").sort(z).join("")===$,x.detectDuplicates=!!M,A(),x.sortDetached=r(function(e){return 1&e.compareDocumentPosition(O.createElement("fieldset"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||o(J,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);he.find=be,he.expr=be.selectors,he.expr[":"]=he.expr.pseudos,he.uniqueSort=he.unique=be.uniqueSort,he.text=be.getText,he.isXMLDoc=be.isXML,he.contains=be.contains,he.escapeSelector=be.escape;var xe=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&he(e).is(n))break;i.push(e)}return i},we=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},ke=he.expr.match.needsContext,Ce=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Se=/^.[^:#\[\.,]*$/;he.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?he.find.matchesSelector(i,e)?[i]:[]:he.find.matches(e,he.grep(t,function(e){return 1===e.nodeType}))},he.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(he(e).filter(function(){for(t=0;t<i;t++)if(he.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)he.find(e,r[t],n);return i>1?he.uniqueSort(n):n},filter:function(e){return this.pushStack(o(this,e||[],!1))},not:function(e){return this.pushStack(o(this,e||[],!0))},is:function(e){return!!o(this,"string"==typeof e&&ke.test(e)?he(e):e||[],!1).length}});var Ee,Te=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(he.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||Ee,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Te.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof he?t[0]:t,he.merge(this,he.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:ne,!0)),Ce.test(i[1])&&he.isPlainObject(t))for(i in t)he.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return r=ne.getElementById(i[2]),r&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):he.isFunction(e)?void 0!==n.ready?n.ready(e):e(he):he.makeArray(e,this)}).prototype=he.fn,Ee=he(ne);var Pe=/^(?:parents|prev(?:Until|All))/,De={children:!0,contents:!0,next:!0,prev:!0};he.fn.extend({has:function(e){var t=he(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(he.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&he(e);if(!ke.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&he.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?he.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?se.call(he(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(he.uniqueSort(he.merge(this.get(),he(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),he.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return xe(e,"parentNode")},parentsUntil:function(e,t,n){return xe(e,"parentNode",n)},next:function(e){return a(e,"nextSibling")},prev:function(e){return a(e,"previousSibling")},nextAll:function(e){return xe(e,"nextSibling")},prevAll:function(e){return xe(e,"previousSibling")},nextUntil:function(e,t,n){return xe(e,"nextSibling",n)},prevUntil:function(e,t,n){return xe(e,"previousSibling",n)},siblings:function(e){return we((e.parentNode||{}).firstChild,e)},children:function(e){return we(e.firstChild)},contents:function(e){return r(e,"iframe")?e.contentDocument:(r(e,"template")&&(e=e.content||e),he.merge([],e.childNodes))}},function(e,t){he.fn[e]=function(n,i){var r=he.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=he.filter(i,r)),this.length>1&&(De[e]||he.uniqueSort(r),Pe.test(e)&&r.reverse()),this.pushStack(r)}});var Me=/[^\x20\t\r\n\f]+/g;he.Callbacks=function(e){e="string"==typeof e?s(e):he.extend({},e);var t,n,i,r,o=[],a=[],l=-1,c=function(){for(r=r||e.once,i=t=!0;a.length;l=-1)for(n=a.shift();++l<o.length;)!1===o[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(l=o.length-1,a.push(n)),function t(n){he.each(n,function(n,i){he.isFunction(i)?e.unique&&u.has(i)||o.push(i):i&&i.length&&"string"!==he.type(i)&&t(i)})}(arguments),n&&!t&&c()),this},remove:function(){return he.each(arguments,function(e,t){for(var n;(n=he.inArray(t,o,n))>-1;)o.splice(n,1),n<=l&&l--}),this},has:function(e){return e?he.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=a=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},he.extend({Deferred:function(t){var n=[["notify","progress",he.Callbacks("memory"),he.Callbacks("memory"),2],["resolve","done",he.Callbacks("once memory"),he.Callbacks("once memory"),0,"resolved"],["reject","fail",he.Callbacks("once memory"),he.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return he.Deferred(function(t){he.each(n,function(n,i){var r=he.isFunction(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&he.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(t,i,r){function o(t,n,i,r){return function(){var s=this,u=arguments,d=function(){var e,d;if(!(t<a)){if((e=i.apply(s,u))===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,he.isFunction(d)?r?d.call(e,o(a,n,l,r),o(a,n,c,r)):(a++,d.call(e,o(a,n,l,r),o(a,n,c,r),o(a,n,l,n.notifyWith))):(i!==l&&(s=void 0,u=[e]),(r||n.resolveWith)(s,u))}},f=r?d:function(){try{d()}catch(e){he.Deferred.exceptionHook&&he.Deferred.exceptionHook(e,f.stackTrace),t+1>=a&&(i!==c&&(s=void 0,u=[e]),n.rejectWith(s,u))}};t?f():(he.Deferred.getStackHook&&(f.stackTrace=he.Deferred.getStackHook()),e.setTimeout(f))}}var a=0;return he.Deferred(function(e){n[0][3].add(o(0,e,he.isFunction(r)?r:l,e.notifyWith)),n[1][3].add(o(0,e,he.isFunction(t)?t:l)),n[2][3].add(o(0,e,he.isFunction(i)?i:c))}).promise()},promise:function(e){return null!=e?he.extend(e,r):r}},o={};return he.each(n,function(e,t){var a=t[2],s=t[5];r[t[1]]=a.add,s&&a.add(function(){i=s},n[3-e][2].disable,n[0][2].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=re.call(arguments),o=he.Deferred(),a=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?re.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(u(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||he.isFunction(r[n]&&r[n].then)))return o.then();for(;n--;)u(r[n],a(n),o.reject);return o.promise()}});var Ae=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;he.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Ae.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},he.readyException=function(t){e.setTimeout(function(){throw t})};var Oe=he.Deferred();he.fn.ready=function(e){return Oe.then(e).catch(function(e){he.readyException(e)}),this},he.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--he.readyWait:he.isReady)||(he.isReady=!0,!0!==e&&--he.readyWait>0||Oe.resolveWith(ne,[he]))}}),he.ready.then=Oe.then,"complete"===ne.readyState||"loading"!==ne.readyState&&!ne.documentElement.doScroll?e.setTimeout(he.ready):(ne.addEventListener("DOMContentLoaded",d),e.addEventListener("load",d));var Le=function(e,t,n,i,r,o,a){var s=0,l=e.length,c=null==n;if("object"===he.type(n)){r=!0;for(s in n)Le(e,t,s,n[s],!0,o,a)}else if(void 0!==i&&(r=!0,he.isFunction(i)||(a=!0),c&&(a?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(he(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:c?t.call(e):l?t(e[0],n):o},Ne=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};f.uid=1,f.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Ne(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[he.camelCase(t)]=n;else for(i in t)r[he.camelCase(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][he.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){Array.isArray(t)?t=t.map(he.camelCase):(t=he.camelCase(t),t=t in i?[t]:t.match(Me)||[]),n=t.length;for(;n--;)delete i[t[n]]}(void 0===t||he.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!he.isEmptyObject(t)}};var Ie=new f,je=new f,Fe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Re=/[A-Z]/g;he.extend({hasData:function(e){return je.hasData(e)||Ie.hasData(e)},data:function(e,t,n){return je.access(e,t,n)},removeData:function(e,t){je.remove(e,t)},_data:function(e,t,n){return Ie.access(e,t,n)},_removeData:function(e,t){Ie.remove(e,t)}}),he.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=je.get(o),1===o.nodeType&&!Ie.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(i=a[n].name,0===i.indexOf("data-")&&(i=he.camelCase(i.slice(5)),h(o,i,r[i])));Ie.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){je.set(this,e)}):Le(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=je.get(o,e)))return n;if(void 0!==(n=h(o,e)))return n}else this.each(function(){je.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){je.remove(this,e)})}}),he.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Ie.get(e,t),n&&(!i||Array.isArray(n)?i=Ie.access(e,t,he.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=he.queue(e,t),i=n.length,r=n.shift(),o=he._queueHooks(e,t),a=function(){he.dequeue(e,t)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,a,o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ie.get(e,n)||Ie.access(e,n,{empty:he.Callbacks("once memory").add(function(){Ie.remove(e,[t+"queue",n])})})}}),he.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?he.queue(this[0],e):void 0===t?this:this.each(function(){var n=he.queue(this,e,t);he._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&he.dequeue(this,e)})},dequeue:function(e){return this.each(function(){he.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=he.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Ie.get(o[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var $e=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,_e=new RegExp("^(?:([+-])=|)("+$e+")([a-z%]*)$","i"),He=["Top","Right","Bottom","Left"],qe=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&he.contains(e.ownerDocument,e)&&"none"===he.css(e,"display")},Be=function(e,t,n,i){var r,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];r=n.apply(e,i||[]);for(o in t)e.style[o]=a[o];return r},Ye={};he.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){qe(this)?he(this).show():he(this).hide()})}});var We=/^(?:checkbox|radio)$/i,ze=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ue=/^$|\/(?:java|ecma)script/i,Ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ge.optgroup=Ge.option,Ge.tbody=Ge.tfoot=Ge.colgroup=Ge.caption=Ge.thead,Ge.th=Ge.td;var Xe=/<|&#?\w+;/;!function(){var e=ne.createDocumentFragment(),t=e.appendChild(ne.createElement("div")),n=ne.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),pe.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",pe.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Ve=ne.documentElement,Ke=/^key/,Qe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ze=/^([^.]*)(?:\.(.+)|)/;he.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,c,u,d,f,p,h,g,m=Ie.get(e);if(m)for(n.handler&&(o=n,n=o.handler,r=o.selector),r&&he.find.matchesSelector(Ve,r),n.guid||(n.guid=he.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(t){return void 0!==he&&he.event.triggered!==t.type?he.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Me)||[""],c=t.length;c--;)s=Ze.exec(t[c])||[],p=g=s[1],h=(s[2]||"").split(".").sort(),p&&(d=he.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=he.event.special[p]||{},u=he.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&he.expr.match.needsContext.test(r),namespace:h.join(".")},o),(f=l[p])||(f=l[p]=[],f.delegateCount=0,d.setup&&!1!==d.setup.call(e,i,h,a)||e.addEventListener&&e.addEventListener(p,a)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,u):f.push(u),he.event.global[p]=!0)},remove:function(e,t,n,i,r){var o,a,s,l,c,u,d,f,p,h,g,m=Ie.hasData(e)&&Ie.get(e);if(m&&(l=m.events)){for(t=(t||"").match(Me)||[""],c=t.length;c--;)if(s=Ze.exec(t[c])||[],p=g=s[1],h=(s[2]||"").split(".").sort(),p){for(d=he.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,f=l[p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)u=f[o],!r&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(o,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(e,u));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,m.handle)||he.removeEvent(e,p,m.handle),delete l[p])}else for(p in l)he.event.remove(e,p+t[c],n,i,!0);he.isEmptyObject(l)&&Ie.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=he.event.fix(e),l=new Array(arguments.length),c=(Ie.get(this,"events")||{})[s.type]||[],u=he.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,s)){for(a=he.event.handlers.call(this,s,c),t=0;(r=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(i=((he.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(s.result=i)&&(s.preventDefault(),s.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<l;n++)i=t[n],r=i.selector+" ",void 0===a[r]&&(a[r]=i.needsContext?he(r,this).index(c)>-1:he.find(r,this,null,[c]).length),a[r]&&o.push(i);o.length&&s.push({elem:c,handlers:o})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(he.Event.prototype,e,{enumerable:!0,configurable:!0,get:he.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[he.expando]?e:new he.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==C()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===C()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r(this,"input"))return this.click(),!1},_default:function(e){return r(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},he.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},he.Event=function(e,t){if(!(this instanceof he.Event))return new he.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?w:k,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&he.extend(this,t),this.timeStamp=e&&e.timeStamp||he.now(),this[he.expando]=!0},he.Event.prototype={constructor:he.Event,isDefaultPrevented:k,isPropagationStopped:k,isImmediatePropagationStopped:k,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=w,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=w,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=w,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},he.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ke.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Qe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},he.event.addProp),he.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){he.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return r&&(r===i||he.contains(i,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),he.fn.extend({on:function(e,t,n,i){return S(this,e,t,n,i)},one:function(e,t,n,i){return S(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,he(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=k),this.each(function(){he.event.remove(this,e,n,t)})}});var Je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,et=/<script|<style|<link/i,tt=/checked\s*(?:[^=]|=\s*.checked.)/i,nt=/^true\/(.*)/,it=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;he.extend({htmlPrefilter:function(e){return e.replace(Je,"<$1></$2>")},clone:function(e,t,n){var i,r,o,a,s=e.cloneNode(!0),l=he.contains(e.ownerDocument,e);if(!(pe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||he.isXMLDoc(e)))for(a=y(s),o=y(e),i=0,r=o.length;i<r;i++)M(o[i],a[i]);if(t)if(n)for(o=o||y(e),a=a||y(s),i=0,r=o.length;i<r;i++)D(o[i],a[i]);else D(e,s);return a=y(s,"script"),a.length>0&&b(a,!l&&y(e,"script")),s},cleanData:function(e){for(var t,n,i,r=he.event.special,o=0;void 0!==(n=e[o]);o++)if(Ne(n)){if(t=n[Ie.expando]){if(t.events)for(i in t.events)r[i]?he.event.remove(n,i):he.removeEvent(n,i,t.handle);n[Ie.expando]=void 0}n[je.expando]&&(n[je.expando]=void 0)}}}),he.fn.extend({detach:function(e){return O(this,e,!0)},remove:function(e){return O(this,e)},text:function(e){return Le(this,function(e){return void 0===e?he.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){E(this,e).appendChild(e)}})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=E(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(he.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return he.clone(this,e,t)})},html:function(e){return Le(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!et.test(e)&&!Ge[(ze.exec(e)||["",""])[1].toLowerCase()]){e=he.htmlPrefilter(e);try{for(;n<i;n++)t=this[n]||{},1===t.nodeType&&(he.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;he.inArray(this,e)<0&&(he.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),he.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){he.fn[e]=function(e){for(var n,i=[],r=he(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),he(r[a])[t](n),ae.apply(i,n.get());return this.pushStack(i)}});var rt=/^margin/,ot=new RegExp("^("+$e+")(?!px)[a-z%]+$","i"),at=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ve.appendChild(a);var t=e.getComputedStyle(s);n="1%"!==t.top,o="2px"===t.marginLeft,i="4px"===t.width,s.style.marginRight="50%",r="4px"===t.marginRight,Ve.removeChild(a),s=null}}var n,i,r,o,a=ne.createElement("div"),s=ne.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",pe.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),he.extend(pe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),o}}))}();var st=/^(none|table(?!-c[ea]).+)/,lt=/^--/,ct={position:"absolute",visibility:"hidden",display:"block"},ut={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],ft=ne.createElement("div").style;he.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=L(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=he.camelCase(t),l=lt.test(t),c=e.style;if(l||(t=j(s)),a=he.cssHooks[t]||he.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:c[t];o=typeof n,"string"===o&&(r=_e.exec(n))&&r[1]&&(n=g(e,t,r),o="number"),null!=n&&n===n&&("number"===o&&(n+=r&&r[3]||(he.cssNumber[s]?"":"px")),pe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,a,s=he.camelCase(t);return lt.test(t)||(t=j(s)),a=he.cssHooks[t]||he.cssHooks[s],a&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=L(e,t,i)),"normal"===r&&t in ut&&(r=ut[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),he.each(["height","width"],function(e,t){he.cssHooks[t]={get:function(e,n,i){if(n)return!st.test(he.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?$(e,t,i):Be(e,ct,function(){return $(e,t,i)})},set:function(e,n,i){var r,o=i&&at(e),a=i&&R(e,t,i,"border-box"===he.css(e,"boxSizing",!1,o),o);return a&&(r=_e.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=he.css(e,t)),F(e,n,a)}}}),he.cssHooks.marginLeft=N(pe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(L(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),he.each({margin:"",padding:"",border:"Width"},function(e,t){he.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+He[i]+t]=o[i]||o[i-2]||o[0];return r}},rt.test(e)||(he.cssHooks[e+t].set=F)}),he.fn.extend({css:function(e,t){return Le(this,function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){for(i=at(e),r=t.length;a<r;a++)o[t[a]]=he.css(e,t[a],!1,i);return o}return void 0!==n?he.style(e,t,n):he.css(e,t)},e,t,arguments.length>1)}}),he.Tween=_,_.prototype={constructor:_,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||he.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(he.cssNumber[n]?"":"px")},cur:function(){var e=_.propHooks[this.prop];return e&&e.get?e.get(this):_.propHooks._default.get(this)},run:function(e){var t,n=_.propHooks[this.prop];return this.options.duration?this.pos=t=he.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):_.propHooks._default.set(this),this}},_.prototype.init.prototype=_.prototype,_.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=he.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){he.fx.step[e.prop]?he.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[he.cssProps[e.prop]]&&!he.cssHooks[e.prop]?e.elem[e.prop]=e.now:he.style(e.elem,e.prop,e.now+e.unit)}}},_.propHooks.scrollTop=_.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},he.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},he.fx=_.prototype.init,he.fx.step={};var pt,ht,gt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;he.Animation=he.extend(U,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return g(n.elem,e,_e.exec(t),n),n}]},tweener:function(e,t){he.isFunction(e)?(t=e,e=["*"]):e=e.match(Me);for(var n,i=0,r=e.length;i<r;i++)n=e[i],U.tweeners[n]=U.tweeners[n]||[],U.tweeners[n].unshift(t)},prefilters:[W],prefilter:function(e,t){t?U.prefilters.unshift(e):U.prefilters.push(e)}}),he.speed=function(e,t,n){var i=e&&"object"==typeof e?he.extend({},e):{complete:n||!n&&t||he.isFunction(e)&&e,duration:e,easing:n&&t||t&&!he.isFunction(t)&&t};return he.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in he.fx.speeds?i.duration=he.fx.speeds[i.duration]:i.duration=he.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){he.isFunction(i.old)&&i.old.call(this),i.queue&&he.dequeue(this,i.queue)},i},he.fn.extend({fadeTo:function(e,t,n,i){return this.filter(qe).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=he.isEmptyObject(e),o=he.speed(t,n,i),a=function(){var t=U(this,he.extend({},e),o);(r||Ie.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=he.timers,a=Ie.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&mt.test(r)&&i(a[r])
;for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||he.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Ie.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=he.timers,a=i?i.length:0;for(n.finish=!0,he.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),he.each(["toggle","show","hide"],function(e,t){var n=he.fn[t];he.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(B(t,!0),e,i,r)}}),he.each({slideDown:B("show"),slideUp:B("hide"),slideToggle:B("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){he.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),he.timers=[],he.fx.tick=function(){var e,t=0,n=he.timers;for(pt=he.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||he.fx.stop(),pt=void 0},he.fx.timer=function(e){he.timers.push(e),he.fx.start()},he.fx.interval=13,he.fx.start=function(){ht||(ht=!0,H())},he.fx.stop=function(){ht=null},he.fx.speeds={slow:600,fast:200,_default:400},he.fn.delay=function(t,n){return t=he.fx?he.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})},function(){var e=ne.createElement("input"),t=ne.createElement("select"),n=t.appendChild(ne.createElement("option"));e.type="checkbox",pe.checkOn=""!==e.value,pe.optSelected=n.selected,e=ne.createElement("input"),e.value="t",e.type="radio",pe.radioValue="t"===e.value}();var vt,yt=he.expr.attrHandle;he.fn.extend({attr:function(e,t){return Le(this,he.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){he.removeAttr(this,e)})}}),he.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?he.prop(e,t,n):(1===o&&he.isXMLDoc(e)||(r=he.attrHooks[t.toLowerCase()]||(he.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void he.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=he.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!pe.radioValue&&"radio"===t&&r(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(Me);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return!1===t?he.removeAttr(e,n):e.setAttribute(n,n),n}},he.each(he.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||he.find.attr;yt[t]=function(e,t,i){var r,o,a=t.toLowerCase();return i||(o=yt[a],yt[a]=r,r=null!=n(e,t,i)?a:null,yt[a]=o),r}});var bt=/^(?:input|select|textarea|button)$/i,xt=/^(?:a|area)$/i;he.fn.extend({prop:function(e,t){return Le(this,he.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[he.propFix[e]||e]})}}),he.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&he.isXMLDoc(e)||(t=he.propFix[t]||t,r=he.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=he.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||xt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),pe.optSelected||(he.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),he.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){he.propFix[this.toLowerCase()]=this}),he.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(he.isFunction(e))return this.each(function(t){he(this).addClass(e.call(this,t,X(this)))});if("string"==typeof e&&e)for(t=e.match(Me)||[];n=this[l++];)if(r=X(n),i=1===n.nodeType&&" "+G(r)+" "){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");s=G(i),r!==s&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(he.isFunction(e))return this.each(function(t){he(this).removeClass(e.call(this,t,X(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Me)||[];n=this[l++];)if(r=X(n),i=1===n.nodeType&&" "+G(r)+" "){for(a=0;o=t[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");s=G(i),r!==s&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):he.isFunction(e)?this.each(function(n){he(this).toggleClass(e.call(this,n,X(this),t),t)}):this.each(function(){var t,i,r,o;if("string"===n)for(i=0,r=he(this),o=e.match(Me)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||(t=X(this),t&&Ie.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Ie.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+G(X(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;he.fn.extend({val:function(e){var t,n,i,r=this[0];{if(arguments.length)return i=he.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(r=i?e.call(this,n,he(this).val()):e,null==r?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=he.map(r,function(e){return null==e?"":e+""})),(t=he.valHooks[this.type]||he.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return(t=he.valHooks[r.type]||he.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(wt,""):null==n?"":n)}}}),he.extend({valHooks:{option:{get:function(e){var t=he.find.attr(e,"value");return null!=t?t:G(he.text(e))}},select:{get:function(e){var t,n,i,o=e.options,a=e.selectedIndex,s="select-one"===e.type,l=s?null:[],c=s?a+1:o.length;for(i=a<0?c:s?a:0;i<c;i++)if(n=o[i],(n.selected||i===a)&&!n.disabled&&(!n.parentNode.disabled||!r(n.parentNode,"optgroup"))){if(t=he(n).val(),s)return t;l.push(t)}return l},set:function(e,t){for(var n,i,r=e.options,o=he.makeArray(t),a=r.length;a--;)i=r[a],(i.selected=he.inArray(he.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),he.each(["radio","checkbox"],function(){he.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=he.inArray(he(e).val(),t)>-1}},pe.checkOn||(he.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var kt=/^(?:focusinfocus|focusoutblur)$/;he.extend(he.event,{trigger:function(t,n,i,r){var o,a,s,l,c,u,d,f=[i||ne],p=ue.call(t,"type")?t.type:t,h=ue.call(t,"namespace")?t.namespace.split("."):[];if(a=s=i=i||ne,3!==i.nodeType&&8!==i.nodeType&&!kt.test(p+he.event.triggered)&&(p.indexOf(".")>-1&&(h=p.split("."),p=h.shift(),h.sort()),c=p.indexOf(":")<0&&"on"+p,t=t[he.expando]?t:new he.Event(p,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:he.makeArray(n,[t]),d=he.event.special[p]||{},r||!d.trigger||!1!==d.trigger.apply(i,n))){if(!r&&!d.noBubble&&!he.isWindow(i)){for(l=d.delegateType||p,kt.test(l+p)||(a=a.parentNode);a;a=a.parentNode)f.push(a),s=a;s===(i.ownerDocument||ne)&&f.push(s.defaultView||s.parentWindow||e)}for(o=0;(a=f[o++])&&!t.isPropagationStopped();)t.type=o>1?l:d.bindType||p,u=(Ie.get(a,"events")||{})[t.type]&&Ie.get(a,"handle"),u&&u.apply(a,n),(u=c&&a[c])&&u.apply&&Ne(a)&&(t.result=u.apply(a,n),!1===t.result&&t.preventDefault());return t.type=p,r||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),n)||!Ne(i)||c&&he.isFunction(i[p])&&!he.isWindow(i)&&(s=i[c],s&&(i[c]=null),he.event.triggered=p,i[p](),he.event.triggered=void 0,s&&(i[c]=s)),t.result}},simulate:function(e,t,n){var i=he.extend(new he.Event,n,{type:e,isSimulated:!0});he.event.trigger(i,null,t)}}),he.fn.extend({trigger:function(e,t){return this.each(function(){he.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return he.event.trigger(e,t,n,!0)}}),he.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){he.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),he.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),pe.focusin="onfocusin"in e,pe.focusin||he.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){he.event.simulate(t,e.target,he.event.fix(e))};he.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=Ie.access(i,t);r||i.addEventListener(e,n,!0),Ie.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Ie.access(i,t)-1;r?Ie.access(i,t,r):(i.removeEventListener(e,n,!0),Ie.remove(i,t))}}});var Ct=e.location,St=he.now(),Et=/\?/;he.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||he.error("Invalid XML: "+t),n};var Tt=/\[\]$/,Pt=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Mt=/^(?:input|select|textarea|keygen)/i;he.param=function(e,t){var n,i=[],r=function(e,t){var n=he.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!he.isPlainObject(e))he.each(e,function(){r(this.name,this.value)});else for(n in e)V(n,e[n],t,r);return i.join("&")},he.fn.extend({serialize:function(){return he.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=he.prop(this,"elements");return e?he.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!he(this).is(":disabled")&&Mt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!We.test(e))}).map(function(e,t){var n=he(this).val();return null==n?null:Array.isArray(n)?he.map(n,function(e){return{name:t.name,value:e.replace(Pt,"\r\n")}}):{name:t.name,value:n.replace(Pt,"\r\n")}}).get()}});var At=/%20/g,Ot=/#.*$/,Lt=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,jt=/^(?:GET|HEAD)$/,Ft=/^\/\//,Rt={},$t={},_t="*/".concat("*"),Ht=ne.createElement("a");Ht.href=Ct.href,he.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:It.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":_t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":he.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Z(Z(e,he.ajaxSettings),t):Z(he.ajaxSettings,e)},ajaxPrefilter:K(Rt),ajaxTransport:K($t),ajax:function(t,n){function i(t,n,i,s){var c,f,p,x,w,k=n;u||(u=!0,l&&e.clearTimeout(l),r=void 0,a=s||"",C.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(x=J(h,C,i)),x=ee(h,x,C,c),c?(h.ifModified&&(w=C.getResponseHeader("Last-Modified"),w&&(he.lastModified[o]=w),(w=C.getResponseHeader("etag"))&&(he.etag[o]=w)),204===t||"HEAD"===h.type?k="nocontent":304===t?k="notmodified":(k=x.state,f=x.data,p=x.error,c=!p)):(p=k,!t&&k||(k="error",t<0&&(t=0))),C.status=t,C.statusText=(n||k)+"",c?v.resolveWith(g,[f,k,C]):v.rejectWith(g,[C,k,p]),C.statusCode(b),b=void 0,d&&m.trigger(c?"ajaxSuccess":"ajaxError",[C,h,c?f:p]),y.fireWith(g,[C,k]),d&&(m.trigger("ajaxComplete",[C,h]),--he.active||he.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,o,a,s,l,c,u,d,f,p,h=he.ajaxSetup({},n),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?he(g):he.event,v=he.Deferred(),y=he.Callbacks("once memory"),b=h.statusCode||{},x={},w={},k="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=Nt.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?a:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)C.always(e[C.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||k;return r&&r.abort(t),i(0,t),this}};if(v.promise(C),h.url=((t||h.url||Ct.href)+"").replace(Ft,Ct.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(Me)||[""],null==h.crossDomain){c=ne.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Ht.protocol+"//"+Ht.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=he.param(h.data,h.traditional)),Q(Rt,h,n,C),u)return C;d=he.event&&h.global,d&&0==he.active++&&he.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!jt.test(h.type),o=h.url.replace(Ot,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(At,"+")):(p=h.url.slice(o.length),h.data&&(o+=(Et.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Lt,"$1"),p=(Et.test(o)?"&":"?")+"_="+St+++p),h.url=o+p),h.ifModified&&(he.lastModified[o]&&C.setRequestHeader("If-Modified-Since",he.lastModified[o]),he.etag[o]&&C.setRequestHeader("If-None-Match",he.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+_t+"; q=0.01":""):h.accepts["*"]);for(f in h.headers)C.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(g,C,h)||u))return C.abort();if(k="abort",y.add(h.complete),C.done(h.success),C.fail(h.error),r=Q($t,h,n,C)){if(C.readyState=1,d&&m.trigger("ajaxSend",[C,h]),u)return C;h.async&&h.timeout>0&&(l=e.setTimeout(function(){C.abort("timeout")},h.timeout));try{u=!1,r.send(x,i)}catch(e){if(u)throw e;i(-1,e)}}else i(-1,"No Transport");return C},getJSON:function(e,t,n){return he.get(e,t,n,"json")},getScript:function(e,t){return he.get(e,void 0,t,"script")}}),he.each(["get","post"],function(e,t){he[t]=function(e,n,i,r){return he.isFunction(n)&&(r=r||i,i=n,n=void 0),he.ajax(he.extend({url:e,type:t,dataType:r,data:n,success:i},he.isPlainObject(e)&&e))}}),he._evalUrl=function(e){return he.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},he.fn.extend({wrapAll:function(e){var t;return this[0]&&(he.isFunction(e)&&(e=e.call(this[0])),t=he(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return he.isFunction(e)?this.each(function(t){he(this).wrapInner(e.call(this,t))}):this.each(function(){var t=he(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=he.isFunction(e);return this.each(function(n){he(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){he(this).replaceWith(this.childNodes)}),this}}),he.expr.pseudos.hidden=function(e){return!he.expr.pseudos.visible(e)},he.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},he.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var qt={0:200,1223:204},Bt=he.ajaxSettings.xhr();pe.cors=!!Bt&&"withCredentials"in Bt,pe.ajax=Bt=!!Bt,he.ajaxTransport(function(t){var n,i;if(pe.cors||Bt&&!t.crossDomain)return{send:function(r,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(a in r)s.setRequestHeader(a,r[a]);n=function(e){return function(){n&&(n=i=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(qt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),i=s.onerror=n("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),he.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),he.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return he.globalEval(e),e}}}),he.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),he.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,r){t=he("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),ne.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Yt=[],Wt=/(=)\?(?=&|$)|\?\?/;he.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||he.expando+"_"+St++;return this[e]=!0,e}}),he.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,a,s=!1!==t.jsonp&&(Wt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=he.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Wt,"$1"+r):!1!==t.jsonp&&(t.url+=(Et.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return a||he.error(r+" was not called"),a[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){a=arguments},i.always(function(){void 0===o?he(e).removeProp(r):e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,Yt.push(r)),a&&he.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),pe.createHTMLDocument=function(){var e=ne.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),he.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,r,o;return t||(pe.createHTMLDocument?(t=ne.implementation.createHTMLDocument(""),i=t.createElement("base"),i.href=ne.location.href,t.head.appendChild(i)):t=ne),r=Ce.exec(e),o=!n&&[],r?[t.createElement(r[1])]:(r=x([e],t,o),o&&o.length&&he(o).remove(),he.merge([],r.childNodes))},he.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return s>-1&&(i=G(e.slice(s)),e=e.slice(0,s)),he.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&he.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(i?he("<div>").append(he.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},he.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){he.fn[t]=function(e){return this.on(t,e)}}),he.expr.pseudos.animated=function(e){return he.grep(he.timers,function(t){return e===t.elem}).length},he.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,c,u=he.css(e,"position"),d=he(e),f={};"static"===u&&(e.style.position="relative"),s=d.offset(),o=he.css(e,"top"),l=he.css(e,"left"),c=("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1,c?(i=d.position(),a=i.top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),he.isFunction(t)&&(t=t.call(e,n,he.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+r),"using"in t?t.using.call(e,f):d.css(f)}},he.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){he.offset.setOffset(this,e,t)});var t,n,i,r,o=this[0];if(o)return o.getClientRects().length?(i=o.getBoundingClientRect(),t=o.ownerDocument,n=t.documentElement,r=t.defaultView,{top:i.top+r.pageYOffset-n.clientTop,left:i.left+r.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===he.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),r(e[0],"html")||(i=e.offset()),i={top:i.top+he.css(e[0],"borderTopWidth",!0),left:i.left+he.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-he.css(n,"marginTop",!0),left:t.left-i.left-he.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===he.css(e,"position");)e=e.offsetParent;return e||Ve})}}),he.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;he.fn[e]=function(i){return Le(this,function(e,i,r){var o;if(he.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r},e,i,arguments.length)}}),he.each(["top","left"],function(e,t){he.cssHooks[t]=N(pe.pixelPosition,function(e,n){if(n)return n=L(e,t),ot.test(n)?he(e).position()[t]+"px":n})}),he.each({Height:"height",Width:"width"},function(e,t){he.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){he.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===o?"margin":"border");return Le(this,function(t,n,r){var o;return he.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?he.css(t,n,s):he.style(t,n,r,s)},t,a?r:void 0,a)}})}),he.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),he.holdReady=function(e){e?he.readyWait++:he.ready(!0)},he.isArray=Array.isArray,he.parseJSON=JSON.parse,he.nodeName=r,"function"==typeof define&&define.amd&&define("jquery",[],function(){return he});var zt=e.jQuery,Ut=e.$;return he.noConflict=function(t){return e.$===he&&(e.$=Ut),t&&e.jQuery===he&&(e.jQuery=zt),he},t||(e.jQuery=e.$=he),he}),function(e){var t={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};e.fn.bxSlider=function(n){if(0===this.length)return this;if(this.length>1)return this.each(function(){e(this).bxSlider(n)}),this;var r={},o=this,a=e(window).width(),s=e(window).height();if(!e(o).data("bxSlider")){var l=function(){e(o).data("bxSlider")||(r.settings=e.extend({},t,n),r.settings.slideWidth=parseInt(r.settings.slideWidth),r.children=o.children(r.settings.slideSelector),r.children.length<r.settings.minSlides&&(r.settings.minSlides=r.children.length),r.children.length<r.settings.maxSlides&&(r.settings.maxSlides=r.children.length),r.settings.randomStart&&(r.settings.startSlide=Math.floor(Math.random()*r.children.length)),r.active={index:r.settings.startSlide},r.carousel=r.settings.minSlides>1||r.settings.maxSlides>1,r.carousel&&(r.settings.preloadImages="all"),r.minThreshold=r.settings.minSlides*r.settings.slideWidth+(r.settings.minSlides-1)*r.settings.slideMargin,r.maxThreshold=r.settings.maxSlides*r.settings.slideWidth+(r.settings.maxSlides-1)*r.settings.slideMargin,r.working=!1,r.controls={},r.interval=null,r.animProp="vertical"===r.settings.mode?"top":"left",r.usingCSS=r.settings.useCSS&&"fade"!==r.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return r.cssPrefix=t[n].replace("Perspective","").toLowerCase(),r.animProp="-"+r.cssPrefix+"-transform",!0;return!1}(),"vertical"===r.settings.mode&&(r.settings.maxSlides=r.settings.minSlides),o.data("origStyle",o.attr("style")),o.children(r.settings.slideSelector).each(function(){e(this).data("origStyle",e(this).attr("style"))}),c())},c=function(){var t=r.children.eq(r.settings.startSlide);o.wrap('<div class="'+r.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),r.viewport=o.parent(),r.settings.ariaLive&&!r.settings.ticker&&r.viewport.attr("aria-live","polite"),r.loader=e('<div class="bx-loading" />'),r.viewport.prepend(r.loader),o.css({width:"horizontal"===r.settings.mode?1e3*r.children.length+215+"%":"auto",position:"relative"}),r.usingCSS&&r.settings.easing?o.css("-"+r.cssPrefix+"-transition-timing-function",r.settings.easing):r.settings.easing||(r.settings.easing="swing"),r.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),r.viewport.parent().css({maxWidth:p()}),r.children.css({float:"horizontal"===r.settings.mode?"left":"none",listStyle:"none",position:"relative"}),r.children.css("width",h()),"horizontal"===r.settings.mode&&r.settings.slideMargin>0&&r.children.css("marginRight",r.settings.slideMargin),"vertical"===r.settings.mode&&r.settings.slideMargin>0&&r.children.css("marginBottom",r.settings.slideMargin),"fade"===r.settings.mode&&(r.children.css({position:"absolute",zIndex:0,display:"none"}),r.children.eq(r.settings.startSlide).css({zIndex:r.settings.slideZIndex,display:"block"})),r.controls.el=e('<div class="bx-controls" />'),r.settings.captions&&S(),r.active.last=r.settings.startSlide===m()-1,r.settings.video&&o.fitVids(),("all"===r.settings.preloadImages||r.settings.ticker)&&(t=r.children),r.settings.ticker?r.settings.pager=!1:(r.settings.controls&&k(),r.settings.auto&&r.settings.autoControls&&C(),r.settings.pager&&w(),(r.settings.controls||r.settings.autoControls||r.settings.pager)&&r.viewport.after(r.controls.el)),u(t,d)},u=function(t,n){var i=t.find('img:not([src=""]), iframe').length,r=0;if(0===i)return void n();t.find('img:not([src=""]), iframe').each(function(){e(this).one("load error",function(){++r===i&&n()}).each(function(){(this.complete||""==this.src)&&e(this).trigger("load")})})},d=function(){if(r.settings.infiniteLoop&&"fade"!==r.settings.mode&&!r.settings.ticker){var t="vertical"===r.settings.mode?r.settings.minSlides:r.settings.maxSlides,n=r.children.slice(0,t).clone(!0).addClass("bx-clone"),i=r.children.slice(-t).clone(!0).addClass("bx-clone");r.settings.ariaHidden&&(n.attr("aria-hidden",!0),i.attr("aria-hidden",!0)),o.append(n).prepend(i)}r.loader.remove(),y(),"vertical"===r.settings.mode&&(r.settings.adaptiveHeight=!0),r.viewport.height(f()),o.redrawSlider(),r.settings.onSliderLoad.call(o,r.active.index),r.initialized=!0,r.settings.responsive&&e(window).bind("resize",U),r.settings.auto&&r.settings.autoStart&&(m()>1||r.settings.autoSlideForOnePage)&&F(),r.settings.ticker&&R(),r.settings.pager&&A(r.settings.startSlide),r.settings.controls&&N(),r.settings.touchEnabled&&!r.settings.ticker&&q(),r.settings.keyboardEnabled&&!r.settings.ticker&&e(document).keydown(H)},f=function(){var t=0,n=e();if("vertical"===r.settings.mode||r.settings.adaptiveHeight)if(r.carousel){var o=1===r.settings.moveSlides?r.active.index:r.active.index*v();for(n=r.children.eq(o),i=1;i<=r.settings.maxSlides-1;i++)n=o+i>=r.children.length?n.add(r.children.eq(i-1)):n.add(r.children.eq(o+i))}else n=r.children.eq(r.active.index);else n=r.children;return"vertical"===r.settings.mode?(n.each(function(n){t+=e(this).outerHeight()}),r.settings.slideMargin>0&&(t+=r.settings.slideMargin*(r.settings.minSlides-1))):t=Math.max.apply(Math,n.map(function(){return e(this).outerHeight(!1)}).get()),"border-box"===r.viewport.css("box-sizing")?t+=parseFloat(r.viewport.css("padding-top"))+parseFloat(r.viewport.css("padding-bottom"))+parseFloat(r.viewport.css("border-top-width"))+parseFloat(r.viewport.css("border-bottom-width")):"padding-box"===r.viewport.css("box-sizing")&&(t+=parseFloat(r.viewport.css("padding-top"))+parseFloat(r.viewport.css("padding-bottom"))),t},p=function(){var e="100%";return r.settings.slideWidth>0&&(e="horizontal"===r.settings.mode?r.settings.maxSlides*r.settings.slideWidth+(r.settings.maxSlides-1)*r.settings.slideMargin:r.settings.slideWidth),e},h=function(){var e=r.settings.slideWidth,t=r.viewport.width();if(0===r.settings.slideWidth||r.settings.slideWidth>t&&!r.carousel||"vertical"===r.settings.mode)e=t;else if(r.settings.maxSlides>1&&"horizontal"===r.settings.mode){if(t>r.maxThreshold)return e;t<r.minThreshold?e=(t-r.settings.slideMargin*(r.settings.minSlides-1))/r.settings.minSlides:r.settings.shrinkItems&&(e=Math.floor((t+r.settings.slideMargin)/Math.ceil((t+r.settings.slideMargin)/(e+r.settings.slideMargin))-r.settings.slideMargin))}return e},g=function(){var e=1,t=null;return"horizontal"===r.settings.mode&&r.settings.slideWidth>0?r.viewport.width()<r.minThreshold?e=r.settings.minSlides:r.viewport.width()>r.maxThreshold?e=r.settings.maxSlides:(t=r.children.first().width()+r.settings.slideMargin,e=Math.floor((r.viewport.width()+r.settings.slideMargin)/t)||1):"vertical"===r.settings.mode&&(e=r.settings.minSlides),e},m=function(){var e=0,t=0,n=0;if(r.settings.moveSlides>0){if(!r.settings.infiniteLoop){for(;t<r.children.length;)++e,t=n+g(),n+=r.settings.moveSlides<=g()?r.settings.moveSlides:g();return n}e=Math.ceil(r.children.length/v())}else e=Math.ceil(r.children.length/g());return e},v=function(){return r.settings.moveSlides>0&&r.settings.moveSlides<=g()?r.settings.moveSlides:g()},y=function(){var e,t,n;r.children.length>r.settings.maxSlides&&r.active.last&&!r.settings.infiniteLoop?"horizontal"===r.settings.mode?(t=r.children.last(),e=t.position(),b(-(e.left-(r.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===r.settings.mode&&(n=r.children.length-r.settings.minSlides,e=r.children.eq(n).position(),b(-e.top,"reset",0)):(e=r.children.eq(r.active.index*v()).position(),r.active.index===m()-1&&(r.active.last=!0),void 0!==e&&("horizontal"===r.settings.mode?b(-e.left,"reset",0):"vertical"===r.settings.mode&&b(-e.top,"reset",0)))},b=function(t,n,i,a){var s,l;r.usingCSS?(l="vertical"===r.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)",o.css("-"+r.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"===n?(o.css(r.animProp,l),0!==i?o.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){
e(t.target).is(o)&&(o.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),O())}):O()):"reset"===n?o.css(r.animProp,l):"ticker"===n&&(o.css("-"+r.cssPrefix+"-transition-timing-function","linear"),o.css(r.animProp,l),0!==i?o.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){e(t.target).is(o)&&(o.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),b(a.resetValue,"reset",0),$())}):(b(a.resetValue,"reset",0),$()))):(s={},s[r.animProp]=t,"slide"===n?o.animate(s,i,r.settings.easing,function(){O()}):"reset"===n?o.css(r.animProp,t):"ticker"===n&&o.animate(s,i,"linear",function(){b(a.resetValue,"reset",0),$()}))},x=function(){for(var t="",n="",i=m(),o=0;o<i;o++)n="",r.settings.buildPager&&e.isFunction(r.settings.buildPager)||r.settings.pagerCustom?(n=r.settings.buildPager(o),r.pagerEl.addClass("bx-custom-pager")):(n=o+1,r.pagerEl.addClass("bx-default-pager")),t+='<div class="bx-pager-item"><a href="" data-slide-index="'+o+'" class="bx-pager-link">'+n+"</a></div>";r.pagerEl.html(t)},w=function(){r.settings.pagerCustom?r.pagerEl=e(r.settings.pagerCustom):(r.pagerEl=e('<div class="bx-pager" />'),r.settings.pagerSelector?e(r.settings.pagerSelector).html(r.pagerEl):r.controls.el.addClass("bx-has-pager").append(r.pagerEl),x()),r.pagerEl.on("click touchend","a",M)},k=function(){r.controls.next=e('<a class="bx-next" href="">'+r.settings.nextText+"</a>"),r.controls.prev=e('<a class="bx-prev" href="">'+r.settings.prevText+"</a>"),r.controls.next.bind("click touchend",E),r.controls.prev.bind("click touchend",T),r.settings.nextSelector&&e(r.settings.nextSelector).append(r.controls.next),r.settings.prevSelector&&e(r.settings.prevSelector).append(r.controls.prev),r.settings.nextSelector||r.settings.prevSelector||(r.controls.directionEl=e('<div class="bx-controls-direction" />'),r.controls.directionEl.append(r.controls.prev).append(r.controls.next),r.controls.el.addClass("bx-has-controls-direction").append(r.controls.directionEl))},C=function(){r.controls.start=e('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+r.settings.startText+"</a></div>"),r.controls.stop=e('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+r.settings.stopText+"</a></div>"),r.controls.autoEl=e('<div class="bx-controls-auto" />'),r.controls.autoEl.on("click",".bx-start",P),r.controls.autoEl.on("click",".bx-stop",D),r.settings.autoControlsCombine?r.controls.autoEl.append(r.controls.start):r.controls.autoEl.append(r.controls.start).append(r.controls.stop),r.settings.autoControlsSelector?e(r.settings.autoControlsSelector).html(r.controls.autoEl):r.controls.el.addClass("bx-has-controls-auto").append(r.controls.autoEl),L(r.settings.autoStart?"stop":"start")},S=function(){r.children.each(function(t){var n=e(this).find("img:first").attr("title");void 0!==n&&(""+n).length&&e(this).append('<div class="bx-caption"><span>'+n+"</span></div>")})},E=function(e){e.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),o.goToNextSlide())},T=function(e){e.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),o.goToPrevSlide())},P=function(e){o.startAuto(),e.preventDefault()},D=function(e){o.stopAuto(),e.preventDefault()},M=function(t){var n,i;t.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),n=e(t.currentTarget),void 0!==n.attr("data-slide-index")&&(i=parseInt(n.attr("data-slide-index")))!==r.active.index&&o.goToSlide(i))},A=function(t){var n=r.children.length;if("short"===r.settings.pagerType)return r.settings.maxSlides>1&&(n=Math.ceil(r.children.length/r.settings.maxSlides)),void r.pagerEl.html(t+1+r.settings.pagerShortSeparator+n);r.pagerEl.find("a").removeClass("active"),r.pagerEl.each(function(n,i){e(i).find("a").eq(t).addClass("active")})},O=function(){if(r.settings.infiniteLoop){var e="";0===r.active.index?e=r.children.eq(0).position():r.active.index===m()-1&&r.carousel?e=r.children.eq((m()-1)*v()).position():r.active.index===r.children.length-1&&(e=r.children.eq(r.children.length-1).position()),e&&("horizontal"===r.settings.mode?b(-e.left,"reset",0):"vertical"===r.settings.mode&&b(-e.top,"reset",0))}r.working=!1,r.settings.onSlideAfter.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)},L=function(e){r.settings.autoControlsCombine?r.controls.autoEl.html(r.controls[e]):(r.controls.autoEl.find("a").removeClass("active"),r.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},N=function(){1===m()?(r.controls.prev.addClass("disabled"),r.controls.next.addClass("disabled")):!r.settings.infiniteLoop&&r.settings.hideControlOnEnd&&(0===r.active.index?(r.controls.prev.addClass("disabled"),r.controls.next.removeClass("disabled")):r.active.index===m()-1?(r.controls.next.addClass("disabled"),r.controls.prev.removeClass("disabled")):(r.controls.prev.removeClass("disabled"),r.controls.next.removeClass("disabled")))},I=function(){o.startAuto()},j=function(){o.stopAuto()},F=function(){if(r.settings.autoDelay>0){setTimeout(o.startAuto,r.settings.autoDelay)}else o.startAuto(),e(window).focus(I).blur(j);r.settings.autoHover&&o.hover(function(){r.interval&&(o.stopAuto(!0),r.autoPaused=!0)},function(){r.autoPaused&&(o.startAuto(!0),r.autoPaused=null)})},R=function(){var t,n,i,a,s,l,c,u,d=0;"next"===r.settings.autoDirection?o.append(r.children.clone().addClass("bx-clone")):(o.prepend(r.children.clone().addClass("bx-clone")),t=r.children.first().position(),d="horizontal"===r.settings.mode?-t.left:-t.top),b(d,"reset",0),r.settings.pager=!1,r.settings.controls=!1,r.settings.autoControls=!1,r.settings.tickerHover&&(r.usingCSS?(a="horizontal"===r.settings.mode?4:5,r.viewport.hover(function(){n=o.css("-"+r.cssPrefix+"-transform"),i=parseFloat(n.split(",")[a]),b(i,"reset",0)},function(){u=0,r.children.each(function(t){u+="horizontal"===r.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),s=r.settings.speed/u,l="horizontal"===r.settings.mode?"left":"top",c=s*(u-Math.abs(parseInt(i))),$(c)})):r.viewport.hover(function(){o.stop()},function(){u=0,r.children.each(function(t){u+="horizontal"===r.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),s=r.settings.speed/u,l="horizontal"===r.settings.mode?"left":"top",c=s*(u-Math.abs(parseInt(o.css(l)))),$(c)})),$()},$=function(e){var t,n,i,a=e||r.settings.speed,s={left:0,top:0},l={left:0,top:0};"next"===r.settings.autoDirection?s=o.find(".bx-clone").first().position():l=r.children.first().position(),t="horizontal"===r.settings.mode?-s.left:-s.top,n="horizontal"===r.settings.mode?-l.left:-l.top,i={resetValue:n},b(t,"ticker",a,i)},_=function(t){var n=e(window),i={top:n.scrollTop(),left:n.scrollLeft()},r=t.offset();return i.right=i.left+n.width(),i.bottom=i.top+n.height(),r.right=r.left+t.outerWidth(),r.bottom=r.top+t.outerHeight(),!(i.right<r.left||i.left>r.right||i.bottom<r.top||i.top>r.bottom)},H=function(e){var t=document.activeElement.tagName.toLowerCase();if(null==new RegExp(t,["i"]).exec("input|textarea")&&_(o)){if(39===e.keyCode)return E(e),!1;if(37===e.keyCode)return T(e),!1}},q=function(){r.touch={start:{x:0,y:0},end:{x:0,y:0}},r.viewport.bind("touchstart MSPointerDown pointerdown",B),r.viewport.on("click",".bxslider a",function(e){r.viewport.hasClass("click-disabled")&&(e.preventDefault(),r.viewport.removeClass("click-disabled"))})},B=function(e){if(r.controls.el.addClass("disabled"),r.working)e.preventDefault(),r.controls.el.removeClass("disabled");else{r.touch.originalPos=o.position();var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t];r.touch.start.x=n[0].pageX,r.touch.start.y=n[0].pageY,r.viewport.get(0).setPointerCapture&&(r.pointerId=t.pointerId,r.viewport.get(0).setPointerCapture(r.pointerId)),r.viewport.bind("touchmove MSPointerMove pointermove",W),r.viewport.bind("touchend MSPointerUp pointerup",z),r.viewport.bind("MSPointerCancel pointercancel",Y)}},Y=function(e){b(r.touch.originalPos.left,"reset",0),r.controls.el.removeClass("disabled"),r.viewport.unbind("MSPointerCancel pointercancel",Y),r.viewport.unbind("touchmove MSPointerMove pointermove",W),r.viewport.unbind("touchend MSPointerUp pointerup",z),r.viewport.get(0).releasePointerCapture&&r.viewport.get(0).releasePointerCapture(r.pointerId)},W=function(e){var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-r.touch.start.x),o=Math.abs(n[0].pageY-r.touch.start.y),a=0,s=0;3*i>o&&r.settings.preventDefaultSwipeX?e.preventDefault():3*o>i&&r.settings.preventDefaultSwipeY&&e.preventDefault(),"fade"!==r.settings.mode&&r.settings.oneToOneTouch&&("horizontal"===r.settings.mode?(s=n[0].pageX-r.touch.start.x,a=r.touch.originalPos.left+s):(s=n[0].pageY-r.touch.start.y,a=r.touch.originalPos.top+s),b(a,"reset",0))},z=function(e){r.viewport.unbind("touchmove MSPointerMove pointermove",W),r.controls.el.removeClass("disabled");var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=0,a=0;r.touch.end.x=n[0].pageX,r.touch.end.y=n[0].pageY,"fade"===r.settings.mode?(a=Math.abs(r.touch.start.x-r.touch.end.x))>=r.settings.swipeThreshold&&(r.touch.start.x>r.touch.end.x?o.goToNextSlide():o.goToPrevSlide(),o.stopAuto()):("horizontal"===r.settings.mode?(a=r.touch.end.x-r.touch.start.x,i=r.touch.originalPos.left):(a=r.touch.end.y-r.touch.start.y,i=r.touch.originalPos.top),!r.settings.infiniteLoop&&(0===r.active.index&&a>0||r.active.last&&a<0)?b(i,"reset",200):Math.abs(a)>=r.settings.swipeThreshold?(a<0?o.goToNextSlide():o.goToPrevSlide(),o.stopAuto()):b(i,"reset",200)),r.viewport.unbind("touchend MSPointerUp pointerup",z),r.viewport.get(0).releasePointerCapture&&r.viewport.get(0).releasePointerCapture(r.pointerId)},U=function(t){if(r.initialized)if(r.working)window.setTimeout(U,10);else{var n=e(window).width(),i=e(window).height();a===n&&s===i||(a=n,s=i,o.redrawSlider(),r.settings.onSliderResize.call(o,r.active.index))}},G=function(e){var t=g();r.settings.ariaHidden&&!r.settings.ticker&&(r.children.attr("aria-hidden","true"),r.children.slice(e,e+t).attr("aria-hidden","false"))},X=function(e){return e<0?r.settings.infiniteLoop?m()-1:r.active.index:e>=m()?r.settings.infiniteLoop?0:r.active.index:e};return o.goToSlide=function(t,n){var i,a,s,l,c=!0,u=0,d={left:0,top:0},p=null;if(r.oldIndex=r.active.index,r.active.index=X(t),!r.working&&r.active.index!==r.oldIndex){if(r.working=!0,void 0!==(c=r.settings.onSlideBefore.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index))&&!c)return r.active.index=r.oldIndex,void(r.working=!1);"next"===n?r.settings.onSlideNext.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)||(c=!1):"prev"===n&&(r.settings.onSlidePrev.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)||(c=!1)),r.active.last=r.active.index>=m()-1,(r.settings.pager||r.settings.pagerCustom)&&A(r.active.index),r.settings.controls&&N(),"fade"===r.settings.mode?(r.settings.adaptiveHeight&&r.viewport.height()!==f()&&r.viewport.animate({height:f()},r.settings.adaptiveHeightSpeed),r.children.filter(":visible").fadeOut(r.settings.speed).css({zIndex:0}),r.children.eq(r.active.index).css("zIndex",r.settings.slideZIndex+1).fadeIn(r.settings.speed,function(){e(this).css("zIndex",r.settings.slideZIndex),O()})):(r.settings.adaptiveHeight&&r.viewport.height()!==f()&&r.viewport.animate({height:f()},r.settings.adaptiveHeightSpeed),!r.settings.infiniteLoop&&r.carousel&&r.active.last?"horizontal"===r.settings.mode?(p=r.children.eq(r.children.length-1),d=p.position(),u=r.viewport.width()-p.outerWidth()):(i=r.children.length-r.settings.minSlides,d=r.children.eq(i).position()):r.carousel&&r.active.last&&"prev"===n?(a=1===r.settings.moveSlides?r.settings.maxSlides-v():(m()-1)*v()-(r.children.length-r.settings.maxSlides),p=o.children(".bx-clone").eq(a),d=p.position()):"next"===n&&0===r.active.index?(d=o.find("> .bx-clone").eq(r.settings.maxSlides).position(),r.active.last=!1):t>=0&&(l=t*parseInt(v()),d=r.children.eq(l).position()),void 0!==d&&(s="horizontal"===r.settings.mode?-(d.left-u):-d.top,b(s,"slide",r.settings.speed)),r.working=!1),r.settings.ariaHidden&&G(r.active.index*v())}},o.goToNextSlide=function(){if((r.settings.infiniteLoop||!r.active.last)&&1!=r.working){var e=parseInt(r.active.index)+1;o.goToSlide(e,"next")}},o.goToPrevSlide=function(){if((r.settings.infiniteLoop||0!==r.active.index)&&1!=r.working){var e=parseInt(r.active.index)-1;o.goToSlide(e,"prev")}},o.startAuto=function(e){r.interval||(r.interval=setInterval(function(){"next"===r.settings.autoDirection?o.goToNextSlide():o.goToPrevSlide()},r.settings.pause),r.settings.onAutoChange.call(o,!0),r.settings.autoControls&&!0!==e&&L("stop"))},o.stopAuto=function(e){r.interval&&(clearInterval(r.interval),r.interval=null,r.settings.onAutoChange.call(o,!1),r.settings.autoControls&&!0!==e&&L("start"))},o.getCurrentSlide=function(){return r.active.index},o.getCurrentSlideElement=function(){return r.children.eq(r.active.index)},o.getSlideElement=function(e){return r.children.eq(e)},o.getSlideCount=function(){return r.children.length},o.isWorking=function(){return r.working},o.redrawSlider=function(){r.children.add(o.find(".bx-clone")).outerWidth(h()),r.viewport.css("height",f()),r.settings.ticker||y(),r.active.last&&(r.active.index=m()-1),r.active.index>=m()&&(r.active.last=!0),r.settings.pager&&!r.settings.pagerCustom&&(x(),A(r.active.index)),r.settings.ariaHidden&&G(r.active.index*v())},o.destroySlider=function(){r.initialized&&(r.initialized=!1,e(".bx-clone",this).remove(),r.children.each(function(){void 0!==e(this).data("origStyle")?e(this).attr("style",e(this).data("origStyle")):e(this).removeAttr("style")}),void 0!==e(this).data("origStyle")?this.attr("style",e(this).data("origStyle")):e(this).removeAttr("style"),e(this).unwrap().unwrap(),r.controls.el&&r.controls.el.remove(),r.controls.next&&r.controls.next.remove(),r.controls.prev&&r.controls.prev.remove(),r.pagerEl&&r.settings.controls&&!r.settings.pagerCustom&&r.pagerEl.remove(),e(".bx-caption",this).remove(),r.controls.autoEl&&r.controls.autoEl.remove(),clearInterval(r.interval),r.settings.responsive&&e(window).unbind("resize",U),r.settings.keyboardEnabled&&e(document).unbind("keydown",H),e(this).removeData("bxSlider"),e(window).off("blur",j).off("focus",I))},o.reloadSlider=function(t){void 0!==t&&(n=t),o.destroySlider(),l(),e(o).data("bxSlider",this)},l(),e(o).data("bxSlider",this),this}}}(jQuery),function(e,t,n,i){"use strict";function r(e){var t=e.currentTarget,i=e.data?e.data.options:{},r=i.selector?n(i.selector):e.data?e.data.items:[],o=n(t).attr("data-fancybox")||"",a=0,s=n.fancybox.getInstance();e.preventDefault(),e.stopPropagation(),s&&s.current.opts.$orig.is(t)||(o?(r=r.length?r.filter('[data-fancybox="'+o+'"]'):n('[data-fancybox="'+o+'"]'),(a=r.index(t))<0&&(a=0)):r=[t],n.fancybox.open(r,i,a))}if(n){if(n.fn.fancybox)return void n.error("fancyBox already initialized");var o={loop:!1,margin:[44,0],gutter:50,keyboard:!0,arrows:!0,infobar:!1,toolbar:!0,buttons:["slideShow","fullScreen","thumbs","close"],idleTime:4,smallBtn:"auto",protect:!1,modal:!1,image:{preload:"auto"},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><button data-fancybox-prev title="{{PREV}}" class="fancybox-button fancybox-button--left"></button><div class="fancybox-infobar__body"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><button data-fancybox-next title="{{NEXT}}" class="fancybox-button fancybox-button--right"></button></div><div class="fancybox-toolbar">{{BUTTONS}}</div><div class="fancybox-navigation"><button data-fancybox-prev title="{{PREV}}" class="fancybox-arrow fancybox-arrow--left" /><button data-fancybox-next title="{{NEXT}}" class="fancybox-arrow fancybox-arrow--right" /></div><div class="fancybox-stage"></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}<p></div>',btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"></button>',fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}"></button>',thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"></button>',smallBtn:'<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"></button>'},parentEl:"body",autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:4e3},thumbs:{autoStart:!1,hideOnClose:!0},onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"Zurück",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder"}}},a=n(e),s=n(t),l=0,c=function(e){return e&&e.hasOwnProperty&&e instanceof n},u=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),d=function(){var e,n=t.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in i)if(void 0!==n.style[e])return i[e]}(),f=function(e){return e&&e.length&&e[0].offsetHeight},p=function(e,i,r){var a=this;a.opts=n.extend(!0,{index:r},o,i||{}),i&&n.isArray(i.buttons)&&(a.opts.buttons=i.buttons),a.id=a.opts.id||++l,a.group=[],a.currIndex=parseInt(a.opts.index,10)||0,a.prevIndex=null,a.prevPos=null,a.currPos=0,a.firstRun=null,a.createGroup(e),a.group.length&&(a.$lastFocus=n(t.activeElement).blur(),a.slides={},a.init(e))};n.extend(p.prototype,{init:function(){var e,t,i,r=this,o=r.group[r.currIndex].opts;r.scrollTop=s.scrollTop(),r.scrollLeft=s.scrollLeft(),n.fancybox.getInstance()||n.fancybox.isMobile||"hidden"===n("body").css("overflow")||(e=n("body").width(),n("html").addClass("fancybox-enabled"),(e=n("body").width()-e)>1&&n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar, .fancybox-enabled body { margin-right: '+e+"px; }</style>")),i="",n.each(o.buttons,function(e,t){i+=o.btnTpl[t]||""}),t=n(r.translate(r,o.baseTpl.replace("{{BUTTONS}}",i))).addClass("fancybox-is-hidden").attr("id","fancybox-container-"+r.id).addClass(o.baseClass).data("FancyBox",r).prependTo(o.parentEl),r.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption"].forEach(function(e){r.$refs[e]=t.find(".fancybox-"+e)}),(!o.arrows||r.group.length<2)&&t.find(".fancybox-navigation").remove(),o.infobar||r.$refs.infobar.remove(),o.toolbar||r.$refs.toolbar.remove(),r.trigger("onInit"),r.activate(),r.jumpTo(r.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang];return t.replace(/\{\{(\w+)\}\}/g,function(e,t){var i=n[t];return void 0===i?e:i})},createGroup:function(e){var t=this,i=n.makeArray(e);n.each(i,function(e,i){var r,o,a,s,l={},c={},u=[];n.isPlainObject(i)?(l=i,c=i.opts||i):"object"===n.type(i)&&n(i).length?(r=n(i),u=r.data(),c="options"in u?u.options:{},c="object"===n.type(c)?c:{},l.src="src"in u?u.src:c.src||r.attr("href"),["width","height","thumb","type","filter"].forEach(function(e){e in u&&(c[e]=u[e])}),"srcset"in u&&(c.image={srcset:u.srcset}),c.$orig=r,l.type||l.src||(l.type="inline",l.src=i)):l={type:"html",src:i+""},l.opts=n.extend(!0,{},t.opts,c),n.fancybox.isMobile&&(l.opts=n.extend(!0,{},l.opts,l.opts.mobile)),o=l.type||l.opts.type,a=l.src||"",!o&&a&&(a.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?o="image":a.match(/\.(pdf)((\?|#).*)?$/i)?o="pdf":"#"===a.charAt(0)&&(o="inline")),l.type=o,l.index=t.group.length,l.opts.$orig&&!l.opts.$orig.length&&delete l.opts.$orig,!l.opts.$thumb&&l.opts.$orig&&(l.opts.$thumb=l.opts.$orig.find("img:first")),l.opts.$thumb&&!l.opts.$thumb.length&&delete l.opts.$thumb,"function"===n.type(l.opts.caption)?l.opts.caption=l.opts.caption.apply(i,[t,l]):"caption"in u&&(l.opts.caption=u.caption),l.opts.caption=void 0===l.opts.caption?"":l.opts.caption+"","ajax"===o&&(s=a.split(/\s+/,2),s.length>1&&(l.src=s.shift(),l.opts.filter=s.shift())),"auto"==l.opts.smallBtn&&(n.inArray(o,["html","inline","ajax"])>-1?(l.opts.toolbar=!1,l.opts.smallBtn=!0):l.opts.smallBtn=!1),"pdf"===o&&(l.type="iframe",l.opts.iframe.preload=!1),l.opts.modal&&(l.opts=n.extend(!0,l.opts,{infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),t.group.push(l)})},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("click.fb-prev touchend.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("click.fb-next touchend.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}),a.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?u(function(){i.update()}):(i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update()},500))}),s.on("focusin.fb",function(e){var r=n.fancybox?n.fancybox.getInstance():null;r.isClosing||!r.current||!r.current.opts.trapFocus||n(e.target).hasClass("fancybox-container")||n(e.target).is(t)||r&&"fixed"!==n(e.target).css("position")&&!r.$refs.container.has(e.target).length&&(e.stopPropagation(),r.focus(),a.scrollTop(i.scrollTop).scrollLeft(i.scrollLeft))}),s.on("keydown.fb",function(e){var t=i.current,r=e.keyCode||e.which;if(t&&t.opts.keyboard&&!n(e.target).is("input")&&!n(e.target).is("textarea"))return 8===r||27===r?(e.preventDefault(),void i.close(e)):37===r||38===r?(e.preventDefault(),void i.previous()):39===r||40===r?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,r)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,s.on("mousemove.fb-idle mouseenter.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=e.setInterval(function(){++i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){var t=this;a.off("orientationchange.fb resize.fb"),s.off("focusin.fb keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),t.idleInterval&&(e.clearInterval(t.idleInterval),t.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,t,i){var r,o,a,s,l,c,u,d=this,p=d.group.length;if(!(d.isSliding||d.isClosing||d.isAnimating&&d.firstRun)){if(e=parseInt(e,10),!(o=d.current?d.current.opts.loop:d.opts.loop)&&(e<0||e>=p))return!1;if(r=d.firstRun=null===d.firstRun,!(p<2&&!r&&d.isSliding)){if(s=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,a=d.createSlide(e),p>1&&((o||a.index>0)&&d.createSlide(e-1),(o||a.index<p-1)&&d.createSlide(e+1)),d.current=a,d.currIndex=a.index,d.currPos=a.pos,d.trigger("beforeShow",r),d.updateControls(),c=n.fancybox.getTranslate(a.$slide),a.isMoved=(0!==c.left||0!==c.top)&&!a.$slide.hasClass("fancybox-animated"),a.forcedDuration=void 0,n.isNumeric(t)?a.forcedDuration=t:t=a.opts[r?"animationDuration":"transitionDuration"],t=parseInt(t,10),r)return a.opts.animationEffect&&t&&d.$refs.container.css("transition-duration",t+"ms"),d.$refs.container.removeClass("fancybox-is-hidden"),f(d.$refs.container),d.$refs.container.addClass("fancybox-is-open"),a.$slide.addClass("fancybox-slide--current"),d.loadSlide(a),void d.preload();n.each(d.slides,function(e,t){n.fancybox.stop(t.$slide)}),a.$slide.removeClass("fancybox-slide--next fancybox-slide--previous").addClass("fancybox-slide--current"),a.isMoved?(l=Math.round(a.$slide.width()),n.each(d.slides,function(e,i){var r=i.pos-a.pos;n.fancybox.animate(i.$slide,{top:0,left:r*l+r*i.opts.gutter},t,function(){i.$slide.removeAttr("style").removeClass("fancybox-slide--next fancybox-slide--previous"),i.pos===d.currPos&&(a.isMoved=!1,d.complete())})})):d.$refs.stage.children().removeAttr("style"),a.isLoaded?d.revealContent(a):d.loadSlide(a),d.preload(),s.pos!==a.pos&&(u="fancybox-slide--"+(s.pos>a.pos?"next":"previous"),s.$slide.removeClass("fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous"),s.isComplete=!1,t&&(a.isMoved||a.opts.transitionEffect)&&(a.isMoved?s.$slide.addClass(u):(u="fancybox-animated "+u+" fancybox-fx-"+a.opts.transitionEffect,n.fancybox.animate(s.$slide,u,t,function(){s.$slide.removeClass(u).removeAttr("style")}))))}}},createSlide:function(e){var t,i,r=this;return i=e%r.group.length,i=i<0?r.group.length+i:i,!r.slides[e]&&r.group[i]&&(t=n('<div class="fancybox-slide"></div>').appendTo(r.$refs.stage),r.slides[e]=n.extend(!0,{},r.group[i],{pos:e,$slide:t,isLoaded:!1}),r.updateSlide(r.slides[e])),r.slides[e]},scaleToActual:function(e,t,i){var r,o,a,s,l,c=this,u=c.current,d=u.$content,f=parseInt(u.$slide.width(),10),p=parseInt(u.$slide.height(),10),h=u.width,g=u.height;"image"!=u.type||u.hasError||!d||c.isAnimating||(n.fancybox.stop(d),c.isAnimating=!0,e=void 0===e?.5*f:e,t=void 0===t?.5*p:t,r=n.fancybox.getTranslate(d),s=h/r.width,l=g/r.height,o=.5*f-.5*h,a=.5*p-.5*g,h>f&&(o=r.left*s-(e*s-e),o>0&&(o=0),o<f-h&&(o=f-h)),g>p&&(a=r.top*l-(t*l-t),a>0&&(a=0),a<p-g&&(a=p-g)),c.updateCursor(h,g),n.fancybox.animate(d,{top:a,left:o,scaleX:s,scaleY:l},i||330,function(){c.isAnimating=!1}),c.SlideShow&&c.SlideShow.isActive&&c.SlideShow.stop())},scaleToFit:function(e){var t,i=this,r=i.current,o=r.$content;"image"!=r.type||r.hasError||!o||i.isAnimating||(n.fancybox.stop(o),i.isAnimating=!0,t=i.getFitPos(r),i.updateCursor(t.width,t.height),n.fancybox.animate(o,{top:t.top,left:t.left,scaleX:t.width/o.width(),scaleY:t.height/o.height()},e||330,function(){i.isAnimating=!1}))},getFitPos:function(e){var t,i,r,o,s,l=this,c=e.$content,u=e.width,d=e.height,f=e.opts.margin;return!(!c||!c.length||!u&&!d)&&("number"===n.type(f)&&(f=[f,f]),2==f.length&&(f=[f[0],f[1],f[0],f[1]]),a.width()<800&&(f=[0,0,0,0]),t=parseInt(l.$refs.stage.width(),10)-(f[1]+f[3]),i=parseInt(l.$refs.stage.height(),10)-(f[0]+f[2]),r=Math.min(1,t/u,i/d),o=Math.floor(r*u),s=Math.floor(r*d),{top:Math.floor(.5*(i-s))+f[0],left:Math.floor(.5*(t-o))+f[3],width:o,height:s})},update:function(){var e=this;n.each(e.slides,function(t,n){e.updateSlide(n)})},updateSlide:function(e){var t=this,i=e.$content;i&&(e.width||e.height)&&(n.fancybox.stop(i),n.fancybox.setTranslate(i,t.getFitPos(e)),e.pos===t.currPos&&t.updateCursor()),e.$slide.trigger("refresh"),t.trigger("onUpdate",e)},updateCursor:function(e,t){var n,i=this,r=i.$refs.container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut");i.current&&!i.isClosing&&(i.isZoomable()?(r.addClass("fancybox-is-zoomable"),n=void 0!==e&&void 0!==t?e<i.current.width&&t<i.current.height:i.isScaledDown(),n?r.addClass("fancybox-can-zoomIn"):i.current.opts.touch?r.addClass("fancybox-can-drag"):r.addClass("fancybox-can-zoomOut")):i.current.opts.touch&&r.addClass("fancybox-can-drag"))},isZoomable:function(){var e,t=this,i=t.current;if(i&&!t.isClosing)return!!("image"===i.type&&i.isLoaded&&!i.hasError&&("zoom"===i.opts.clickContent||n.isFunction(i.opts.clickContent)&&"zoom"===i.opts.clickContent(i))&&(e=t.getFitPos(i),i.width>e.width||i.height>e.height))},isScaledDown:function(){var e=this,t=e.current,i=t.$content,r=!1;return i&&(r=n.fancybox.getTranslate(i),r=r.width<t.width||r.height<t.height),r},canPan:function(){var e=this,t=e.current,n=t.$content,i=!1;return n&&(i=e.getFitPos(t),i=Math.abs(n.width()-i.width)>1||Math.abs(n.height()-i.height)>1),i},loadSlide:function(e){var t,i,r,o=this;if(!e.isLoading&&!e.isLoaded){switch(e.isLoading=!0,o.trigger("beforeLoad",e),t=e.type,i=e.$slide,i.off("refresh").trigger("onReset").addClass("fancybox-slide--"+(t||"unknown")).addClass(e.opts.slideClass),t){case"image":o.setImage(e);break;case"iframe":o.setIframe(e);break;case"html":o.setContent(e,e.src||e.content);break;case"inline":n(e.src).length?o.setContent(e,n(e.src)):o.setError(e);break;case"ajax":o.showLoading(e),r=n.ajax(n.extend({},e.opts.ajax.settings,{url:e.src,success:function(t,n){"success"===n&&o.setContent(e,t)},error:function(t,n){t&&"abort"!==n&&o.setError(e)}})),i.one("onReset",function(){r.abort()});break;default:o.setError(e)}return!0}},setImage:function(t){var i,r,o,a,s=this,l=t.opts.image.srcset;if(l){o=e.devicePixelRatio||1,a=e.innerWidth*o,r=l.split(",").map(function(e){var t={};return e.trim().split(/\s+/).forEach(function(e,n){var i=parseInt(e.substring(0,e.length-1),10);if(0===n)return t.url=e;i&&(t.value=i,t.postfix=e[e.length-1])}),t}),r.sort(function(e,t){return e.value-t.value});for(var c=0;c<r.length;c++){var u=r[c];if("w"===u.postfix&&u.value>=a||"x"===u.postfix&&u.value>=o){i=u;break}}!i&&r.length&&(i=r[r.length-1]),i&&(t.src=i.url,t.width&&t.height&&"w"==i.postfix&&(t.height=t.width/t.height*i.value,t.width=i.value))}t.$content=n('<div class="fancybox-image-wrap"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&(t.opts.thumb||t.opts.$thumb)?(t.width=t.opts.width,t.height=t.opts.height,t.$ghost=n("<img />").one("error",function(){n(this).remove(),t.$ghost=null,s.setBigImage(t)}).one("load",function(){s.afterLoad(t),s.setBigImage(t)}).addClass("fancybox-image").appendTo(t.$content).attr("src",t.opts.thumb||t.opts.$thumb.attr("src"))):s.setBigImage(t)},setBigImage:function(e){var t=this,i=n("<img />");e.$image=i.one("error",function(){t.setError(e)}).one("load",function(){clearTimeout(e.timouts),e.timouts=null,t.isClosing||(e.width=this.naturalWidth,e.height=this.naturalHeight,e.opts.image.srcset&&i.attr("sizes","100vw").attr("srcset",e.opts.image.srcset),t.hideLoading(e),e.$ghost?e.timouts=setTimeout(function(){e.timouts=null,e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))):t.afterLoad(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),
i[0].complete?i.trigger("load"):i[0].error?i.trigger("error"):e.timouts=setTimeout(function(){i[0].complete||e.hasError||t.showLoading(e)},100)},setIframe:function(e){var t,i=this,r=e.opts.iframe,o=e.$slide;e.$content=n('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(o),t=n(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(e.$content),r.preload?(i.showLoading(e),t.on("load.fb error.fb",function(t){this.isReady=1,e.$slide.trigger("refresh"),i.afterLoad(e)}),o.on("refresh.fb",function(){var n,i,o,a,s,l=e.$content;if(1===t[0].isReady){try{n=t.contents(),i=n.find("body")}catch(e){}i&&i.length&&(void 0===r.css.width||void 0===r.css.height)&&(o=t[0].contentWindow.document.documentElement.scrollWidth,a=Math.ceil(i.outerWidth(!0)+(l.width()-o)),s=Math.ceil(i.outerHeight(!0)),l.css({width:void 0===r.css.width?a+(l.outerWidth()-l.innerWidth()):r.css.width,height:void 0===r.css.height?s+(l.outerHeight()-l.innerHeight()):r.css.height})),l.removeClass("fancybox-is-hidden")}})):this.afterLoad(e),t.attr("src",e.src),!0===e.opts.smallBtn&&e.$content.prepend(i.translate(e,e.opts.btnTpl.smallBtn)),o.one("onReset",function(){try{n(this).find("iframe").hide().attr("src","//about:blank")}catch(e){}n(this).empty(),e.isLoaded=!1})},setContent:function(e,t){var i=this;i.isClosing||(i.hideLoading(e),e.$slide.empty(),c(t)&&t.parent().length?(t.parent(".fancybox-slide--inline").trigger("onReset"),e.$placeholder=n("<div></div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===n.type(t)&&(t=n("<div>").append(n.trim(t)).contents(),3===t[0].nodeType&&(t=n("<div>").html(t))),e.opts.filter&&(t=n("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){e.$placeholder&&(e.$placeholder.after(t.hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(n(this).empty(),e.isLoaded=!1)}),e.$content=n(t).appendTo(e.$slide),e.opts.smallBtn&&!e.$smallBtn&&(e.$smallBtn=n(i.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content.filter("div").first())),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.removeClass("fancybox-slide--"+e.type),this.setContent(e,this.translate(e,e.opts.errorTpl))},showLoading:function(e){var t=this;(e=e||t.current)&&!e.$spinner&&(e.$spinner=n(t.opts.spinnerTpl).appendTo(e.$slide))},hideLoading:function(e){var t=this;(e=e||t.current)&&e.$spinner&&(e.$spinner.remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&n('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.revealContent(e))},revealContent:function(e){var t,i,r,o,a,s=this,l=e.$slide,c=!1;return t=e.opts[s.firstRun?"animationEffect":"transitionEffect"],r=e.opts[s.firstRun?"animationDuration":"transitionDuration"],r=parseInt(void 0===e.forcedDuration?r:e.forcedDuration,10),!e.isMoved&&e.pos===s.currPos&&r||(t=!1),"zoom"!==t||e.pos===s.currPos&&r&&"image"===e.type&&!e.hasError&&(c=s.getThumbPos(e))||(t="fade"),"zoom"===t?(a=s.getFitPos(e),a.scaleX=a.width/c.width,a.scaleY=a.height/c.height,delete a.width,delete a.height,o=e.opts.zoomOpacity,"auto"==o&&(o=Math.abs(e.width/e.height-c.width/c.height)>.1),o&&(c.opacity=.1,a.opacity=1),n.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),c),f(e.$content),void n.fancybox.animate(e.$content,a,r,function(){s.complete()})):(s.updateSlide(e),t?(n.fancybox.stop(l),i="fancybox-animated fancybox-slide--"+(e.pos>s.prevPos?"next":"previous")+" fancybox-fx-"+t,l.removeAttr("style").removeClass("fancybox-slide--current fancybox-slide--next fancybox-slide--previous").addClass(i),e.$content.removeClass("fancybox-is-hidden"),f(l),void n.fancybox.animate(l,"fancybox-slide--current",r,function(t){l.removeClass(i).removeAttr("style"),e.pos===s.currPos&&s.complete()},!0)):(f(l),e.$content.removeClass("fancybox-is-hidden"),void(e.pos===s.currPos&&s.complete())))},getThumbPos:function(i){var r,o=this,a=!1,s=i.opts.$thumb,l=s?s.offset():0;return l&&s[0].ownerDocument===t&&function(t){for(var i=t[0],r=i.getBoundingClientRect(),o=[];null!==i.parentElement;)"hidden"!==n(i.parentElement).css("overflow")&&"auto"!==n(i.parentElement).css("overflow")||o.push(i.parentElement.getBoundingClientRect()),i=i.parentElement;return o.every(function(e){var t=Math.min(r.right,e.right)-Math.max(r.left,e.left),n=Math.min(r.bottom,e.bottom)-Math.max(r.top,e.top);return t>0&&n>0})&&r.bottom>0&&r.right>0&&r.left<n(e).width()&&r.top<n(e).height()}(s)&&(r=o.$refs.stage.offset(),a={top:l.top-r.top+parseFloat(s.css("border-top-width")||0),left:l.left-r.left+parseFloat(s.css("border-left-width")||0),width:s.width(),height:s.height(),scaleX:1,scaleY:1}),a},complete:function(){var e=this,i=e.current,r={};i.isMoved||!i.isLoaded||i.isComplete||(i.isComplete=!0,i.$slide.siblings().trigger("onReset"),f(i.$slide),i.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,i){i.pos>=e.currPos-1&&i.pos<=e.currPos+1?r[i.pos]=i:i&&(n.fancybox.stop(i.$slide),i.$slide.unbind().remove())}),e.slides=r,e.updateCursor(),e.trigger("afterShow"),(n(t.activeElement).is("[disabled]")||i.opts.autoFocus&&"image"!=i.type&&"iframe"!==i.type)&&e.focus())},preload:function(){var e,t,n=this;n.group.length<2||(e=n.slides[n.currPos+1],t=n.slides[n.currPos-1],e&&"image"===e.type&&n.loadSlide(e),t&&"image"===t.type&&n.loadSlide(t))},focus:function(){var e,t=this.current;this.isClosing||(e=t&&t.isComplete?t.$slide.find("button,:input,[tabindex],a").filter(":not([disabled]):visible:first"):null,e=e&&e.length?e:this.$refs.container,e.focus())},activate:function(){var e=this;n(".fancybox-container").each(function(){var t=n(this).data("FancyBox");t&&t.uid!==e.uid&&!t.isClosing&&t.trigger("onDeactivate")}),e.current&&(e.$refs.container.index()>0&&e.$refs.container.prependTo(t.body),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(e,t){var i,r,o,a,s,l,c=this,f=c.current,p=function(){c.cleanUp(e)};return!c.isClosing&&(c.isClosing=!0,!1===c.trigger("beforeClose",e)?(c.isClosing=!1,u(function(){c.update()}),!1):(c.removeEvents(),f.timouts&&clearTimeout(f.timouts),o=f.$content,i=f.opts.animationEffect,r=n.isNumeric(t)?t:i?f.opts.animationDuration:0,f.$slide.off(d).removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),f.$slide.siblings().trigger("onReset").remove(),r&&c.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing"),c.hideLoading(f),c.hideControls(),c.updateCursor(),"zoom"!==i||!0!==e&&o&&r&&"image"===f.type&&!f.hasError&&(l=c.getThumbPos(f))||(i="fade"),"zoom"===i?(n.fancybox.stop(o),s=n.fancybox.getTranslate(o),s.width=s.width*s.scaleX,s.height=s.height*s.scaleY,a=f.opts.zoomOpacity,"auto"==a&&(a=Math.abs(f.width/f.height-l.width/l.height)>.1),a&&(l.opacity=0),s.scaleX=s.width/l.width,s.scaleY=s.height/l.height,s.width=l.width,s.height=l.height,n.fancybox.setTranslate(f.$content,s),n.fancybox.animate(f.$content,l,r,p),!0):(i&&r?!0===e?setTimeout(p,r):n.fancybox.animate(f.$slide.removeClass("fancybox-slide--current"),"fancybox-animated fancybox-slide--previous fancybox-fx-"+i,r,p):p(),!0)))},cleanUp:function(e){var t,i=this;i.current.$slide.trigger("onReset"),i.$refs.container.empty().remove(),i.trigger("afterClose",e),i.$lastFocus&&i.current.opts.backFocus&&i.$lastFocus.focus(),i.current=null,t=n.fancybox.getInstance(),t?t.activate():(a.scrollTop(i.scrollTop).scrollLeft(i.scrollLeft),n("html").removeClass("fancybox-enabled"),n("#fancybox-style-noscroll").remove())},trigger:function(e,t){var i,r=Array.prototype.slice.call(arguments,1),o=this,a=t&&t.opts?t:o.current;if(a?r.unshift(a):a=o,r.unshift(o),n.isFunction(a.opts[e])&&(i=a.opts[e].apply(a,r)),!1===i)return i;"afterClose"===e?s.trigger(e+".fb",r):o.$refs.container.trigger(e+".fb",r)},updateControls:function(e){var t=this,i=t.current,r=i.index,o=i.opts,a=o.caption,s=t.$refs.caption;i.$slide.trigger("refresh"),t.$caption=a&&a.length?s.html(a):null,t.isHiddenControls||t.showControls(),n("[data-fancybox-count]").html(t.group.length),n("[data-fancybox-index]").html(r+1),n("[data-fancybox-prev]").prop("disabled",!o.loop&&r<=0),n("[data-fancybox-next]").prop("disabled",!o.loop&&r>=t.group.length-1)},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav")},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,n=e.$refs.container;e.isHiddenControls=!1,e.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&e.group.length>1)).toggleClass("fancybox-show-nav",!!(t.arrows&&e.group.length>1)).toggleClass("fancybox-is-modal",!!t.modal),e.$caption?n.addClass("fancybox-show-caption "):n.removeClass("fancybox-show-caption")},toggleControls:function(){this.isHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.1.25",defaults:o,getInstance:function(e){var t=n('.fancybox-container:not(".fancybox-is-closing"):first').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return t instanceof p&&("string"===n.type(e)?t[e].apply(t,i):"function"===n.type(e)&&e.apply(t,i),t)},open:function(e,t,n){return new p(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close())},destroy:function(){this.close(!0),s.off("click.fb-start")},isMobile:void 0!==t.createTouch&&/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),use3d:function(){var n=t.createElement("div");return e.getComputedStyle&&e.getComputedStyle(n).getPropertyValue("transform")&&!(t.documentMode&&t.documentMode<11)}(),getTranslate:function(e){var t;if(!e||!e.length)return!1;if(t=e.eq(0).css("transform"),t&&-1!==t.indexOf("matrix")?(t=t.split("(")[1],t=t.split(")")[0],t=t.split(",")):t=[],t.length)t=t.length>10?[t[13],t[12],t[0],t[5]]:[t[5],t[4],t[0],t[3]],t=t.map(parseFloat);else{t=[0,0,1,1];var n=/\.*translate\((.*)px,(.*)px\)/i,i=n.exec(e.eq(0).attr("style"));i&&(t[0]=parseFloat(i[2]),t[1]=parseFloat(i[1]))}return{top:t[0],left:t[1],scaleX:t[2],scaleY:t[3],opacity:parseFloat(e.css("opacity")),width:e.width(),height:e.height()}},setTranslate:function(e,t){var n="",i={};if(e&&t)return void 0===t.left&&void 0===t.top||(n=(void 0===t.left?e.position().left:t.left)+"px, "+(void 0===t.top?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),void 0!==t.scaleX&&void 0!==t.scaleY&&(n=(n.length?n+" ":"")+"scale("+t.scaleX+", "+t.scaleY+")"),n.length&&(i.transform=n),void 0!==t.opacity&&(i.opacity=t.opacity),void 0!==t.width&&(i.width=t.width),void 0!==t.height&&(i.height=t.height),e.css(i)},animate:function(e,t,i,r,o){var a=d||"transitionend";n.isFunction(i)&&(r=i,i=null),n.isPlainObject(t)||e.removeAttr("style"),e.on(a,function(i){(!i||!i.originalEvent||e.is(i.originalEvent.target)&&"z-index"!=i.originalEvent.propertyName)&&(e.off(a),n.isPlainObject(t)?void 0!==t.scaleX&&void 0!==t.scaleY&&(e.css("transition-duration","0ms"),t.width=Math.round(e.width()*t.scaleX),t.height=Math.round(e.height()*t.scaleY),t.scaleX=1,t.scaleY=1,n.fancybox.setTranslate(e,t)):!0!==o&&e.removeClass(t),n.isFunction(r)&&r(i))}),n.isNumeric(i)&&e.css("transition-duration",i+"ms"),n.isPlainObject(t)?n.fancybox.setTranslate(e,t):e.addClass(t),e.data("timer",setTimeout(function(){e.trigger("transitionend")},i+16))},stop:function(e){clearTimeout(e.data("timer")),e.off(d)}},n.fn.fancybox=function(e){var t;return e=e||{},t=e.selector||!1,t?n("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},r):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},r),this},s.on("click.fb-start","[data-fancybox]",r)}}(window,document,window.jQuery||jQuery),function(e){"use strict";var t=function(t,n,i){if(t)return i=i||"","object"===e.type(i)&&(i=e.param(i,!0)),e.each(n,function(e,n){t=t.replace("$"+e,n||"")}),i.length&&(t+=(t.indexOf("?")>0?"&":"?")+i),t},n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12])+"&output="+(e[12]&&e[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};e(document).on("onInit.fb",function(i,r){e.each(r.group,function(i,r){var o,a,s,l,c,u,d,f=r.src||"",p=!1;r.type||(o=e.extend(!0,{},n,r.opts.media),e.each(o,function(n,i){if(s=f.match(i.matcher),u={},d=n,s){if(p=i.type,i.paramPlace&&s[i.paramPlace]){c=s[i.paramPlace],"?"==c[0]&&(c=c.substring(1)),c=c.split("&");for(var o=0;o<c.length;++o){var h=c[o].split("=",2);2==h.length&&(u[h[0]]=decodeURIComponent(h[1].replace(/\+/g," ")))}}return l=e.extend(!0,{},i.params,r.opts[n],u),f="function"===e.type(i.url)?i.url.call(this,s,l,r):t(i.url,s,l),a="function"===e.type(i.thumb)?i.thumb.call(this,s,l,r):t(i.thumb,s),"vimeo"===d&&(f=f.replace("&%23","#")),!1}}),p?(r.src=f,r.type=p,r.opts.thumb||r.opts.$thumb&&r.opts.$thumb.length||(r.opts.thumb=a),"iframe"===p&&(e.extend(!0,r.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}}),r.contentProvider=d,r.opts.slideClass+=" fancybox-slide--"+("gmap_place"==d||"gmap_search"==d?"map":"video"))):r.type="image")})})}(window.jQuery),function(e,t,n){"use strict";var i=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),r=function(){return e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.mozCancelAnimationFrame||e.oCancelAnimationFrame||function(t){e.clearTimeout(t)}}(),o=function(t){var n=[];t=t.originalEvent||t||e.e,t=t.touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t];for(var i in t)t[i].pageX?n.push({x:t[i].pageX,y:t[i].pageY}):t[i].clientX&&n.push({x:t[i].clientX,y:t[i].clientY});return n},a=function(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0},s=function(e){if(e.is("a,button,input,select,textarea")||n.isFunction(e.get(0).onclick)||e.data("selectable"))return!0;for(var t=0,i=e[0].attributes,r=i.length;t<r;t++)if("data-fancybox-"===i[t].nodeName.substr(0,14))return!0;return!1},l=function(t){var n=e.getComputedStyle(t)["overflow-y"],i=e.getComputedStyle(t)["overflow-x"],r=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,o=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth;return r||o},c=function(e){for(var t=!1;;){if(t=l(e.get(0)))break;if(e=e.parent(),!e.length||e.hasClass("fancybox-stage")||e.is("body"))break}return t},u=function(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(t,"ontouchstart"))};u.prototype.destroy=function(){this.$container.off(".fb.touch")},u.prototype.ontouchstart=function(i){var r=this,l=n(i.target),u=r.instance,d=u.current,f=d.$content,p="touchstart"==i.type;if(p&&r.$container.off("mousedown.fb.touch"),!d||r.instance.isAnimating||r.instance.isClosing)return i.stopPropagation(),void i.preventDefault();if((!i.originalEvent||2!=i.originalEvent.button)&&l.length&&!s(l)&&!s(l.parent())&&!(i.originalEvent.clientX>l[0].clientWidth+l.offset().left)&&(r.startPoints=o(i),r.startPoints&&!(r.startPoints.length>1&&u.isSliding))){if(r.$target=l,r.$content=f,r.canTap=!0,n(t).off(".fb.touch"),n(t).on(p?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(r,"ontouchend")),n(t).on(p?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(r,"ontouchmove")),!u.current.opts.touch&&!u.canPan()||!l.is(r.$stage)&&!r.$stage.find(l).length)return void(l.is("img")&&i.preventDefault());i.stopPropagation(),n.fancybox.isMobile&&(c(r.$target)||c(r.$target.parent()))||i.preventDefault(),r.canvasWidth=Math.round(d.$slide[0].clientWidth),r.canvasHeight=Math.round(d.$slide[0].clientHeight),r.startTime=(new Date).getTime(),r.distanceX=r.distanceY=r.distance=0,r.isPanning=!1,r.isSwiping=!1,r.isZooming=!1,r.sliderStartPos=r.sliderLastPos||{top:0,left:0},r.contentStartPos=n.fancybox.getTranslate(r.$content),r.contentLastPos=null,1!==r.startPoints.length||r.isZooming||(r.canTap=!u.isSliding,"image"===d.type&&(r.contentStartPos.width>r.canvasWidth+1||r.contentStartPos.height>r.canvasHeight+1)?(n.fancybox.stop(r.$content),r.$content.css("transition-duration","0ms"),r.isPanning=!0):r.isSwiping=!0,r.$container.addClass("fancybox-controls--isGrabbing")),2!==r.startPoints.length||u.isAnimating||d.hasError||"image"!==d.type||!d.isLoaded&&!d.$ghost||(r.isZooming=!0,r.isSwiping=!1,r.isPanning=!1,n.fancybox.stop(r.$content),r.$content.css("transition-duration","0ms"),r.centerPointStartX=.5*(r.startPoints[0].x+r.startPoints[1].x)-n(e).scrollLeft(),r.centerPointStartY=.5*(r.startPoints[0].y+r.startPoints[1].y)-n(e).scrollTop(),r.percentageOfImageAtPinchPointX=(r.centerPointStartX-r.contentStartPos.left)/r.contentStartPos.width,r.percentageOfImageAtPinchPointY=(r.centerPointStartY-r.contentStartPos.top)/r.contentStartPos.height,r.startDistanceBetweenFingers=a(r.startPoints[0],r.startPoints[1]))}},u.prototype.ontouchmove=function(e){var t=this;if(t.newPoints=o(e),n.fancybox.isMobile&&(c(t.$target)||c(t.$target.parent())))return e.stopPropagation(),void(t.canTap=!1);if((t.instance.current.opts.touch||t.instance.canPan())&&t.newPoints&&t.newPoints.length&&(t.distanceX=a(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=a(t.newPoints[0],t.startPoints[0],"y"),t.distance=a(t.newPoints[0],t.startPoints[0]),t.distance>0)){if(!t.$target.is(t.$stage)&&!t.$stage.find(t.$target).length)return;e.stopPropagation(),e.preventDefault(),t.isSwiping?t.onSwipe():t.isPanning?t.onPan():t.isZooming&&t.onZoom()}},u.prototype.onSwipe=function(){var t,o=this,a=o.isSwiping,s=o.sliderStartPos.left||0;!0===a?Math.abs(o.distance)>10&&(o.canTap=!1,o.instance.group.length<2&&o.instance.opts.touch.vertical?o.isSwiping="y":o.instance.isSliding||!1===o.instance.opts.touch.vertical||"auto"===o.instance.opts.touch.vertical&&n(e).width()>800?o.isSwiping="x":(t=Math.abs(180*Math.atan2(o.distanceY,o.distanceX)/Math.PI),o.isSwiping=t>45&&t<135?"y":"x"),o.instance.isSliding=o.isSwiping,o.startPoints=o.newPoints,n.each(o.instance.slides,function(e,t){n.fancybox.stop(t.$slide),t.$slide.css("transition-duration","0ms"),t.inTransition=!1,t.pos===o.instance.current.pos&&(o.sliderStartPos.left=n.fancybox.getTranslate(t.$slide).left)}),o.instance.SlideShow&&o.instance.SlideShow.isActive&&o.instance.SlideShow.stop()):("x"==a&&(o.distanceX>0&&(o.instance.group.length<2||0===o.instance.current.index&&!o.instance.current.opts.loop)?s+=Math.pow(o.distanceX,.8):o.distanceX<0&&(o.instance.group.length<2||o.instance.current.index===o.instance.group.length-1&&!o.instance.current.opts.loop)?s-=Math.pow(-o.distanceX,.8):s+=o.distanceX),o.sliderLastPos={top:"x"==a?0:o.sliderStartPos.top+o.distanceY,left:s},o.requestId&&(r(o.requestId),o.requestId=null),o.requestId=i(function(){o.sliderLastPos&&(n.each(o.instance.slides,function(e,t){var i=t.pos-o.instance.currPos;n.fancybox.setTranslate(t.$slide,{top:o.sliderLastPos.top,left:o.sliderLastPos.left+i*o.canvasWidth+i*t.opts.gutter})}),o.$container.addClass("fancybox-is-sliding"))}))},u.prototype.onPan=function(){var e,t,o,a=this;a.canTap=!1,e=a.contentStartPos.width>a.canvasWidth?a.contentStartPos.left+a.distanceX:a.contentStartPos.left,t=a.contentStartPos.top+a.distanceY,o=a.limitMovement(e,t,a.contentStartPos.width,a.contentStartPos.height),o.scaleX=a.contentStartPos.scaleX,o.scaleY=a.contentStartPos.scaleY,a.contentLastPos=o,a.requestId&&(r(a.requestId),a.requestId=null),a.requestId=i(function(){n.fancybox.setTranslate(a.$content,a.contentLastPos)})},u.prototype.limitMovement=function(e,t,n,i){var r,o,a,s,l=this,c=l.canvasWidth,u=l.canvasHeight,d=l.contentStartPos.left,f=l.contentStartPos.top,p=l.distanceX,h=l.distanceY;return r=Math.max(0,.5*c-.5*n),o=Math.max(0,.5*u-.5*i),a=Math.min(c-n,.5*c-.5*n),s=Math.min(u-i,.5*u-.5*i),n>c&&(p>0&&e>r&&(e=r-1+Math.pow(-r+d+p,.8)||0),p<0&&e<a&&(e=a+1-Math.pow(a-d-p,.8)||0)),i>u&&(h>0&&t>o&&(t=o-1+Math.pow(-o+f+h,.8)||0),h<0&&t<s&&(t=s+1-Math.pow(s-f-h,.8)||0)),{top:t,left:e}},u.prototype.limitPosition=function(e,t,n,i){var r=this,o=r.canvasWidth,a=r.canvasHeight;return n>o?(e=e>0?0:e,e=e<o-n?o-n:e):e=Math.max(0,o/2-n/2),i>a?(t=t>0?0:t,t=t<a-i?a-i:t):t=Math.max(0,a/2-i/2),{top:t,left:e}},u.prototype.onZoom=function(){var t=this,o=t.contentStartPos.width,s=t.contentStartPos.height,l=t.contentStartPos.left,c=t.contentStartPos.top,u=a(t.newPoints[0],t.newPoints[1]),d=u/t.startDistanceBetweenFingers,f=Math.floor(o*d),p=Math.floor(s*d),h=(o-f)*t.percentageOfImageAtPinchPointX,g=(s-p)*t.percentageOfImageAtPinchPointY,m=(t.newPoints[0].x+t.newPoints[1].x)/2-n(e).scrollLeft(),v=(t.newPoints[0].y+t.newPoints[1].y)/2-n(e).scrollTop(),y=m-t.centerPointStartX,b=v-t.centerPointStartY,x=l+(h+y),w=c+(g+b),k={top:w,left:x,scaleX:t.contentStartPos.scaleX*d,scaleY:t.contentStartPos.scaleY*d};t.canTap=!1,t.newWidth=f,t.newHeight=p,t.contentLastPos=k,t.requestId&&(r(t.requestId),t.requestId=null),t.requestId=i(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})},u.prototype.ontouchend=function(e){var i=this,a=Math.max((new Date).getTime()-i.startTime,1),s=i.isSwiping,l=i.isPanning,c=i.isZooming;if(i.endPoints=o(e),i.$container.removeClass("fancybox-controls--isGrabbing"),n(t).off(".fb.touch"),i.requestId&&(r(i.requestId),i.requestId=null),i.isSwiping=!1,i.isPanning=!1,i.isZooming=!1,i.canTap)return i.onTap(e);i.speed=366,i.velocityX=i.distanceX/a*.5,i.velocityY=i.distanceY/a*.5,i.speedX=Math.max(.5*i.speed,Math.min(1.5*i.speed,1/Math.abs(i.velocityX)*i.speed)),l?i.endPanning():c?i.endZooming():i.endSwiping(s)},u.prototype.endSwiping=function(e){var t=this,i=!1;t.instance.isSliding=!1,t.sliderLastPos=null,"y"==e&&Math.abs(t.distanceY)>50?(n.fancybox.animate(t.instance.current.$slide,{top:t.sliderStartPos.top+t.distanceY+150*t.velocityY,opacity:0},150),i=t.instance.close(!0,300)):"x"==e&&t.distanceX>50&&t.instance.group.length>1?i=t.instance.previous(t.speedX):"x"==e&&t.distanceX<-50&&t.instance.group.length>1&&(i=t.instance.next(t.speedX)),!1!==i||"x"!=e&&"y"!=e||t.instance.jumpTo(t.instance.current.index,150),t.$container.removeClass("fancybox-is-sliding")},u.prototype.endPanning=function(){var e,t,i,r=this;r.contentLastPos&&(!1===r.instance.current.opts.touch.momentum?(e=r.contentLastPos.left,t=r.contentLastPos.top):(e=r.contentLastPos.left+r.velocityX*r.speed,t=r.contentLastPos.top+r.velocityY*r.speed),i=r.limitPosition(e,t,r.contentStartPos.width,r.contentStartPos.height),i.width=r.contentStartPos.width,i.height=r.contentStartPos.height,n.fancybox.animate(r.$content,i,330))},u.prototype.endZooming=function(){var e,t,i,r,o=this,a=o.instance.current,s=o.newWidth,l=o.newHeight;o.contentLastPos&&(e=o.contentLastPos.left,t=o.contentLastPos.top,r={top:t,left:e,width:s,height:l,scaleX:1,scaleY:1},n.fancybox.setTranslate(o.$content,r),s<o.canvasWidth&&l<o.canvasHeight?o.instance.scaleToFit(150):s>a.width||l>a.height?o.instance.scaleToActual(o.centerPointStartX,o.centerPointStartY,150):(i=o.limitPosition(e,t,s,l),n.fancybox.setTranslate(o.content,n.fancybox.getTranslate(o.$content)),n.fancybox.animate(o.$content,i,150)))},u.prototype.onTap=function(e){var t,i=this,r=n(e.target),a=i.instance,s=a.current,l=e&&o(e)||i.startPoints,c=l[0]?l[0].x-i.$stage.offset().left:0,u=l[0]?l[0].y-i.$stage.offset().top:0,d=function(t){var r=s.opts[t];if(n.isFunction(r)&&(r=r.apply(a,[s,e])),r)switch(r){case"close":a.close(i.startEvent);break;case"toggleControls":a.toggleControls(!0);break;case"next":a.next();break;case"nextOrClose":a.group.length>1?a.next():a.close(i.startEvent);break;case"zoom":"image"==s.type&&(s.isLoaded||s.$ghost)&&(a.canPan()?a.scaleToFit():a.isScaledDown()?a.scaleToActual(c,u):a.group.length<2&&a.close(i.startEvent))}};if(!(e.originalEvent&&2==e.originalEvent.button||a.isSliding||c>r[0].clientWidth+r.offset().left)){if(r.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(r.is(".fancybox-slide"))t="Slide";else{if(!a.current.$content||!a.current.$content.has(e.target).length)return;t="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,Math.abs(c-i.tapX)>50||Math.abs(u-i.tapY)>50||a.isSliding)return this;d("dblclick"+t)}else i.tapX=c,i.tapY=u,s.opts["dblclick"+t]&&s.opts["dblclick"+t]!==s.opts["click"+t]?i.tapped=setTimeout(function(){i.tapped=null,d("click"+t)},300):d("click"+t);return this}},n(t).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new u(t))}),n(t).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,window.jQuery),function(e,t){"use strict";var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{timer:null,isActive:!1,$button:null,speed:3e3,init:function(){var e=this;e.$button=e.instance.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),(e.instance.group.length<2||!e.instance.group[e.instance.currIndex].opts.slideShow)&&e.$button.hide()},set:function(){var e=this;e.instance&&e.instance.current&&(e.instance.current.opts.loop||e.instance.currIndex<e.instance.group.length-1)?e.timer=setTimeout(function(){e.instance.next()},e.instance.current.opts.slideShow.speed||e.speed):(e.stop(),e.instance.idleSecondsCounter=0,e.instance.showControls())},clear:function(){var e=this;clearTimeout(e.timer),e.timer=null},start:function(){var e=this,t=e.instance.current;e.instance&&t&&(t.opts.loop||t.index<e.instance.group.length-1)&&(e.isActive=!0,e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_STOP).addClass("fancybox-button--pause"),t.isComplete&&e.set())},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_START).removeClass("fancybox-button--pause"),e.isActive=!1},toggle:function(){var e=this;e.isActive?e.stop():e.start()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,i){var r=t&&t.SlideShow;i?r&&n.opts.slideShow.autoStart&&r.start():r&&r.isActive&&r.clear()},"afterShow.fb":function(e,t,n){var i=t&&t.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(n,i,r,o,a){var s=i&&i.SlideShow;!s||!r.opts.slideShow||80!==a&&32!==a||t(e.activeElement).is("button,a,input")||(o.preventDefault(),s.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),t(e).on("visibilitychange",function(){var n=t.fancybox.getInstance(),i=n&&n.SlideShow;i&&i.isActive&&(e.hidden?i.clear():i.set())})}(document,window.jQuery),function(e,t){"use strict";var n=function(){var t,n,i,r=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],o={};for(n=0;n<r.length;n++)if((t=r[n])&&t[1]in e){for(i=0;i<t.length;i++)o[r[0][i]]=t[i];return o}return!1}();if(!n)return void(t&&t.fancybox&&(t.fancybox.defaults.btnTpl.fullScreen=!1));var i={request:function(t){t=t||e.documentElement,t[n.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){e[n.exitFullscreen]()},toggle:function(t){t=t||e.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(e[n.fullscreenElement])},enabled:function(){return Boolean(e[n.fullscreenEnabled])}};t(e).on({"onInit.fb":function(e,t){var n,r=t.$refs.toolbar.find("[data-fancybox-fullscreen]");t&&!t.FullScreen&&t.group[t.currIndex].opts.fullScreen?(n=t.$refs.container,n.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle(n[0])}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(n[0]),t.FullScreen=i):r.hide()},"afterKeydown.fb":function(e,t,n,i,r){t&&t.FullScreen&&70===r&&(i.preventDefault(),t.FullScreen.toggle(t.$refs.container[0]))},"beforeClose.fb":function(e){e&&e.FullScreen&&i.exit()}}),t(e).on(n.fullscreenchange,function(){var e=t.fancybox.getInstance();e.current&&"image"===e.current.type&&e.isAnimating&&(e.current.$content.css("transition","none"),e.isAnimating=!1,e.update(!0,!0,0)),e.trigger("onFullscreenChange",i.isFullscreen())})}(document,window.jQuery),function(e,t){"use strict";var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,init:function(){var e=this,t=e.instance.group[0],n=e.instance.group[1];e.$button=e.instance.$refs.toolbar.find("[data-fancybox-thumbs]"),e.instance.group.length>1&&e.instance.group[e.instance.currIndex].opts.thumbs&&("image"==t.type||t.opts.thumb||t.opts.$thumb)&&("image"==n.type||n.opts.thumb||n.opts.$thumb)?(e.$button.on("click",function(){e.toggle()}),e.isActive=!0):(e.$button.hide(),e.isActive=!1)},create:function(){var e,n,i=this.instance;this.$grid=t('<div class="fancybox-thumbs"></div>').appendTo(i.$refs.container),e="<ul>",t.each(i.group,function(t,i){n=i.opts.thumb||(i.opts.$thumb?i.opts.$thumb.attr("src"):null),n||"image"!==i.type||(n=i.src),n&&n.length&&(e+='<li data-index="'+t+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+n+'" /></li>')}),e+="</ul>",this.$list=t(e).appendTo(this.$grid).on("click","li",function(){i.jumpTo(t(this).data("index"))}),this.$list.find("img").hide().one("load",function(){var e,n,i,r,o=t(this).parent().removeClass("fancybox-thumbs-loading"),a=o.outerWidth(),s=o.outerHeight();e=this.naturalWidth||this.width,n=this.naturalHeight||this.height,i=e/a,r=n/s,i>=1&&r>=1&&(i>r?(e/=r,n=s):(e=a,n/=i)),t(this).css({width:Math.floor(e),height:Math.floor(n),"margin-top":Math.min(0,Math.floor(.3*s-.3*n)),"margin-left":Math.min(0,Math.floor(.5*a-.5*e))}).show()}).each(function(){this.src=t(this).data("src")})},focus:function(){
this.instance.current&&this.$list.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active").focus()},close:function(){this.$grid.hide()},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus()):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.Thumbs&&(t.Thumbs=new n(t))},"beforeShow.fb":function(e,t,n,i){var r=t&&t.Thumbs;if(r&&r.isActive){if(n.modal)return r.$button.hide(),void r.hide();i&&!0===t.opts.thumbs.autoStart&&r.show(),r.isVisible&&r.focus()}},"afterKeydown.fb":function(e,t,n,i,r){var o=t&&t.Thumbs;o&&o.isActive&&71===r&&(i.preventDefault(),o.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==t.opts.thumbs.hideOnClose&&n.close()}})}(document,window.jQuery),function(e,t,n){"use strict";function i(){var e=t.location.hash.substr(1),n=e.split("-"),i=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,r=n.join("-");return i<1&&(i=1),{hash:e,index:i,gallery:r}}function r(e){var t;""!==e.gallery&&(t=n("[data-fancybox='"+n.escapeSelector(e.gallery)+"']").eq(e.index-1),t.length||(t=n("#"+n.escapeSelector(e.gallery))),t.length&&(a=!1,t.trigger("click")))}function o(e){var t;return!!e&&(t=e.current?e.current.opts:e.opts,t.hash||(t.$orig?t.$orig.data("fancybox"):""))}n.escapeSelector||(n.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})});var a=!0,s=null,l=null;n(function(){setTimeout(function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function(e,t){var n,r;!1!==t.group[t.currIndex].opts.hash&&(n=i(),(r=o(t))&&n.gallery&&r==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(n,i,r){var c;r&&!1!==r.opts.hash&&(c=o(i))&&""!==c&&(t.location.hash.indexOf(c)<0&&(i.opts.origHash=t.location.hash),s=c+(i.group.length>1?"-"+(r.index+1):""),"replaceState"in t.history?(l&&clearTimeout(l),l=setTimeout(function(){t.history[a?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+s),l=null,a=!1},300)):t.location.hash=s)},"beforeClose.fb":function(i,r,a){var c,u;l&&clearTimeout(l),!1!==a.opts.hash&&(c=o(r),u=r&&r.opts.origHash?r.opts.origHash:"",c&&""!==c&&("replaceState"in history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+u):(t.location.hash=u,n(t).scrollTop(r.scrollTop).scrollLeft(r.scrollLeft))),s=null)}}),n(t).on("hashchange.fb",function(){var e=i();n.fancybox.getInstance()?!s||s===e.gallery+"-"+e.index||1===e.index&&s==e.gallery||(s=null,n.fancybox.close()):""!==e.gallery&&r(e)}),r(i()))},50)})}(document,window,window.jQuery),function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=3)}([function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,function(a){r=[n(2)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e){return e})},function(e,t,n){"use strict";var i,r,o,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(a){r=[n(0),n(10),n(11)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t,n,i){function r(t,n,a){if(!(this instanceof r))return new r(t,n,a);this.el=i,this.events={},this.maskset=i,this.refreshValue=!1,!0!==a&&(e.isPlainObject(t)?n=t:(n=n||{}).alias=t,this.opts=e.extend(!0,{},this.defaults,n),this.noMasksCache=n&&n.definitions!==i,this.userOptions=n||{},this.isRTL=this.opts.numericInput,o(this.opts.alias,n,this.opts))}function o(t,n,a){var s=r.prototype.aliases[t];return s?(s.alias&&o(s.alias,i,a),e.extend(!0,a,s),e.extend(!0,a,n),!0):(null===a.mask&&(a.mask=t),!1)}function s(t,n){function o(t,o,a){var s=!1;if(null!==t&&""!==t||((s=null!==a.regex)?t=(t=a.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(s=!0,t=".*")),1===t.length&&!1===a.greedy&&0!==a.repeat&&(a.placeholder=""),a.repeat>0||"*"===a.repeat||"+"===a.repeat){var l="*"===a.repeat?0:"+"===a.repeat?1:a.repeat;t=a.groupmarker.start+t+a.groupmarker.end+a.quantifiermarker.start+l+","+a.repeat+a.quantifiermarker.end}var c,u=s?"regex_"+a.regex:a.numericInput?t.split("").reverse().join(""):t;return r.prototype.masksCache[u]===i||!0===n?(c={mask:t,maskToken:r.prototype.analyseMask(t,s,a),validPositions:{},_buffer:i,buffer:i,tests:{},metadata:o,maskLength:i},!0!==n&&(r.prototype.masksCache[u]=c,c=e.extend(!0,{},r.prototype.masksCache[u]))):c=e.extend(!0,{},r.prototype.masksCache[u]),c}if(e.isFunction(t.mask)&&(t.mask=t.mask(t)),e.isArray(t.mask)){if(t.mask.length>1){t.keepStatic=null===t.keepStatic||t.keepStatic;var a=t.groupmarker.start;return e.each(t.numericInput?t.mask.reverse():t.mask,function(n,r){a.length>1&&(a+=t.groupmarker.end+t.alternatormarker+t.groupmarker.start),r.mask===i||e.isFunction(r.mask)?a+=r:a+=r.mask}),a+=t.groupmarker.end,o(a,t.mask,t)}t.mask=t.mask.pop()}return t.mask&&t.mask.mask!==i&&!e.isFunction(t.mask.mask)?o(t.mask.mask,t.mask,t):o(t.mask,t.mask,t)}function l(o,s,c){function h(e,t,n){t=t||0;var r,o,a,s=[],l=0,u=v();do{!0===e&&g().validPositions[l]?(o=(a=g().validPositions[l]).match,r=a.locator.slice(),s.push(!0===n?a.input:!1===n?o.nativeDef:j(l,o))):(o=(a=x(l,r,l-1)).match,r=a.locator.slice(),(!1===c.jitMasking||l<u||"number"==typeof c.jitMasking&&isFinite(c.jitMasking)&&c.jitMasking>l)&&s.push(!1===n?o.nativeDef:j(l,o))),l++}while((G===i||l<G)&&(null!==o.fn||""!==o.def)||t>l);return""===s[s.length-1]&&s.pop(),g().maskLength=l+1,s}function g(){return s}function m(e){var t=g();t.buffer=i,!0!==e&&(t.validPositions={},t.p=0)}function v(e,t,n){var r=-1,o=-1,a=n||g().validPositions;e===i&&(e=-1);for(var s in a){var l=parseInt(s);a[l]&&(t||!0!==a[l].generatedInput)&&(l<=e&&(r=l),l>=e&&(o=l))}return-1!==r&&e-r>1||o<e?r:o}function y(t,n,r,o){var a,s=t,l=e.extend(!0,{},g().validPositions),u=!1;for(g().p=t,a=n-1;a>=s;a--)g().validPositions[a]!==i&&(!0!==r&&(!g().validPositions[a].match.optionality&&function(e){var t=g().validPositions[e];if(t!==i&&null===t.match.fn){var n=g().validPositions[e-1],r=g().validPositions[e+1];return n!==i&&r!==i}return!1}(a)||!1===c.canClearPosition(g(),a,v(),o,c))||delete g().validPositions[a]);for(m(!0),a=s+1;a<=v();){for(;g().validPositions[s]!==i;)s++;if(a<s&&(a=s+1),g().validPositions[a]===i&&A(a))a++;else{var d=x(a);!1===u&&l[s]&&l[s].match.def===d.match.def?(g().validPositions[s]=e.extend(!0,{},l[s]),g().validPositions[s].input=d.input,delete g().validPositions[a],a++):k(s,d.match.def)?!1!==M(s,d.input||j(a),!0)&&(delete g().validPositions[a],a++,u=!0):A(a)||(a++,s--),s++}}m(!0)}function b(e,t){for(var n,r=e,o=v(),a=g().validPositions[o]||C(0)[0],s=a.alternation!==i?a.locator[a.alternation].toString().split(","):[],l=0;l<r.length&&(!((n=r[l]).match&&(c.greedy&&!0!==n.match.optionalQuantifier||(!1===n.match.optionality||!1===n.match.newBlockMarker)&&!0!==n.match.optionalQuantifier)&&(a.alternation===i||a.alternation!==n.alternation||n.locator[a.alternation]!==i&&D(n.locator[a.alternation].toString().split(","),s)))||!0===t&&(null!==n.match.fn||/[0-9a-bA-Z]/.test(n.match.def)));l++);return n}function x(e,t,n){return g().validPositions[e]||b(C(e,t?t.slice():t,n))}function w(e){return g().validPositions[e]?g().validPositions[e]:C(e)[0]}function k(e,t){for(var n=!1,i=C(e),r=0;r<i.length;r++)if(i[r].match&&i[r].match.def===t){n=!0;break}return n}function C(t,n,r){function o(n,r,a,l){function d(a,l,m){function v(t,n){var i=0===e.inArray(t,n.matches);return i||e.each(n.matches,function(e,r){if(!0===r.isQuantifier&&(i=v(t,n.matches[e-1])))return!1}),i}function y(t,n,r){var o,a;if(g().validPositions[t-1]&&r&&g().tests[t])for(var s=g().validPositions[t-1].locator,l=g().tests[t][0].locator,c=0;c<r;c++)if(s[c]!==l[c])return s.slice(r+1);return(g().tests[t]||g().validPositions[t])&&e.each(g().tests[t]||[g().validPositions[t]],function(e,t){var s=r!==i?r:t.alternation,l=t.locator[s]!==i?t.locator[s].toString().indexOf(n):-1;(a===i||l<a)&&-1!==l&&(o=t,a=l)}),o?o.locator.slice((r!==i?r:o.alternation)+1):r!==i?y(t,n):i}if(u>1e4)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+g().mask;if(u===t&&a.matches===i)return f.push({match:a,locator:l.reverse(),cd:h}),!0;if(a.matches!==i){if(a.isGroup&&m!==a){if(a=d(n.matches[e.inArray(a,n.matches)+1],l))return!0}else if(a.isOptional){var b=a;if(a=o(a,r,l,m)){if(s=f[f.length-1].match,!v(s,b))return!0;p=!0,u=t}}else if(a.isAlternator){var x,w=a,k=[],C=f.slice(),S=l.length,E=r.length>0?r.shift():-1;if(-1===E||"string"==typeof E){var T,P=u,D=r.slice(),M=[];if("string"==typeof E)M=E.split(",");else for(T=0;T<w.matches.length;T++)M.push(T);for(var A=0;A<M.length;A++){if(T=parseInt(M[A]),f=[],r=y(u,T,S)||D.slice(),!0!==(a=d(w.matches[T]||n.matches[T],[T].concat(l),m)||a)&&a!==i&&M[M.length-1]<w.matches.length){var O=e.inArray(a,n.matches)+1;n.matches.length>O&&(a=d(n.matches[O],[O].concat(l.slice(1,l.length)),m))&&(M.push(O.toString()),e.each(f,function(e,t){t.alternation=l.length-1}))}x=f.slice(),u=P,f=[];for(var L=0;L<x.length;L++){var N=x[L],I=!1;N.alternation=N.alternation||S;for(var j=0;j<k.length;j++){var F=k[j];if("string"!=typeof E||-1!==e.inArray(N.locator[N.alternation].toString(),M)){if(function(e,t){return e.match.nativeDef===t.match.nativeDef||e.match.def===t.match.nativeDef||e.match.nativeDef===t.match.def}(N,F)){I=!0,N.alternation===F.alternation&&-1===F.locator[F.alternation].toString().indexOf(N.locator[N.alternation])&&(F.locator[F.alternation]=F.locator[F.alternation]+","+N.locator[N.alternation],F.alternation=N.alternation),N.match.nativeDef===F.match.def&&(N.locator[N.alternation]=F.locator[F.alternation],k.splice(k.indexOf(F),1,N));break}if(N.match.def===F.match.def){I=!1;break}if(function(e,n){return null===e.match.fn&&null!==n.match.fn&&n.match.fn.test(e.match.def,g(),t,!1,c,!1)}(N,F)||function(e,n){return null!==e.match.fn&&null!==n.match.fn&&n.match.fn.test(e.match.def.replace(/[\[\]]/g,""),g(),t,!1,c,!1)}(N,F)){N.alternation===F.alternation&&-1===N.locator[N.alternation].toString().indexOf(F.locator[F.alternation].toString().split("")[0])&&(N.na=N.na||N.locator[N.alternation].toString(),-1===N.na.indexOf(N.locator[N.alternation].toString().split("")[0])&&(N.na=N.na+","+N.locator[F.alternation].toString().split("")[0]),I=!0,N.locator[N.alternation]=F.locator[F.alternation].toString().split("")[0]+","+N.locator[N.alternation],k.splice(k.indexOf(F),0,N));break}}}I||k.push(N)}}"string"==typeof E&&(k=e.map(k,function(t,n){if(isFinite(n)){var r=t.alternation,o=t.locator[r].toString().split(",");t.locator[r]=i,t.alternation=i;for(var a=0;a<o.length;a++)-1!==e.inArray(o[a],M)&&(t.locator[r]!==i?(t.locator[r]+=",",t.locator[r]+=o[a]):t.locator[r]=parseInt(o[a]),t.alternation=r);if(t.locator[r]!==i)return t}})),f=C.concat(k),u=t,p=f.length>0,a=k.length>0,r=D.slice()}else a=d(w.matches[E]||n.matches[E],[E].concat(l),m);if(a)return!0}else if(a.isQuantifier&&m!==n.matches[e.inArray(a,n.matches)-1])for(var R=a,$=r.length>0?r.shift():0;$<(isNaN(R.quantifier.max)?$+1:R.quantifier.max)&&u<=t;$++){var _=n.matches[e.inArray(R,n.matches)-1];if(a=d(_,[$].concat(l),_)){if(s=f[f.length-1].match,s.optionalQuantifier=$>R.quantifier.min-1,v(s,_)){if($>R.quantifier.min-1){p=!0,u=t;break}return!0}return!0}}else if(a=o(a,r,l,m))return!0}else u++}for(var m=r.length>0?r.shift():0;m<n.matches.length;m++)if(!0!==n.matches[m].isQuantifier){var v=d(n.matches[m],[m].concat(a),l);if(v&&u===t)return v;if(u>t)break}}function a(e){if(c.keepStatic&&t>0&&e.length>1+(""===e[e.length-1].match.def?1:0)&&!0!==e[0].match.optionality&&!0!==e[0].match.optionalQuantifier&&null===e[0].match.fn&&!/[0-9a-bA-Z]/.test(e[0].match.def)){if(g().validPositions[t-1]===i)return[b(e)];if(g().validPositions[t-1].alternation===e[0].alternation)return[b(e)];if(g().validPositions[t-1])return[b(e)]}return e}var s,l=g().maskToken,u=n?r:0,d=n?n.slice():[0],f=[],p=!1,h=n?n.join(""):"";if(t>-1){if(n===i){for(var m,v=t-1;(m=g().validPositions[v]||g().tests[v])===i&&v>-1;)v--;m!==i&&v>-1&&(d=function(t){var n=[];return e.isArray(t)||(t=[t]),t.length>0&&(t[0].alternation===i?0===(n=b(t.slice()).locator.slice()).length&&(n=t[0].locator.slice()):e.each(t,function(e,t){if(""!==t.def)if(0===n.length)n=t.locator.slice();else for(var i=0;i<n.length;i++)t.locator[i]&&-1===n[i].toString().indexOf(t.locator[i])&&(n[i]+=","+t.locator[i])})),n}(m),h=d.join(""),u=v)}if(g().tests[t]&&g().tests[t][0].cd===h)return a(g().tests[t]);for(var y=d.shift();y<l.length&&!(o(l[y],d,[y])&&u===t||u>t);y++);}return(0===f.length||p)&&f.push({match:{fn:null,cardinality:0,optionality:!0,casing:null,def:"",placeholder:""},locator:[],cd:h}),n!==i&&g().tests[t]?a(e.extend(!0,[],f)):(g().tests[t]=e.extend(!0,[],f),a(g().tests[t]))}function S(){return g()._buffer===i&&(g()._buffer=h(!1,1),g().buffer===i&&(g().buffer=g()._buffer.slice())),g()._buffer}function E(e){return g().buffer!==i&&!0!==e||(g().buffer=h(!0,v(),!0)),g().buffer}function T(e,t,n){var r,o;if(!0===e)m(),e=0,t=n.length;else for(r=e;r<t;r++)delete g().validPositions[r];for(o=e,r=e;r<t;r++)if(m(!0),n[r]!==c.skipOptionalPartCharacter){var a=M(o,n[r],!0,!0);!1!==a&&(m(!0),o=a.caret!==i?a.caret:a.pos+1)}}function P(t,n,i){switch(c.casing||n.casing){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase();break;case"title":var o=g().validPositions[i-1];t=0===i||o&&o.input===String.fromCharCode(r.keyCode.SPACE)?t.toUpperCase():t.toLowerCase();break;default:if(e.isFunction(c.casing)){var a=Array.prototype.slice.call(arguments);a.push(g().validPositions),t=c.casing.apply(this,a)}}return t}function D(t,n,r){for(var o,a=c.greedy?n:n.slice(0,1),s=!1,l=r!==i?r.split(","):[],u=0;u<l.length;u++)-1!==(o=t.indexOf(l[u]))&&t.splice(o,1);for(var d=0;d<t.length;d++)if(-1!==e.inArray(t[d],a)){s=!0;break}return s}function M(t,n,o,a,s,l){function u(e){var t=Q?e.begin-e.end>1||e.begin-e.end==1:e.end-e.begin>1||e.end-e.begin==1;return t&&0===e.begin&&e.end===g().maskLength?"full":t}function d(n,r,o){var s=!1;return e.each(C(n),function(l,d){for(var p=d.match,h=r?1:0,b="",x=p.cardinality;x>h;x--)b+=N(n-(x-1));if(r&&(b+=r),E(!0),!1!==(s=null!=p.fn?p.fn.test(b,g(),n,o,c,u(t)):(r===p.def||r===c.skipOptionalPartCharacter)&&""!==p.def&&{c:j(n,p,!0)||p.def,pos:n})){var w=s.c!==i?s.c:r;w=w===c.skipOptionalPartCharacter&&null===p.fn?j(n,p,!0)||p.def:w;var k=n,C=E();if(s.remove!==i&&(e.isArray(s.remove)||(s.remove=[s.remove]),e.each(s.remove.sort(function(e,t){return t-e}),function(e,t){y(t,t+1,!0)})),s.insert!==i&&(e.isArray(s.insert)||(s.insert=[s.insert]),e.each(s.insert.sort(function(e,t){return e-t}),function(e,t){M(t.pos,t.c,!0,a)})),s.refreshFromBuffer){var S=s.refreshFromBuffer;if(T(!0===S?S:S.start,S.end,C),s.pos===i&&s.c===i)return s.pos=v(),!1;if((k=s.pos!==i?s.pos:n)!==n)return s=e.extend(s,M(k,w,!0,a)),!1}else if(!0!==s&&s.pos!==i&&s.pos!==n&&(k=s.pos,T(n,k,E().slice()),k!==n))return s=e.extend(s,M(k,w,!0)),!1;return(!0===s||s.pos!==i||s.c!==i)&&(l>0&&m(!0),f(k,e.extend({},d,{input:P(w,p,k)}),a,u(t))||(s=!1),!1)}}),s}function f(t,n,r,o){if(o||c.insertMode&&g().validPositions[t]!==i&&r===i){var a,s=e.extend(!0,{},g().validPositions),l=v(i,!0);for(a=t;a<=l;a++)delete g().validPositions[a];g().validPositions[t]=e.extend(!0,{},n);var u,d=!0,f=g().validPositions,h=!1,y=g().maskLength;for(a=u=t;a<=l;a++){var b=s[a];if(b!==i)for(var x=u;x<g().maskLength&&(null===b.match.fn&&f[a]&&(!0===f[a].match.optionalQuantifier||!0===f[a].match.optionality)||null!=b.match.fn);){if(x++,!1===h&&s[x]&&s[x].match.def===b.match.def)g().validPositions[x]=e.extend(!0,{},s[x]),g().validPositions[x].input=b.input,p(x),u=x,d=!0;else if(k(x,b.match.def)){var w=M(x,b.input,!0,!0);d=!1!==w,u=w.caret||w.insert?v():x,h=!0}else if(!(d=!0===b.generatedInput)&&x>=g().maskLength-1)break;if(g().maskLength<y&&(g().maskLength=y),d)break}if(!d)break}if(!d)return g().validPositions=e.extend(!0,{},s),m(!0),!1}else g().validPositions[t]=e.extend(!0,{},n);return m(!0),!0}function p(t){for(var n=t-1;n>-1&&!g().validPositions[n];n--);var r,o;for(n++;n<t;n++)g().validPositions[n]===i&&(!1===c.jitMasking||c.jitMasking>n)&&(""===(o=C(n,x(n-1).locator,n-1).slice())[o.length-1].match.def&&o.pop(),(r=b(o))&&(r.match.def===c.radixPointDefinitionSymbol||!A(n,!0)||e.inArray(c.radixPoint,E())<n&&r.match.fn&&r.match.fn.test(j(n),g(),n,!1,c))&&!1!==(w=d(n,j(n,r.match,!0)||(null==r.match.fn?r.match.def:""!==j(n)?j(n):E()[n]),!0))&&(g().validPositions[w.pos||n].generatedInput=!0))}o=!0===o;var h=t;t.begin!==i&&(h=Q&&!u(t)?t.end:t.begin);var w=!0,S=e.extend(!0,{},g().validPositions);if(e.isFunction(c.preValidation)&&!o&&!0!==a&&!0!==l&&(w=c.preValidation(E(),h,n,u(t),c)),!0===w){if(p(h),u(t)&&(B(i,r.keyCode.DELETE,t,!0,!0),h=g().p),h<g().maskLength&&(G===i||h<G)&&(w=d(h,n,o),(!o||!0===a)&&!1===w&&!0!==l)){var L=g().validPositions[h];if(!L||null!==L.match.fn||L.match.def!==n&&n!==c.skipOptionalPartCharacter){if((c.insertMode||g().validPositions[O(h)]===i)&&!A(h,!0))for(var I=h+1,F=O(h);I<=F;I++)if(!1!==(w=d(I,n,o))){!function(t,n){var r=g().validPositions[n];if(r)for(var o=r.locator,a=o.length,s=t;s<n;s++)if(g().validPositions[s]===i&&!A(s,!0)){var l=C(s).slice(),c=b(l,!0),u=-1;""===l[l.length-1].match.def&&l.pop(),e.each(l,function(e,t){for(var n=0;n<a;n++){if(t.locator[n]===i||!D(t.locator[n].toString().split(","),o[n].toString().split(","),t.na)){var r=o[n],s=c.locator[n],l=t.locator[n];r-s>Math.abs(r-l)&&(c=t);break}u<n&&(u=n,c=t)}}),(c=e.extend({},c,{input:j(s,c.match,!0)||c.match.def})).generatedInput=!0,f(s,c,!0),g().validPositions[n]=i,d(n,r.input,!0)}}(h,w.pos!==i?w.pos:I),h=I;break}}else w={caret:O(h)}}!1===w&&c.keepStatic&&!o&&!0!==s&&(w=function(t,n,r){var o,s,l,u,d,f,p,h,y=e.extend(!0,{},g().validPositions),b=!1,x=v();for(u=g().validPositions[x];x>=0;x--)if((l=g().validPositions[x])&&l.alternation!==i){if(o=x,s=g().validPositions[o].alternation,u.locator[l.alternation]!==l.locator[l.alternation])break;u=l}if(s!==i){h=parseInt(o);var w=u.locator[u.alternation||s]!==i?u.locator[u.alternation||s]:p[0];w.length>0&&(w=w.split(",")[0]);var k=g().validPositions[h],S=g().validPositions[h-1];e.each(C(h,S?S.locator:i,h-1),function(o,l){p=l.locator[s]?l.locator[s].toString().split(","):[];for(var u=0;u<p.length;u++){var x=[],C=0,S=0,E=!1;if(w<p[u]&&(l.na===i||-1===e.inArray(p[u],l.na.split(","))||-1===e.inArray(w.toString(),p))){g().validPositions[h]=e.extend(!0,{},l);var T=g().validPositions[h].locator;for(g().validPositions[h].locator[s]=parseInt(p[u]),null==l.match.fn?(k.input!==l.match.def&&(E=!0,!0!==k.generatedInput&&x.push(k.input)),S++,g().validPositions[h].generatedInput=!/[0-9a-bA-Z]/.test(l.match.def),g().validPositions[h].input=l.match.def):g().validPositions[h].input=k.input,d=h+1;d<v(i,!0)+1;d++)(f=g().validPositions[d])&&!0!==f.generatedInput&&/[0-9a-bA-Z]/.test(f.input)?x.push(f.input):d<t&&C++,delete g().validPositions[d];for(E&&x[0]===l.match.def&&x.shift(),m(!0),b=!0;x.length>0;){var P=x.shift();if(P!==c.skipOptionalPartCharacter&&!(b=M(v(i,!0)+1,P,!1,a,!0)))break}if(b){g().validPositions[h].locator=T;var D=v(t)+1;for(d=h+1;d<v()+1;d++)((f=g().validPositions[d])===i||null==f.match.fn)&&d<t+(S-C)&&S++;b=M((t+=S-C)>D?D:t,n,r,a,!0)}if(b)return!1;m(),g().validPositions=e.extend(!0,{},y)}}})}return b}(h,n,o)),!0===w&&(w={pos:h})}if(e.isFunction(c.postValidation)&&!1!==w&&!o&&!0!==a&&!0!==l){var R=c.postValidation(E(!0),w,c);if(R.refreshFromBuffer&&R.buffer){var $=R.refreshFromBuffer;T(!0===$?$:$.start,$.end,R.buffer)}w=!0===R?w:R}return w&&w.pos===i&&(w.pos=h),!1!==w&&!0!==l||(m(!0),g().validPositions=e.extend(!0,{},S)),w}function A(e,t){var n=x(e).match;if(""===n.def&&(n=w(e).match),null!=n.fn)return n.fn;if(!0!==t&&e>-1){var i=C(e);return i.length>1+(""===i[i.length-1].match.def?1:0)}return!1}function O(e,t){var n=g().maskLength;if(e>=n)return n;var i=e;for(C(n+1).length>1&&(h(!0,n+1,!0),n=g().maskLength);++i<n&&(!0===t&&(!0!==w(i).match.newBlockMarker||!A(i))||!0!==t&&!A(i)););return i}function L(e,t){var n,i=e;if(i<=0)return 0;for(;--i>0&&(!0===t&&!0!==w(i).match.newBlockMarker||!0!==t&&!A(i)&&((n=C(i)).length<2||2===n.length&&""===n[1].match.def)););return i}function N(e){return g().validPositions[e]===i?j(e):g().validPositions[e].input}function I(t,n,r,o,a){if(o&&e.isFunction(c.onBeforeWrite)){var s=c.onBeforeWrite.call(V,o,n,r,c);if(s){if(s.refreshFromBuffer){var l=s.refreshFromBuffer;T(!0===l?l:l.start,l.end,s.buffer||n),n=E(!0)}r!==i&&(r=s.caret!==i?s.caret:r)}}t!==i&&(t.inputmask._valueSet(n.join("")),r===i||o!==i&&"blur"===o.type?W(t,r,0===n.length):p&&o&&"input"===o.type?setTimeout(function(){$(t,r)},0):$(t,r),!0===a&&(J=!0,e(t).trigger("input")))}function j(t,n,r){if((n=n||w(t).match).placeholder!==i||!0===r)return e.isFunction(n.placeholder)?n.placeholder(c):n.placeholder;if(null===n.fn){if(t>-1&&g().validPositions[t]===i){var o,a=C(t),s=[];if(a.length>1+(""===a[a.length-1].match.def?1:0))for(var l=0;l<a.length;l++)if(!0!==a[l].match.optionality&&!0!==a[l].match.optionalQuantifier&&(null===a[l].match.fn||o===i||!1!==a[l].match.fn.test(o.match.def,g(),t,!0,c))&&(s.push(a[l]),null===a[l].match.fn&&(o=a[l]),s.length>1&&/[0-9a-bA-Z]/.test(s[0].match.def)))return c.placeholder.charAt(t%c.placeholder.length)}return n.def}return c.placeholder.charAt(t%c.placeholder.length)}function F(t,o,a,s,l){function u(e,t){return-1!==S().slice(e,O(e)).join("").indexOf(t)&&!A(e)&&w(e).match.nativeDef===t.charAt(t.length-1)}var d=s.slice(),f="",p=-1,h=i;if(m(),a||!0===c.autoUnmask)p=O(p);else{var y=S().slice(0,O(-1)).join(""),b=d.join("").match(new RegExp("^"+r.escapeRegex(y),"g"));b&&b.length>0&&(d.splice(0,b.length*y.length),p=O(p))}if(-1===p?(g().p=O(p),p=0):g().p=p,e.each(d,function(n,r){if(r!==i)if(g().validPositions[n]===i&&d[n]===j(n)&&A(n,!0)&&!1===M(n,d[n],!0,i,i,!0))g().p++;else{var o=new e.Event("_checkval");o.which=r.charCodeAt(0),f+=r;var s=v(i,!0),l=g().validPositions[s],y=x(s+1,l?l.locator.slice():i,s);if(!u(p,f)||a||c.autoUnmask){var b=a?n:null==y.match.fn&&y.match.optionality&&s+1<g().p?s+1:g().p;h=ie.keypressEvent.call(t,o,!0,!1,a,b),p=b+1,f=""}else h=ie.keypressEvent.call(t,o,!0,!1,!0,s+1);if(!1!==h&&!a&&e.isFunction(c.onBeforeWrite)){var w=h;if(h=c.onBeforeWrite.call(V,o,E(),h.forwardPosition,c),(h=e.extend(w,h))&&h.refreshFromBuffer){var k=h.refreshFromBuffer;T(!0===k?k:k.start,k.end,h.buffer),m(!0),h.caret&&(g().p=h.caret,h.forwardPosition=h.caret)}}}}),o){var k=i;n.activeElement===t&&h&&(k=c.numericInput?L(h.forwardPosition):h.forwardPosition),I(t,E(),k,l||new e.Event("checkval"),l&&"input"===l.type)}}function R(t){if(t){if(t.inputmask===i)return t.value;t.inputmask&&t.inputmask.refreshValue&&ie.setValueEvent.call(t)}var n=[],r=g().validPositions;for(var o in r)r[o].match&&null!=r[o].match.fn&&n.push(r[o].input);var a=0===n.length?"":(Q?n.reverse():n).join("");if(e.isFunction(c.onUnMask)){var s=(Q?E().slice().reverse():E()).join("");a=c.onUnMask.call(V,s,a,c)}return a}function $(e,r,o,a){function s(e){return!0===a||!Q||"number"!=typeof e||c.greedy&&""===c.placeholder||(e=E().join("").length-e),e}var l;if(r===i)return e.setSelectionRange?(r=e.selectionStart,o=e.selectionEnd):t.getSelection?(l=t.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==e&&l.commonAncestorContainer!==e||(r=l.startOffset,o=l.endOffset):n.selection&&n.selection.createRange&&(o=(r=0-(l=n.selection.createRange()).duplicate().moveStart("character",-e.inputmask._valueGet().length))+l.text.length),{begin:s(r),end:s(o)};if(r.begin!==i&&(o=r.end,r=r.begin),"number"==typeof r){r=s(r),o="number"==typeof(o=s(o))?o:r;var d=parseInt(((e.ownerDocument.defaultView||t).getComputedStyle?(e.ownerDocument.defaultView||t).getComputedStyle(e,null):e.currentStyle).fontSize)*o;if(e.scrollLeft=d>e.scrollWidth?d:0,u||!1!==c.insertMode||r!==o||o++,e.setSelectionRange)e.selectionStart=r,e.selectionEnd=o;else if(t.getSelection){if(l=n.createRange(),e.firstChild===i||null===e.firstChild){var f=n.createTextNode("");e.appendChild(f)}l.setStart(e.firstChild,r<e.inputmask._valueGet().length?r:e.inputmask._valueGet().length),l.setEnd(e.firstChild,o<e.inputmask._valueGet().length?o:e.inputmask._valueGet().length),l.collapse(!0);var p=t.getSelection();p.removeAllRanges(),p.addRange(l)}else e.createTextRange&&((l=e.createTextRange()).collapse(!0),l.moveEnd("character",o),l.moveStart("character",r),l.select());W(e,{begin:r,end:o})}}function _(t){var n,r,o=E(),a=o.length,s=v(),l={},c=g().validPositions[s],u=c!==i?c.locator.slice():i;for(n=s+1;n<o.length;n++)u=(r=x(n,u,n-1)).locator.slice(),l[n]=e.extend(!0,{},r);var d=c&&c.alternation!==i?c.locator[c.alternation]:i;for(n=a-1;n>s&&((r=l[n]).match.optionality||r.match.optionalQuantifier&&r.match.newBlockMarker||d&&(d!==l[n].locator[c.alternation]&&null!=r.match.fn||null===r.match.fn&&r.locator[c.alternation]&&D(r.locator[c.alternation].toString().split(","),d.toString().split(","))&&""!==C(n)[0].def))&&o[n]===j(n,r.match);n--)a--;return t?{l:a,def:l[a]?l[a].match:i}:a}function H(e){for(var t,n=_(),r=e.length,o=g().validPositions[v()];n<r&&!A(n,!0)&&(t=o!==i?x(n,o.locator.slice(""),o):w(n))&&!0!==t.match.optionality&&(!0!==t.match.optionalQuantifier&&!0!==t.match.newBlockMarker||n+1===r&&""===(o!==i?x(n+1,o.locator.slice(""),o):w(n+1)).match.def);)n++;for(;(t=g().validPositions[n-1])&&t&&t.match.optionality&&t.input===c.skipOptionalPartCharacter;)n--;return e.splice(n),e}function q(t){if(e.isFunction(c.isComplete))return c.isComplete(t,c);if("*"===c.repeat)return i;var n=!1,r=_(!0),o=L(r.l);if(r.def===i||r.def.newBlockMarker||r.def.optionality||r.def.optionalQuantifier){n=!0;for(var a=0;a<=o;a++){var s=x(a).match;if(null!==s.fn&&g().validPositions[a]===i&&!0!==s.optionality&&!0!==s.optionalQuantifier||null===s.fn&&t[a]!==j(a,s)){n=!1;break}}}return n}function B(t,n,o,a,s){if((c.numericInput||Q)&&(n===r.keyCode.BACKSPACE?n=r.keyCode.DELETE:n===r.keyCode.DELETE&&(n=r.keyCode.BACKSPACE),Q)){var l=o.end;o.end=o.begin,o.begin=l}n===r.keyCode.BACKSPACE&&(o.end-o.begin<1||!1===c.insertMode)?(o.begin=L(o.begin),g().validPositions[o.begin]!==i&&g().validPositions[o.begin].input===c.groupSeparator&&o.begin--):n===r.keyCode.DELETE&&o.begin===o.end&&(o.end=A(o.end,!0)&&g().validPositions[o.end]&&g().validPositions[o.end].input!==c.radixPoint?o.end+1:O(o.end)+1,g().validPositions[o.begin]!==i&&g().validPositions[o.begin].input===c.groupSeparator&&o.end++),y(o.begin,o.end,!1,a),!0!==a&&function(){if(c.keepStatic){for(var n=[],r=v(-1,!0),o=e.extend(!0,{},g().validPositions),a=g().validPositions[r];r>=0;r--){var s=g().validPositions[r];if(s){if(!0!==s.generatedInput&&/[0-9a-bA-Z]/.test(s.input)&&n.push(s.input),delete g().validPositions[r],s.alternation!==i&&s.locator[s.alternation]!==a.locator[s.alternation])break;a=s}}if(r>-1)for(g().p=O(v(-1,!0));n.length>0;){var l=new e.Event("keypress");l.which=n.pop().charCodeAt(0),ie.keypressEvent.call(t,l,!0,!1,!1,g().p)}else g().validPositions=e.extend(!0,{},o)}}();var u=v(o.begin,!0);if(u<o.begin)g().p=O(u);else if(!0!==a&&(g().p=o.begin,!0!==s))for(;g().p<u&&g().validPositions[g().p]===i;)g().p++}function Y(i){function r(e){var t,r=n.createElement("span");for(var a in o)isNaN(a)&&-1!==a.indexOf("font")&&(r.style[a]=o[a]);r.style.textTransform=o.textTransform,r.style.letterSpacing=o.letterSpacing,r.style.position="absolute",r.style.height="auto",r.style.width="auto",r.style.visibility="hidden",r.style.whiteSpace="nowrap",n.body.appendChild(r);var s,l=i.inputmask._valueGet(),c=0;for(t=0,s=l.length;t<=s;t++){if(r.innerHTML+=l.charAt(t)||"_",r.offsetWidth>=e){var u=e-c,d=r.offsetWidth-e;r.innerHTML=l.charAt(t),t=(u-=r.offsetWidth/3)<d?t-1:t;break}c=r.offsetWidth}return n.body.removeChild(r),t}var o=(i.ownerDocument.defaultView||t).getComputedStyle(i,null),a=n.createElement("div");a.style.width=o.width,a.style.textAlign=o.textAlign,(X=n.createElement("div")).className="im-colormask",i.parentNode.insertBefore(X,i),i.parentNode.removeChild(i),X.appendChild(a),X.appendChild(i),i.style.left=a.offsetLeft+"px",e(i).on("click",function(e){return $(i,r(e.clientX)),ie.clickEvent.call(i,[e])}),e(i).on("keydown",function(e){e.shiftKey||!1===c.insertMode||setTimeout(function(){W(i)},0)})}function W(e,t,r){function o(){f||null!==s.fn&&l.input!==i?f&&(null!==s.fn&&l.input!==i||""===s.def)&&(f=!1,d+="</span>"):(f=!0,d+="<span class='im-static'>")}function a(i){!0!==i&&p!==t.begin||n.activeElement!==e||(d+="<span class='im-caret' style='border-right-width: 1px;border-right-style: solid;'></span>")}var s,l,u,d="",f=!1,p=0;if(X!==i){var h=E();if(t===i?t=$(e):t.begin===i&&(t={begin:t,end:t}),!0!==r){var m=v();do{a(),g().validPositions[p]?(l=g().validPositions[p],s=l.match,u=l.locator.slice(),o(),d+=h[p]):(l=x(p,u,p-1),s=l.match,u=l.locator.slice(),(!1===c.jitMasking||p<m||"number"==typeof c.jitMasking&&isFinite(c.jitMasking)&&c.jitMasking>p)&&(o(),d+=j(p,s))),p++}while((G===i||p<G)&&(null!==s.fn||""!==s.def)||m>p||f);-1===d.indexOf("im-caret")&&a(!0),f&&o()}var y=X.getElementsByTagName("div")[0];y.innerHTML=d,e.inputmask.positionColorMask(e,y)}}s=s||this.maskset,c=c||this.opts;var z,U,G,X,V=this,K=this.el,Q=this.isRTL,Z=!1,J=!1,ee=!1,te=!1,ne={on:function(t,n,o){var a=function(t){if(this.inputmask===i&&"FORM"!==this.nodeName){var n=e.data(this,"_inputmask_opts");n?new r(n).mask(this):ne.off(this)}else{if("setvalue"===t.type||"FORM"===this.nodeName||!(this.disabled||this.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||!1===c.tabThrough&&t.keyCode===r.keyCode.TAB))){switch(t.type){case"input":if(!0===J)return J=!1,t.preventDefault();break;case"keydown":Z=!1,J=!1;break;case"keypress":if(!0===Z)return t.preventDefault();Z=!0;break;case"click":if(d||f){var a=this,s=arguments;return setTimeout(function(){o.apply(a,s)},0),!1}}var l=o.apply(this,arguments);return!1===l&&(t.preventDefault(),t.stopPropagation()),l}t.preventDefault()}};t.inputmask.events[n]=t.inputmask.events[n]||[],t.inputmask.events[n].push(a),-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).on(n,a):e(t).on(n,a)},off:function(t,n){if(t.inputmask&&t.inputmask.events){var i;n?(i=[])[n]=t.inputmask.events[n]:i=t.inputmask.events,e.each(i,function(n,i){for(;i.length>0;){var r=i.pop();-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).off(n,r):e(t).off(n,r)}delete t.inputmask.events[n]})}}},ie={keydownEvent:function(t){var i=this,o=e(i),a=t.keyCode,s=$(i);if(a===r.keyCode.BACKSPACE||a===r.keyCode.DELETE||f&&a===r.keyCode.BACKSPACE_SAFARI||t.ctrlKey&&a===r.keyCode.X&&!function(e){var t=n.createElement("input"),i="oncut"in t;return i||(t.setAttribute("oncut","return;"),i="function"==typeof t.oncut),t=null,i}())t.preventDefault(),B(i,a,s),I(i,E(!0),g().p,t,i.inputmask._valueGet()!==E().join("")),i.inputmask._valueGet()===S().join("")?o.trigger("cleared"):!0===q(E())&&o.trigger("complete");else if(a===r.keyCode.END||a===r.keyCode.PAGE_DOWN){t.preventDefault();var l=O(v());c.insertMode||l!==g().maskLength||t.shiftKey||l--,$(i,t.shiftKey?s.begin:l,l,!0)}else a===r.keyCode.HOME&&!t.shiftKey||a===r.keyCode.PAGE_UP?(t.preventDefault(),
$(i,0,t.shiftKey?s.begin:0,!0)):(c.undoOnEscape&&a===r.keyCode.ESCAPE||90===a&&t.ctrlKey)&&!0!==t.altKey?(F(i,!0,!1,z.split("")),o.trigger("click")):a!==r.keyCode.INSERT||t.shiftKey||t.ctrlKey?!0===c.tabThrough&&a===r.keyCode.TAB?(!0===t.shiftKey?(null===w(s.begin).match.fn&&(s.begin=O(s.begin)),s.end=L(s.begin,!0),s.begin=L(s.end,!0)):(s.begin=O(s.begin,!0),s.end=O(s.begin,!0),s.end<g().maskLength&&s.end--),s.begin<g().maskLength&&(t.preventDefault(),$(i,s.begin,s.end))):t.shiftKey||!1===c.insertMode&&(a===r.keyCode.RIGHT?setTimeout(function(){var e=$(i);$(i,e.begin)},0):a===r.keyCode.LEFT&&setTimeout(function(){var e=$(i);$(i,Q?e.begin+1:e.begin-1)},0)):(c.insertMode=!c.insertMode,$(i,c.insertMode||s.begin!==g().maskLength?s.begin:s.begin-1));c.onKeyDown.call(this,t,E(),$(i).begin,c),ee=-1!==e.inArray(a,c.ignorables)},keypressEvent:function(t,n,o,a,s){var l=this,u=e(l),d=t.which||t.charCode||t.keyCode;if(!(!0===n||t.ctrlKey&&t.altKey)&&(t.ctrlKey||t.metaKey||ee))return d===r.keyCode.ENTER&&z!==E().join("")&&(z=E().join(""),setTimeout(function(){u.trigger("change")},0)),!0;if(d){46===d&&!1===t.shiftKey&&""!==c.radixPoint&&(d=c.radixPoint.charCodeAt(0));var f,p=n?{begin:s,end:s}:$(l),h=String.fromCharCode(d);g().writeOutBuffer=!0;var v=M(p,h,a);if(!1!==v&&(m(!0),f=v.caret!==i?v.caret:n?v.pos+1:O(v.pos),g().p=f),!1!==o&&(setTimeout(function(){c.onKeyValidation.call(l,d,v,c)},0),g().writeOutBuffer&&!1!==v)){var y=E();I(l,y,c.numericInput&&v.caret===i?L(f):f,t,!0!==n),!0!==n&&setTimeout(function(){!0===q(y)&&u.trigger("complete")},0)}if(t.preventDefault(),n)return!1!==v&&(v.forwardPosition=f),v}},pasteEvent:function(n){var i,r=this,o=n.originalEvent||n,a=e(r),s=r.inputmask._valueGet(!0),l=$(r);Q&&(i=l.end,l.end=l.begin,l.begin=i);var u=s.substr(0,l.begin),d=s.substr(l.end,s.length);if(u===(Q?S().reverse():S()).slice(0,l.begin).join("")&&(u=""),d===(Q?S().reverse():S()).slice(l.end).join("")&&(d=""),Q&&(i=u,u=d,d=i),t.clipboardData&&t.clipboardData.getData)s=u+t.clipboardData.getData("Text")+d;else{if(!o.clipboardData||!o.clipboardData.getData)return!0;s=u+o.clipboardData.getData("text/plain")+d}var f=s;if(e.isFunction(c.onBeforePaste)){if(!1===(f=c.onBeforePaste.call(V,s,c)))return n.preventDefault();f||(f=s)}return F(r,!1,!1,Q?f.split("").reverse():f.toString().split("")),I(r,E(),O(v()),n,z!==E().join("")),!0===q(E())&&a.trigger("complete"),n.preventDefault()},inputFallBackEvent:function(t){var n=this,i=n.inputmask._valueGet();if(E().join("")!==i){var o=$(n);if(!1===function(t,n,i){if("."===n.charAt(i.begin-1)&&""!==c.radixPoint&&((n=n.split(""))[i.begin-1]=c.radixPoint.charAt(0),n=n.join("")),n.charAt(i.begin-1)===c.radixPoint&&n.length>E().length){var r=new e.Event("keypress");return r.which=c.radixPoint.charCodeAt(0),ie.keypressEvent.call(t,r,!0,!0,!1,i.begin-1),!1}}(n,i,o))return!1;if(i=i.replace(new RegExp("("+r.escapeRegex(S().join(""))+")*"),""),!1===function(t,n,i){if(d){var r=n.replace(E().join(""),"");if(1===r.length){var o=new e.Event("keypress");return o.which=r.charCodeAt(0),ie.keypressEvent.call(t,o,!0,!0,!1,g().validPositions[i.begin-1]?i.begin:i.begin-1),!1}}}(n,i,o))return!1;o.begin>i.length&&($(n,i.length),o=$(n));var a=E().join(""),s=i.substr(0,o.begin),l=i.substr(o.begin),u=a.substr(0,o.begin),f=a.substr(o.begin),p=o,h="",m=!1;if(s!==u){p.begin=0;for(var v=(m=s.length>=u.length)?s.length:u.length,y=0;s.charAt(y)===u.charAt(y)&&y<v;y++)p.begin++;m&&(h+=s.slice(p.begin,p.end))}l!==f&&(l.length>f.length?m&&(p.end=p.begin):l.length<f.length?p.end+=f.length-l.length:l.charAt(0)!==f.charAt(0)&&p.end++),I(n,E(),p),h.length>0?e.each(h.split(""),function(t,i){var r=new e.Event("keypress");r.which=i.charCodeAt(0),ee=!1,ie.keypressEvent.call(n,r)}):(p.begin===p.end-1&&$(n,L(p.begin+1),p.end),t.keyCode=r.keyCode.DELETE,ie.keydownEvent.call(n,t)),t.preventDefault()}},setValueEvent:function(t){this.inputmask.refreshValue=!1;var n=this,i=n.inputmask._valueGet(!0);e.isFunction(c.onBeforeMask)&&(i=c.onBeforeMask.call(V,i,c)||i),i=i.split(""),F(n,!0,!1,Q?i.reverse():i),z=E().join(""),(c.clearMaskOnLostFocus||c.clearIncomplete)&&n.inputmask._valueGet()===S().join("")&&n.inputmask._valueSet("")},focusEvent:function(e){var t=this,n=t.inputmask._valueGet();c.showMaskOnFocus&&(!c.showMaskOnHover||c.showMaskOnHover&&""===n)&&(t.inputmask._valueGet()!==E().join("")?I(t,E(),O(v())):!1===te&&$(t,O(v()))),!0===c.positionCaretOnTab&&!1===te&&""!==n&&(I(t,E(),$(t)),ie.clickEvent.apply(t,[e,!0])),z=E().join("")},mouseleaveEvent:function(e){var t=this;if(te=!1,c.clearMaskOnLostFocus&&n.activeElement!==t){var i=E().slice(),r=t.inputmask._valueGet();r!==t.getAttribute("placeholder")&&""!==r&&(-1===v()&&r===S().join("")?i=[]:H(i),I(t,i))}},clickEvent:function(t,r){function o(t){if(""!==c.radixPoint){var n=g().validPositions;if(n[t]===i||n[t].input===j(t)){if(t<O(-1))return!0;var r=e.inArray(c.radixPoint,E());if(-1!==r){for(var o in n)if(r<o&&n[o].input!==j(o))return!1;return!0}}}return!1}var a=this;setTimeout(function(){if(n.activeElement===a){var e=$(a);if(r&&(Q?e.end=e.begin:e.begin=e.end),e.begin===e.end)switch(c.positionCaretOnClick){case"none":break;case"radixFocus":if(o(e.begin)){var t=E().join("").indexOf(c.radixPoint);$(a,c.numericInput?O(t):t);break}default:var s=e.begin,l=v(s,!0),u=O(l);if(s<u)$(a,A(s,!0)||A(s-1,!0)?s:O(s));else{var d=g().validPositions[l],f=x(u,d?d.match.locator:i,d),p=j(u,f.match);if(""!==p&&E()[u]!==p&&!0!==f.match.optionalQuantifier&&!0!==f.match.newBlockMarker||!A(u,!0)&&f.match.def===p){var h=O(u);(s>=h||s===u)&&(u=h)}$(a,u)}}}},0)},dblclickEvent:function(e){var t=this;setTimeout(function(){$(t,0,O(v()))},0)},cutEvent:function(i){var o=this,a=e(o),s=$(o),l=i.originalEvent||i,c=t.clipboardData||l.clipboardData,u=Q?E().slice(s.end,s.begin):E().slice(s.begin,s.end);c.setData("text",Q?u.reverse().join(""):u.join("")),n.execCommand&&n.execCommand("copy"),B(o,r.keyCode.DELETE,s),I(o,E(),g().p,i,z!==E().join("")),o.inputmask._valueGet()===S().join("")&&a.trigger("cleared")},blurEvent:function(t){var n=e(this),r=this;if(r.inputmask){var o=r.inputmask._valueGet(),a=E().slice();""!==o&&(c.clearMaskOnLostFocus&&(-1===v()&&o===S().join("")?a=[]:H(a)),!1===q(a)&&(setTimeout(function(){n.trigger("incomplete")},0),c.clearIncomplete&&(m(),a=c.clearMaskOnLostFocus?[]:S().slice())),I(r,a,i,t)),z!==E().join("")&&(z=a.join(""),n.trigger("change"))}},mouseenterEvent:function(e){var t=this;te=!0,n.activeElement!==t&&c.showMaskOnHover&&t.inputmask._valueGet()!==E().join("")&&I(t,E())},submitEvent:function(e){z!==E().join("")&&U.trigger("change"),c.clearMaskOnLostFocus&&-1===v()&&K.inputmask._valueGet&&K.inputmask._valueGet()===S().join("")&&K.inputmask._valueSet(""),c.removeMaskOnSubmit&&(K.inputmask._valueSet(K.inputmask.unmaskedvalue(),!0),setTimeout(function(){I(K,E())},0))},resetEvent:function(e){K.inputmask.refreshValue=!0,setTimeout(function(){U.trigger("setvalue")},0)}};r.prototype.positionColorMask=function(e,t){e.style.left=t.offsetLeft+"px"};var re;if(o!==i)switch(o.action){case"isComplete":return K=o.el,q(E());case"unmaskedvalue":return K!==i&&o.value===i||(re=o.value,re=(e.isFunction(c.onBeforeMask)?c.onBeforeMask.call(V,re,c)||re:re).split(""),F(i,!1,!1,Q?re.reverse():re),e.isFunction(c.onBeforeWrite)&&c.onBeforeWrite.call(V,i,E(),0,c)),R(K);case"mask":!function(t){ne.off(t);var r=function(t,r){var o=t.getAttribute("type"),s="INPUT"===t.tagName&&-1!==e.inArray(o,r.supportsInputType)||t.isContentEditable||"TEXTAREA"===t.tagName;if(!s)if("INPUT"===t.tagName){var l=n.createElement("input");l.setAttribute("type",o),s="text"===l.type,l=null}else s="partial";return!1!==s?function(t){function o(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==v()||!0!==r.nullable?n.activeElement===this&&r.clearMaskOnLostFocus?(Q?H(E().slice()).reverse():H(E().slice())).join(""):l.call(this):"":l.call(this)}function s(t){c.call(this,t),this.inputmask&&e(this).trigger("setvalue")}var l,c;if(!t.inputmask.__valueGet){if(!0!==r.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"===a("test".__proto__)?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var u=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):i;u&&u.get&&u.set?(l=u.get,c=u.set,Object.defineProperty(t,"value",{get:o,set:s,configurable:!0})):"INPUT"!==t.tagName&&(l=function(){return this.textContent},c=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:o,set:s,configurable:!0}))}else n.__lookupGetter__&&t.__lookupGetter__("value")&&(l=t.__lookupGetter__("value"),c=t.__lookupSetter__("value"),t.__defineGetter__("value",o),t.__defineSetter__("value",s));t.inputmask.__valueGet=l,t.inputmask.__valueSet=c}t.inputmask._valueGet=function(e){return Q&&!0!==e?l.call(this.el).split("").reverse().join(""):l.call(this.el)},t.inputmask._valueSet=function(e,t){c.call(this.el,null===e||e===i?"":!0!==t&&Q?e.split("").reverse().join(""):e)},l===i&&(l=function(){return this.value},c=function(e){this.value=e},function(t){if(e.valHooks&&(e.valHooks[t]===i||!0!==e.valHooks[t].inputmaskpatch)){var n=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},o=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=n(e);return-1!==v(i,i,e.inputmask.maskset.validPositions)||!0!==r.nullable?t:""}return n(e)},set:function(t,n){var i,r=e(t);return i=o(t,n),t.inputmask&&r.trigger("setvalue"),i},inputmaskpatch:!0}}}(t.type),function(t){ne.on(t,"mouseenter",function(t){var n=e(this);this.inputmask._valueGet()!==E().join("")&&n.trigger("setvalue")})}(t))}}(t):t.inputmask=i,s}(t,c);if(!1!==r&&(K=t,U=e(K),-1===(G=K!==i?K.maxLength:i)&&(G=i),!0===c.colorMask&&Y(K),p&&(K.hasOwnProperty("inputmode")&&(K.inputmode=c.inputmode,K.setAttribute("inputmode",c.inputmode)),"rtfm"===c.androidHack&&(!0!==c.colorMask&&Y(K),K.type="password")),!0===r&&(ne.on(K,"submit",ie.submitEvent),ne.on(K,"reset",ie.resetEvent),ne.on(K,"mouseenter",ie.mouseenterEvent),ne.on(K,"blur",ie.blurEvent),ne.on(K,"focus",ie.focusEvent),ne.on(K,"mouseleave",ie.mouseleaveEvent),!0!==c.colorMask&&ne.on(K,"click",ie.clickEvent),ne.on(K,"dblclick",ie.dblclickEvent),ne.on(K,"paste",ie.pasteEvent),ne.on(K,"dragdrop",ie.pasteEvent),ne.on(K,"drop",ie.pasteEvent),ne.on(K,"cut",ie.cutEvent),ne.on(K,"complete",c.oncomplete),ne.on(K,"incomplete",c.onincomplete),ne.on(K,"cleared",c.oncleared),p||!0===c.inputEventOnly?K.removeAttribute("maxLength"):(ne.on(K,"keydown",ie.keydownEvent),ne.on(K,"keypress",ie.keypressEvent)),ne.on(K,"compositionstart",e.noop),ne.on(K,"compositionupdate",e.noop),ne.on(K,"compositionend",e.noop),ne.on(K,"keyup",e.noop),ne.on(K,"input",ie.inputFallBackEvent),ne.on(K,"beforeinput",e.noop)),ne.on(K,"setvalue",ie.setValueEvent),z=S().join(""),""!==K.inputmask._valueGet(!0)||!1===c.clearMaskOnLostFocus||n.activeElement===K)){var o=e.isFunction(c.onBeforeMask)?c.onBeforeMask.call(V,K.inputmask._valueGet(!0),c)||K.inputmask._valueGet(!0):K.inputmask._valueGet(!0);""!==o&&F(K,!0,!1,Q?o.split("").reverse():o.split(""));var s=E().slice();z=s.join(""),!1===q(s)&&c.clearIncomplete&&m(),c.clearMaskOnLostFocus&&n.activeElement!==K&&(-1===v()?s=[]:H(s)),I(K,s),n.activeElement===K&&$(K,O(v()))}}(K);break;case"format":return re=(e.isFunction(c.onBeforeMask)?c.onBeforeMask.call(V,o.value,c)||o.value:o.value).split(""),F(i,!0,!1,Q?re.reverse():re),o.metadata?{value:Q?E().slice().reverse().join(""):E().join(""),metadata:l.call(this,{action:"getmetadata"},s,c)}:Q?E().slice().reverse().join(""):E().join("");case"isValid":o.value?(re=o.value.split(""),F(i,!0,!0,Q?re.reverse():re)):o.value=E().join("");for(var oe=E(),ae=_(),se=oe.length-1;se>ae&&!A(se);se--);return oe.splice(ae,se+1-ae),q(oe)&&o.value===E().join("");case"getemptymask":return S().join("");case"remove":return K&&K.inputmask&&(U=e(K),K.inputmask._valueSet(c.autoUnmask?R(K):K.inputmask._valueGet(!0)),ne.off(K),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(K),"value")&&K.inputmask.__valueGet&&Object.defineProperty(K,"value",{get:K.inputmask.__valueGet,set:K.inputmask.__valueSet,configurable:!0}):n.__lookupGetter__&&K.__lookupGetter__("value")&&K.inputmask.__valueGet&&(K.__defineGetter__("value",K.inputmask.__valueGet),K.__defineSetter__("value",K.inputmask.__valueSet)),K.inputmask=i),K;case"getmetadata":if(e.isArray(s.metadata)){var le=h(!0,0,!1).join("");return e.each(s.metadata,function(e,t){if(t.mask===le)return le=t,!1}),le}return s.metadata}}var c=navigator.userAgent,u=/mobile/i.test(c),d=/iemobile/i.test(c),f=/iphone/i.test(c)&&!d,p=/android/i.test(c)&&!d;return r.prototype={dataAttribute:"data-inputmask",defaults:{placeholder:"_",optionalmarker:{start:"[",end:"]"},quantifiermarker:{start:"{",end:"}"},groupmarker:{start:"(",end:")"},alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!0,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,n){return e.isFunction(n.onBeforeMask)?n.onBeforeMask.call(this,t,n):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:e.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",radixPointDefinitionSymbol:i,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","password"],ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,canClearPosition:e.noop,preValidation:null,postValidation:null,staticDefinitionSymbol:i,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"verbatim",colorMask:!1,androidHack:!1,importDataAttributes:!0},definitions:{9:{validator:"[0-9１-９]",cardinality:1,definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,definitionSymbol:"*"},"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]",cardinality:1}},aliases:{},masksCache:{},mask:function(a){function c(n,r,a,s){if(!0===r.importDataAttributes){var l,c,u,d,f=function(e,r){null!==(r=r!==i?r:n.getAttribute(s+"-"+e))&&("string"==typeof r&&(0===e.indexOf("on")?r=t[r]:"false"===r?r=!1:"true"===r&&(r=!0)),a[e]=r)},p=n.getAttribute(s);if(p&&""!==p&&(p=p.replace(new RegExp("'","g"),'"'),c=JSON.parse("{"+p+"}")),c){u=i;for(d in c)if("alias"===d.toLowerCase()){u=c[d];break}}f("alias",u),a.alias&&o(a.alias,a,r);for(l in r){if(c){u=i;for(d in c)if(d.toLowerCase()===l.toLowerCase()){u=c[d];break}}f(l,u)}}return e.extend(!0,r,a),("rtl"===n.dir||r.rightAlign)&&(n.style.textAlign="right"),("rtl"===n.dir||r.numericInput)&&(n.dir="ltr",n.removeAttribute("dir"),r.isRTL=!0),r}var u=this;return"string"==typeof a&&(a=n.getElementById(a)||n.querySelectorAll(a)),a=a.nodeName?[a]:a,e.each(a,function(t,n){var o=e.extend(!0,{},u.opts);c(n,o,e.extend(!0,{},u.userOptions),u.dataAttribute);var a=s(o,u.noMasksCache);a!==i&&(n.inputmask!==i&&(n.inputmask.opts.autoUnmask=!0,n.inputmask.remove()),n.inputmask=new r(i,i,!0),n.inputmask.opts=o,n.inputmask.noMasksCache=u.noMasksCache,n.inputmask.userOptions=e.extend(!0,{},u.userOptions),n.inputmask.isRTL=o.isRTL||o.numericInput,n.inputmask.el=n,n.inputmask.maskset=a,e.data(n,"_inputmask_opts",o),l.call(n.inputmask,{action:"mask"}))}),a&&a[0]?a[0].inputmask||this:this},option:function(t,n){return"string"==typeof t?this.opts[t]:"object"===(void 0===t?"undefined":a(t))?(e.extend(this.userOptions,t),this.el&&!0!==n&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return l.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"format",value:e,metadata:t})},analyseMask:function(t,n,o){function a(e,t,n,i){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=i||!1,this.quantifier={min:1,max:1}}function s(t,a,s){s=s!==i?s:t.matches.length;var l=t.matches[s-1];if(n)0===a.indexOf("[")||x&&/\\d|\\s|\\w]/i.test(a)||"."===a?t.matches.splice(s++,0,{fn:new RegExp(a,o.casing?"i":""),cardinality:1,optionality:t.isOptional,newBlockMarker:l===i||l.def!==a,casing:null,def:a,placeholder:i,nativeDef:a}):(x&&(a=a[a.length-1]),e.each(a.split(""),function(e,n){l=t.matches[s-1],t.matches.splice(s++,0,{fn:null,cardinality:0,optionality:t.isOptional,newBlockMarker:l===i||l.def!==n&&null!==l.fn,casing:null,def:o.staticDefinitionSymbol||n,placeholder:o.staticDefinitionSymbol!==i?n:i,nativeDef:n})})),x=!1;else{var c=(o.definitions?o.definitions[a]:i)||r.prototype.definitions[a];if(c&&!x){for(var u=c.prevalidator,d=u?u.length:0,f=1;f<c.cardinality;f++){var p=d>=f?u[f-1]:[],h=p.validator,g=p.cardinality;t.matches.splice(s++,0,{fn:h?"string"==typeof h?new RegExp(h,o.casing?"i":""):new function(){this.test=h}:new RegExp("."),cardinality:g||1,optionality:t.isOptional,newBlockMarker:l===i||l.def!==(c.definitionSymbol||a),casing:c.casing,def:c.definitionSymbol||a,placeholder:c.placeholder,nativeDef:a}),l=t.matches[s-1]}t.matches.splice(s++,0,{fn:c.validator?"string"==typeof c.validator?new RegExp(c.validator,o.casing?"i":""):new function(){this.test=c.validator}:new RegExp("."),cardinality:c.cardinality,optionality:t.isOptional,newBlockMarker:l===i||l.def!==(c.definitionSymbol||a),casing:c.casing,def:c.definitionSymbol||a,placeholder:c.placeholder,nativeDef:a})}else t.matches.splice(s++,0,{fn:null,cardinality:0,optionality:t.isOptional,newBlockMarker:l===i||l.def!==a&&null!==l.fn,casing:null,def:o.staticDefinitionSymbol||a,placeholder:o.staticDefinitionSymbol!==i?a:i,nativeDef:a}),x=!1}}function l(t){t&&t.matches&&e.each(t.matches,function(e,r){var a=t.matches[e+1];(a===i||a.matches===i||!1===a.isQuantifier)&&r&&r.isGroup&&(r.isGroup=!1,n||(s(r,o.groupmarker.start,0),!0!==r.openGroup&&s(r,o.groupmarker.end))),l(r)})}function c(){if(k.length>0){if(h=k[k.length-1],s(h,f),h.isAlternator){g=k.pop();for(var e=0;e<g.matches.length;e++)g.matches[e].isGroup=!1;k.length>0?(h=k[k.length-1]).matches.push(g):w.matches.push(g)}}else s(w,f)}function u(e){e.matches=e.matches.reverse();for(var t in e.matches)if(e.matches.hasOwnProperty(t)){var n=parseInt(t);if(e.matches[t].isQuantifier&&e.matches[n+1]&&e.matches[n+1].isGroup){var r=e.matches[t];e.matches.splice(t,1),e.matches.splice(n+1,0,r)}e.matches[t].matches!==i?e.matches[t]=u(e.matches[t]):e.matches[t]=function(e){return e===o.optionalmarker.start?e=o.optionalmarker.end:e===o.optionalmarker.end?e=o.optionalmarker.start:e===o.groupmarker.start?e=o.groupmarker.end:e===o.groupmarker.end&&(e=o.groupmarker.start),e}(e.matches[t])}return e}var d,f,p,h,g,m,v,y=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,b=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,x=!1,w=new a,k=[],C=[];for(n&&(o.optionalmarker.start=i,o.optionalmarker.end=i);d=n?b.exec(t):y.exec(t);){if(f=d[0],n)switch(f.charAt(0)){case"?":f="{0,1}";break;case"+":case"*":f="{"+f+"}"}if(x)c();else switch(f.charAt(0)){case o.escapeChar:x=!0,n&&c();break;case o.optionalmarker.end:case o.groupmarker.end:if(p=k.pop(),p.openGroup=!1,p!==i)if(k.length>0){if((h=k[k.length-1]).matches.push(p),h.isAlternator){g=k.pop();for(var S=0;S<g.matches.length;S++)g.matches[S].isGroup=!1,g.matches[S].alternatorGroup=!1;k.length>0?(h=k[k.length-1]).matches.push(g):w.matches.push(g)}}else w.matches.push(p);else c();break;case o.optionalmarker.start:k.push(new a(!1,!0));break;case o.groupmarker.start:k.push(new a(!0));break;case o.quantifiermarker.start:var E=new a(!1,!1,!0),T=(f=f.replace(/[{}]/g,"")).split(","),P=isNaN(T[0])?T[0]:parseInt(T[0]),D=1===T.length?P:isNaN(T[1])?T[1]:parseInt(T[1]);if("*"!==D&&"+"!==D||(P="*"===D?0:1),E.quantifier={min:P,max:D},k.length>0){var M=k[k.length-1].matches;(d=M.pop()).isGroup||((v=new a(!0)).matches.push(d),d=v),M.push(d),M.push(E)}else(d=w.matches.pop()).isGroup||(n&&null===d.fn&&"."===d.def&&(d.fn=new RegExp(d.def,o.casing?"i":"")),(v=new a(!0)).matches.push(d),d=v),w.matches.push(d),w.matches.push(E);break;case o.alternatormarker:if(k.length>0){var A=(h=k[k.length-1]).matches[h.matches.length-1];m=h.openGroup&&(A.matches===i||!1===A.isGroup&&!1===A.isAlternator)?k.pop():h.matches.pop()}else m=w.matches.pop();if(m.isAlternator)k.push(m);else if(m.alternatorGroup?(g=k.pop(),m.alternatorGroup=!1):g=new a(!1,!1,!1,!0),g.matches.push(m),k.push(g),m.openGroup){m.openGroup=!1;var O=new a(!0);O.alternatorGroup=!0,k.push(O)}break;default:c()}}for(;k.length>0;)p=k.pop(),w.matches.push(p);return w.matches.length>0&&(l(w),C.push(w)),(o.numericInput||o.isRTL)&&u(C[0]),C}},r.extendDefaults=function(t){e.extend(!0,r.prototype.defaults,t)},r.extendDefinitions=function(t){e.extend(!0,r.prototype.definitions,t)},r.extendAliases=function(t){e.extend(!0,r.prototype.aliases,t)},r.format=function(e,t,n){return r(t).format(e,n)},r.unmask=function(e,t){return r(t).unmaskedvalue(e)},r.isValid=function(e,t){return r(t).isValid(e)},r.remove=function(t){e.each(t,function(e,t){t.inputmask&&t.inputmask.remove()})},r.escapeRegex=function(e){var t=["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"];return e.replace(new RegExp("(\\"+t.join("|\\")+")","gim"),"\\$1")},r.keyCode={ALT:18,BACKSPACE:8,BACKSPACE_SAFARI:127,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91,X:88},r})},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}n(4),n(9),n(12),n(13),n(14),n(15);var r=i(n(1)),o=i(n(0)),a=i(n(2));o.default===a.default&&n(16),window.Inputmask=r.default},function(e,t,n){var i=n(5);"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0};r.transform=void 0,n(7)(i,r),i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(6)(void 0)).push([e.i,".im-caret {\r\n\t-webkit-animation: 1s blink step-end infinite;\r\n\tanimation: 1s blink step-end infinite;\r\n}\r\n\r\n@keyframes blink {\r\n\tfrom, to {\r\n\t\tborder-right-color: black;\r\n\t}\r\n\t50% {\r\n\t\tborder-right-color: transparent;\r\n\t}\r\n}\r\n\r\n@-webkit-keyframes blink {\r\n\tfrom, to {\r\n\t\tborder-right-color: black;\r\n\t}\r\n\t50% {\r\n\t\tborder-right-color: transparent;\r\n\t}\r\n}\r\n\r\n.im-static {\r\n\tcolor: grey;\r\n}\r\n",""])},function(e,t){function n(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=i(r);return[n].concat(r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"})).concat([o]).join("\n")}return[n].join("\n")}function i(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var i=n(t,e);return t[2]?"@media "+t[2]+"{"+i+"}":i}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},r=0;r<this.length;r++){var o=this[r][0];"number"==typeof o&&(i[o]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&i[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){function i(e,t){for(var n=0;n<e.length;n++){var i=e[n],r=h[i.id];if(r){for(r.refs++,a=0;a<r.parts.length;a++)r.parts[a](i.parts[a]);for(;a<i.parts.length;a++)r.parts.push(u(i.parts[a],t))}else{for(var o=[],a=0;a<i.parts.length;a++)o.push(u(i.parts[a],t));h[i.id]={id:i.id,refs:1,parts:o}}}}function r(e,t){for(var n=[],i={},r=0;r<e.length;r++){var o=e[r],a=t.base?o[0]+t.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};i[a]?i[a].parts.push(s):n.push(i[a]={id:a,parts:[s]})}return n}function o(e,t){var n=m(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=b[b.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),b.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=m(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=b.indexOf(e);t>=0&&b.splice(t,1)}function s(e){var t=document.createElement("style");return e.attrs.type="text/css",c(t,e.attrs),o(e,t),t}function l(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",c(t,e.attrs),o(e,t),t}function c(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function u(e,t){var n,i,r,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var c=y++;n=v||(v=s(t)),i=d.bind(null,n,c,!1),r=d.bind(null,n,c,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=l(t),i=p.bind(null,n,t),r=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(t),i=f.bind(null,n),r=function(){a(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}function d(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=w(t,r);else{var o=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t){var n=t.css,i=t.media;if(i&&e.setAttribute("media",i),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function p(e,t,n){var i=n.css,r=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||o)&&(i=x(i)),r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([i],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var h={},g=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),m=function(e){var t={};return function(n){if(void 0===t[n]){var i=e.call(this,n);if(i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}t[n]=i}return t[n]}}(function(e){return document.querySelector(e)}),v=null,y=0,b=[],x=n(8);e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=g()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=r(e,t);return i(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var s=n[a];(l=h[s.id]).refs--,o.push(l)}for(e&&i(r(e,t),t),a=0;a<o.length;a++){var l=o[a];if(0===l.refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete h[l.id]}}}};var w=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(r))return e;var o;return o=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(o)+")"})}},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,function(a){r=[n(0),n(1)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t){function n(e){return isNaN(e)||29===new Date(e,2,0).getDate()}return t.extendAliases({"dd/mm/yyyy":{mask:"1/2/y",placeholder:"dd/mm/yyyy",regex:{val1pre:new RegExp("[0-3]"),val1:new RegExp("0[1-9]|[12][0-9]|3[01]"),val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9]|3[01])"+n+"[01])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9])"+n+"(0[1-9]|1[012]))|(30"+n+"(0[13-9]|1[012]))|(31"+n+"(0[13578]|1[02]))")}},leapday:"29/02/",separator:"/",yearrange:{minyear:1900,maxyear:2099},isInYearRange:function(e,t,n){if(isNaN(e))return!1;var i=parseInt(e.concat(t.toString().slice(e.length))),r=parseInt(e.concat(n.toString().slice(e.length)));return!isNaN(i)&&t<=i&&i<=n||!isNaN(r)&&t<=r&&r<=n},determinebaseyear:function(e,t,n){var i=(new Date).getFullYear();if(e>i)return e;if(t<i){for(var r=t.toString().slice(0,2),o=t.toString().slice(2,4);t<r+n;)r--;var a=r+o;return e>a?e:a}if(e<=i&&i<=t){for(var s=i.toString().slice(0,2);t<s+n;)s--;var l=s+n;return l<e?e:l}return i},onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val(s.getDate().toString()+(s.getMonth()+1).toString()+s.getFullYear().toString()),a.trigger("setvalue")}},getFrontValue:function(e,t,n){for(var i=0,r=0,o=0;o<e.length&&"2"!==e.charAt(o);o++){var a=n.definitions[e.charAt(o)];a?(i+=r,r=a.cardinality):r++}return t.join("").substr(i,r)},postValidation:function(e,t,i){var r,o,a=e.join("");return 0===i.mask.indexOf("y")?(o=a.substr(0,4),r=a.substring(4,10)):(o=a.substring(6,10),r=a.substr(0,6)),t&&(r!==i.leapday||n(o))},definitions:{1:{validator:function(e,t,n,i,r){var o=r.regex.val1.test(e);return i||o||e.charAt(1)!==r.separator&&-1==="-./".indexOf(e.charAt(1))||!(o=r.regex.val1.test("0"+e.charAt(0)))?o:(t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)})},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=e;isNaN(t.buffer[n+1])||(o+=t.buffer[n+1]);var a=1===o.length?r.regex.val1pre.test(o):r.regex.val1.test(o);if(a&&t.validPositions[n]&&(r.regex.val2(r.separator).test(e+t.validPositions[n].input)||(t.validPositions[n].input="0"===e?"1":"0")),!i&&!a){if(a=r.regex.val1.test(e+"0"))return t.buffer[n]=e,t.buffer[++n]="0",{pos:n,c:"0"};if(a=r.regex.val1.test("0"+e))return t.buffer[n]="0",n++,{pos:n}}return a},cardinality:1}]},2:{validator:function(e,t,n,i,r){var o=r.getFrontValue(t.mask,t.buffer,r);-1!==o.indexOf(r.placeholder[0])&&(o="01"+r.separator);var a=r.regex.val2(r.separator).test(o+e)
;return i||a||e.charAt(1)!==r.separator&&-1==="-./".indexOf(e.charAt(1))||!(a=r.regex.val2(r.separator).test(o+"0"+e.charAt(0)))?a:(t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)})},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){isNaN(t.buffer[n+1])||(e+=t.buffer[n+1]);var o=r.getFrontValue(t.mask,t.buffer,r);-1!==o.indexOf(r.placeholder[0])&&(o="01"+r.separator);var a=1===e.length?r.regex.val2pre(r.separator).test(o+e):r.regex.val2(r.separator).test(o+e);return a&&t.validPositions[n]&&(r.regex.val2(r.separator).test(e+t.validPositions[n].input)||(t.validPositions[n].input="0"===e?"1":"0")),i||a||!(a=r.regex.val2(r.separator).test(o+"0"+e))?a:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},y:{validator:function(e,t,n,i,r){return r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear)},cardinality:4,prevalidator:[{validator:function(e,t,n,i,r){var o=r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear);if(!i&&!o){var a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e+"0").toString().slice(0,1);if(o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(0),{pos:n};if(a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e+"0").toString().slice(0,2),o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(0),t.buffer[n++]=a.charAt(1),{pos:n}}return o},cardinality:1},{validator:function(e,t,n,i,r){var o=r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear);if(!i&&!o){var a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e).toString().slice(0,2);if(o=r.isInYearRange(e[0]+a[1]+e[1],r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(1),{pos:n};if(a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e).toString().slice(0,2),o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n-1]=a.charAt(0),t.buffer[n++]=a.charAt(1),t.buffer[n++]=e.charAt(0),{refreshFromBuffer:{start:n-3,end:n},pos:n}}return o},cardinality:2},{validator:function(e,t,n,i,r){return r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear)},cardinality:3}]}},insertMode:!1,autoUnmask:!1},"mm/dd/yyyy":{placeholder:"mm/dd/yyyy",alias:"dd/mm/yyyy",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val((s.getMonth()+1).toString()+s.getDate().toString()+s.getFullYear().toString()),a.trigger("setvalue")}}},"yyyy/mm/dd":{mask:"y/1/2",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",leapday:"/02/29",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val(s.getFullYear().toString()+(s.getMonth()+1).toString()+s.getDate().toString()),a.trigger("setvalue")}}},"dd.mm.yyyy":{mask:"1.2.y",placeholder:"dd.mm.yyyy",leapday:"29.02.",separator:".",alias:"dd/mm/yyyy"},"dd-mm-yyyy":{mask:"1-2-y",placeholder:"dd-mm-yyyy",leapday:"29-02-",separator:"-",alias:"dd/mm/yyyy"},"mm.dd.yyyy":{mask:"1.2.y",placeholder:"mm.dd.yyyy",leapday:"02.29.",separator:".",alias:"mm/dd/yyyy"},"mm-dd-yyyy":{mask:"1-2-y",placeholder:"mm-dd-yyyy",leapday:"02-29-",separator:"-",alias:"mm/dd/yyyy"},"yyyy.mm.dd":{mask:"y.1.2",placeholder:"yyyy.mm.dd",leapday:".02.29",separator:".",alias:"yyyy/mm/dd"},"yyyy-mm-dd":{mask:"y-1-2",placeholder:"yyyy-mm-dd",leapday:"-02-29",separator:"-",alias:"yyyy/mm/dd"},datetime:{mask:"1/2/y h:s",placeholder:"dd/mm/yyyy hh:mm",alias:"dd/mm/yyyy",regex:{hrspre:new RegExp("[012]"),hrs24:new RegExp("2[0-4]|1[3-9]"),hrs:new RegExp("[01][0-9]|2[0-4]"),ampm:new RegExp("^[a|p|A|P][m|M]"),mspre:new RegExp("[0-5]"),ms:new RegExp("[0-5][0-9]")},timeseparator:":",hourFormat:"24",definitions:{h:{validator:function(e,t,n,i,r){if("24"===r.hourFormat&&24===parseInt(e,10))return t.buffer[n-1]="0",t.buffer[n]="0",{refreshFromBuffer:{start:n-1,end:n},c:"0"};var o=r.regex.hrs.test(e);if(!i&&!o&&(e.charAt(1)===r.timeseparator||-1!=="-.:".indexOf(e.charAt(1)))&&(o=r.regex.hrs.test("0"+e.charAt(0))))return t.buffer[n-1]="0",t.buffer[n]=e.charAt(0),n++,{refreshFromBuffer:{start:n-2,end:n},pos:n,c:r.timeseparator};if(o&&"24"!==r.hourFormat&&r.regex.hrs24.test(e)){var a=parseInt(e,10);return 24===a?(t.buffer[n+5]="a",t.buffer[n+6]="m"):(t.buffer[n+5]="p",t.buffer[n+6]="m"),(a-=12)<10?(t.buffer[n]=a.toString(),t.buffer[n-1]="0"):(t.buffer[n]=a.toString().charAt(1),t.buffer[n-1]=a.toString().charAt(0)),{refreshFromBuffer:{start:n-1,end:n+6},c:t.buffer[n]}}return o},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=r.regex.hrspre.test(e);return i||o||!(o=r.regex.hrs.test("0"+e))?o:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=r.regex.mspre.test(e);return i||o||!(o=r.regex.ms.test("0"+e))?o:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},t:{validator:function(e,t,n,i,r){return r.regex.ampm.test(e+"m")},casing:"lower",cardinality:1}},insertMode:!1,autoUnmask:!1},datetime12:{mask:"1/2/y h:s t\\m",placeholder:"dd/mm/yyyy hh:mm xm",alias:"datetime",hourFormat:"12"},"mm/dd/yyyy hh:mm xm":{mask:"1/2/y h:s t\\m",placeholder:"mm/dd/yyyy hh:mm xm",alias:"datetime12",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val((s.getMonth()+1).toString()+s.getDate().toString()+s.getFullYear().toString()),a.trigger("setvalue")}}},"hh:mm t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"h:s t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"hh:mm:ss":{mask:"h:s:s",placeholder:"hh:mm:ss",alias:"datetime",autoUnmask:!1},"hh:mm":{mask:"h:s",placeholder:"hh:mm",alias:"datetime",autoUnmask:!1},date:{alias:"dd/mm/yyyy"},"mm/yyyy":{mask:"1/y",placeholder:"mm/yyyy",leapday:"donotuse",separator:"/",alias:"mm/dd/yyyy"},shamsi:{regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"[0-3])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[1-9]|1[012])"+n+"30)|((0[1-6])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},yearrange:{minyear:1300,maxyear:1499},mask:"y/1/2",leapday:"/12/30",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",clearIncomplete:!0},"yyyy-mm-dd hh:mm:ss":{mask:"y-1-2 h:s:s",placeholder:"yyyy-mm-dd hh:mm:ss",alias:"datetime",separator:"-",leapday:"-02-29",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},onKeyDown:function(e,t,n,i){}}}),t})},function(e,t,n){"use strict";var i;"function"==typeof Symbol&&Symbol.iterator,void 0!==(i=function(){return window}.call(t,n,t,e))&&(e.exports=i)},function(e,t,n){"use strict";var i;"function"==typeof Symbol&&Symbol.iterator,void 0!==(i=function(){return document}.call(t,n,t,e))&&(e.exports=i)},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,function(a){r=[n(0),n(1)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t){return t.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"#":{validator:"[0-9A-Fa-f]",cardinality:1,casing:"upper"}}),t.extendAliases({url:{definitions:{i:{validator:".",cardinality:1}},mask:"(\\http://)|(\\http\\s://)|(ftp://)|(ftp\\s://)i{+}",insertMode:!1,autoUnmask:!1,inputmode:"url"},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,n,i,r){return n-1>-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,e=n-2>-1&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):e="00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)},cardinality:1}},onUnMask:function(e,t,n){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",cardinality:1,casing:"lower"},"-":{validator:"[0-9A-Za-z-]",cardinality:1,casing:"lower"}},onUnMask:function(e,t,n){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",cardinality:1,casing:"upper"}},clearIncomplete:!0,autoUnmask:!0}}),t})},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,function(a){r=[n(0),n(1)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t,n){function i(e,n){for(var i="",r=0;r<e.length;r++)t.prototype.definitions[e.charAt(r)]||n.definitions[e.charAt(r)]||n.optionalmarker.start===e.charAt(r)||n.optionalmarker.end===e.charAt(r)||n.quantifiermarker.start===e.charAt(r)||n.quantifiermarker.end===e.charAt(r)||n.groupmarker.start===e.charAt(r)||n.groupmarker.end===e.charAt(r)||n.alternatormarker===e.charAt(r)?i+="\\"+e.charAt(r):i+=e.charAt(r);return i}return t.extendAliases({numeric:{mask:function(e){if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=n),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var t=Math.floor(e.integerDigits/e.groupSize),r=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===r?t-1:t),e.integerDigits<1&&(e.integerDigits="*")}e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&!1===e.integerOptional&&(e.positionCaretOnClick="lvp"),e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",!0===e.numericInput&&(e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var o="[+]";if(o+=i(e.prefix,e),!0===e.integerOptional?o+="~{1,"+e.integerDigits+"}":o+="~{"+e.integerDigits+"}",e.digits!==n){e.radixPointDefinitionSymbol=e.decimalProtect?":":e.radixPoint;var a=e.digits.toString().split(",");isFinite(a[0]&&a[1]&&isFinite(a[1]))?o+=e.radixPointDefinitionSymbol+";{"+e.digits+"}":(isNaN(e.digits)||parseInt(e.digits)>0)&&(e.digitsOptional?o+="["+e.radixPointDefinitionSymbol+";{1,"+e.digits+"}]":o+=e.radixPointDefinitionSymbol+";{"+e.digits+"}")}return o+=i(e.suffix,e),o+="[-]",e.greedy=!1,o},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",groupSize:3,groupSeparator:"",autoGroup:!1,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,inputmode:"numeric",preValidation:function(t,i,r,o,a){if("-"===r||r===a.negationSymbol.front)return!0===a.allowMinus&&(a.isNegative=a.isNegative===n||!a.isNegative,""===t.join("")||{caret:i,dopost:!0});if(!1===o&&r===a.radixPoint&&a.digits!==n&&(isNaN(a.digits)||parseInt(a.digits)>0)){var s=e.inArray(a.radixPoint,t);if(-1!==s)return!0===a.numericInput?i===s:{caret:s+1}}return!0},postValidation:function(i,r,o){var a=o.suffix.split(""),s=o.prefix.split("");if(r.pos===n&&r.caret!==n&&!0!==r.dopost)return r;var l=r.caret!==n?r.caret:r.pos,c=i.slice();o.numericInput&&(l=c.length-l-1,c=c.reverse());var u=c[l];if(u===o.groupSeparator&&(u=c[l+=1]),l===c.length-o.suffix.length-1&&u===o.radixPoint)return r;u!==n&&u!==o.radixPoint&&u!==o.negationSymbol.front&&u!==o.negationSymbol.back&&(c[l]="?",o.prefix.length>0&&l>=(!1===o.isNegative?1:0)&&l<o.prefix.length-1+(!1===o.isNegative?1:0)?s[l-(!1===o.isNegative?1:0)]="?":o.suffix.length>0&&l>=c.length-o.suffix.length-(!1===o.isNegative?1:0)&&(a[l-(c.length-o.suffix.length-(!1===o.isNegative?1:0))]="?")),s=s.join(""),a=a.join("");var d=c.join("").replace(s,"");if(d=d.replace(a,""),d=d.replace(new RegExp(t.escapeRegex(o.groupSeparator),"g"),""),d=d.replace(new RegExp("[-"+t.escapeRegex(o.negationSymbol.front)+"]","g"),""),d=d.replace(new RegExp(t.escapeRegex(o.negationSymbol.back)+"$"),""),isNaN(o.placeholder)&&(d=d.replace(new RegExp(t.escapeRegex(o.placeholder),"g"),"")),d.length>1&&1!==d.indexOf(o.radixPoint)&&("0"===u&&(d=d.replace(/^\?/g,"")),d=d.replace(/^0/g,"")),d.charAt(0)===o.radixPoint&&""!==o.radixPoint&&!0!==o.numericInput&&(d="0"+d),""!==d){if(d=d.split(""),(!o.digitsOptional||o.enforceDigitsOnBlur&&"blur"===r.event)&&isFinite(o.digits)){var f=e.inArray(o.radixPoint,d),p=e.inArray(o.radixPoint,c);-1===f&&(d.push(o.radixPoint),f=d.length-1);for(var h=1;h<=o.digits;h++)o.digitsOptional&&(!o.enforceDigitsOnBlur||"blur"!==r.event)||d[f+h]!==n&&d[f+h]!==o.placeholder.charAt(0)?-1!==p&&c[p+h]!==n&&(d[f+h]=d[f+h]||c[p+h]):d[f+h]=r.placeholder||o.placeholder.charAt(0)}if(!0!==o.autoGroup||""===o.groupSeparator||u===o.radixPoint&&r.pos===n&&!r.dopost)d=d.join("");else{var g=d[d.length-1]===o.radixPoint&&r.c===o.radixPoint;d=t(function(e,t){var n="";if(n+="("+t.groupSeparator+"*{"+t.groupSize+"}){*}",""!==t.radixPoint){var i=e.join("").split(t.radixPoint);i[1]&&(n+=t.radixPoint+"*{"+i[1].match(/^\d*\??\d*/)[0].length+"}")}return n}(d,o),{numericInput:!0,jitMasking:!0,definitions:{"*":{validator:"[0-9?]",cardinality:1}}}).format(d.join("")),g&&(d+=o.radixPoint),d.charAt(0)===o.groupSeparator&&d.substr(1)}}if(o.isNegative&&"blur"===r.event&&(o.isNegative="0"!==d),d=s+d,d+=a,o.isNegative&&(d=o.negationSymbol.front+d,d+=o.negationSymbol.back),d=d.split(""),u!==n)if(u!==o.radixPoint&&u!==o.negationSymbol.front&&u!==o.negationSymbol.back)(l=e.inArray("?",d))>-1?d[l]=u:l=r.caret||0;else if(u===o.radixPoint||u===o.negationSymbol.front||u===o.negationSymbol.back){var m=e.inArray(u,d);-1!==m&&(l=m)}o.numericInput&&(l=d.length-l-1,d=d.reverse());var v={caret:u===n||r.pos!==n?l+(o.numericInput?-1:1):l,buffer:d,refreshFromBuffer:r.dopost||i.join("")!==d.join("")};return v.refreshFromBuffer?v:r},onBeforeWrite:function(i,r,o,a){if(i)switch(i.type){case"keydown":return a.postValidation(r,{caret:o,dopost:!0},a);case"blur":case"checkval":var s;if(function(e){e.parseMinMaxOptions===n&&(null!==e.min&&(e.min=e.min.toString().replace(new RegExp(t.escapeRegex(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.min=e.min.replace(e.radixPoint,".")),e.min=isFinite(e.min)?parseFloat(e.min):NaN,isNaN(e.min)&&(e.min=Number.MIN_VALUE)),null!==e.max&&(e.max=e.max.toString().replace(new RegExp(t.escapeRegex(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.max=e.max.replace(e.radixPoint,".")),e.max=isFinite(e.max)?parseFloat(e.max):NaN,isNaN(e.max)&&(e.max=Number.MAX_VALUE)),e.parseMinMaxOptions="done")}(a),null!==a.min||null!==a.max){if(s=a.onUnMask(r.join(""),n,e.extend({},a,{unmaskAsNumber:!0})),null!==a.min&&s<a.min)return a.isNegative=a.min<0,a.postValidation(a.min.toString().replace(".",a.radixPoint).split(""),{caret:o,dopost:!0,placeholder:"0"},a);if(null!==a.max&&s>a.max)return a.isNegative=a.max<0,a.postValidation(a.max.toString().replace(".",a.radixPoint).split(""),{caret:o,dopost:!0,placeholder:"0"},a)}return a.postValidation(r,{caret:o,placeholder:"0",event:"blur"},a);case"_checkval":return{caret:o}}},regex:{integerPart:function(e,n){return n?new RegExp("["+t.escapeRegex(e.negationSymbol.front)+"+]?"):new RegExp("["+t.escapeRegex(e.negationSymbol.front)+"+]?\\d+")},integerNPart:function(e){return new RegExp("[\\d"+t.escapeRegex(e.groupSeparator)+t.escapeRegex(e.placeholder.charAt(0))+"]+")}},definitions:{"~":{validator:function(e,i,r,o,a,s){var l=o?new RegExp("[0-9"+t.escapeRegex(a.groupSeparator)+"]").test(e):new RegExp("[0-9]").test(e);if(!0===l){if(!0!==a.numericInput&&i.validPositions[r]!==n&&"~"===i.validPositions[r].match.def&&!s){var c=i.buffer.join(""),u=(c=(c=c.replace(new RegExp("[-"+t.escapeRegex(a.negationSymbol.front)+"]","g"),"")).replace(new RegExp(t.escapeRegex(a.negationSymbol.back)+"$"),"")).split(a.radixPoint);u.length>1&&(u[1]=u[1].replace(/0/g,a.placeholder.charAt(0))),"0"===u[0]&&(u[0]=u[0].replace(/0/g,a.placeholder.charAt(0))),c=u[0]+a.radixPoint+u[1]||"";var d=i._buffer.join("");for(c===a.radixPoint&&(c=d);null===c.match(t.escapeRegex(d)+"$");)d=d.slice(1);l=(c=(c=c.replace(d,"")).split(""))[r]===n?{pos:r,remove:r}:{pos:r}}}else o||e!==a.radixPoint||i.validPositions[r-1]!==n||(i.buffer[r]="0",l={pos:r+1});return l},cardinality:1},"+":{validator:function(e,t,n,i,r){return r.allowMinus&&("-"===e||e===r.negationSymbol.front)},cardinality:1,placeholder:""},"-":{validator:function(e,t,n,i,r){return r.allowMinus&&e===r.negationSymbol.back},cardinality:1,placeholder:""},":":{validator:function(e,n,i,r,o){var a="["+t.escapeRegex(o.radixPoint)+"]",s=new RegExp(a).test(e);return s&&n.validPositions[i]&&n.validPositions[i].match.placeholder===o.radixPoint&&(s={caret:i+1}),s},cardinality:1,placeholder:function(e){return e.radixPoint}}},onUnMask:function(e,n,i){if(""===n&&!0===i.nullable)return n;var r=e.replace(i.prefix,"");return r=r.replace(i.suffix,""),r=r.replace(new RegExp(t.escapeRegex(i.groupSeparator),"g"),""),""!==i.placeholder.charAt(0)&&(r=r.replace(new RegExp(i.placeholder.charAt(0),"g"),"0")),i.unmaskAsNumber?(""!==i.radixPoint&&-1!==r.indexOf(i.radixPoint)&&(r=r.replace(t.escapeRegex.call(this,i.radixPoint),".")),r=r.replace(new RegExp("^"+t.escapeRegex(i.negationSymbol.front)),"-"),r=r.replace(new RegExp(t.escapeRegex(i.negationSymbol.back)+"$"),""),Number(r)):r},isComplete:function(e,n){var i=e.join("");if(e.slice().join("")!==i)return!1;var r=i.replace(n.prefix,"");return r=r.replace(n.suffix,""),r=r.replace(new RegExp(t.escapeRegex(n.groupSeparator),"g"),""),","===n.radixPoint&&(r=r.replace(t.escapeRegex(n.radixPoint),".")),isFinite(r)},onBeforeMask:function(e,i){if(i.isNegative=n,e=e.toString().charAt(e.length-1)===i.radixPoint?e.toString().substr(0,e.length-1):e.toString(),""!==i.radixPoint&&isFinite(e)){var r=e.split("."),o=""!==i.groupSeparator?parseInt(i.groupSize):0;2===r.length&&(r[0].length>o||r[1].length>o||r[0].length<=o&&r[1].length<o)&&(e=e.replace(".",i.radixPoint))}var a=e.match(/,/g),s=e.match(/\./g);if(e=s&&a?s.length>a.length?(e=e.replace(/\./g,"")).replace(",",i.radixPoint):a.length>s.length?(e=e.replace(/,/g,"")).replace(".",i.radixPoint):e.indexOf(".")<e.indexOf(",")?e.replace(/\./g,""):e.replace(/,/g,""):e.replace(new RegExp(t.escapeRegex(i.groupSeparator),"g"),""),0===i.digits&&(-1!==e.indexOf(".")?e=e.substring(0,e.indexOf(".")):-1!==e.indexOf(",")&&(e=e.substring(0,e.indexOf(",")))),""!==i.radixPoint&&isFinite(i.digits)&&-1!==e.indexOf(i.radixPoint)){var l=e.split(i.radixPoint)[1].match(new RegExp("\\d*"))[0];if(parseInt(i.digits)<l.toString().length){var c=Math.pow(10,parseInt(i.digits));e=e.replace(t.escapeRegex(i.radixPoint),"."),e=(e=Math.round(parseFloat(e)*c)/c).toString().replace(".",i.radixPoint)}}return e},canClearPosition:function(e,t,n,i,r){var o=e.validPositions[t],a=o.input!==r.radixPoint||null!==e.validPositions[t].match.fn&&!1===r.decimalProtect||o.input===r.radixPoint&&e.validPositions[t+1]&&null===e.validPositions[t+1].match.fn||isFinite(o.input)||t===n||o.input===r.groupSeparator||o.input===r.negationSymbol.front||o.input===r.negationSymbol.back;return!a||"+"!==o.match.nativeDef&&"-"!==o.match.nativeDef||(r.isNegative=!1),a},onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey)switch(n.keyCode){case t.keyCode.UP:a.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(o.step)),a.trigger("setvalue");break;case t.keyCode.DOWN:a.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(o.step)),a.trigger("setvalue")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,digitsOptional:!0,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowMinus:!1}}),t})},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,function(a){r=[n(0),n(1)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t){function n(e,t){var n=(e.mask||e).replace(/#/g,"9").replace(/\)/,"9").replace(/[+()#-]/g,""),i=(t.mask||t).replace(/#/g,"9").replace(/\)/,"9").replace(/[+()#-]/g,""),r=(e.mask||e).split("#")[0],o=(t.mask||t).split("#")[0];return 0===o.indexOf(r)?-1:0===r.indexOf(o)?1:n.localeCompare(i)}var i=t.prototype.analyseMask;return t.prototype.analyseMask=function(t,n,r){function o(e,n,i){n=n||"",i=i||s,""!==n&&(i[n]={});for(var r="",a=i[n]||i,l=e.length-1;l>=0;l--)a[r=(t=e[l].mask||e[l]).substr(0,1)]=a[r]||[],a[r].unshift(t.substr(1)),e.splice(l,1);for(var c in a)a[c].length>500&&o(a[c].slice(),c,a)}function a(t){var n="",i=[];for(var o in t)e.isArray(t[o])?1===t[o].length?i.push(o+t[o]):i.push(o+r.groupmarker.start+t[o].join(r.groupmarker.end+r.alternatormarker+r.groupmarker.start)+r.groupmarker.end):i.push(o+a(t[o]));return 1===i.length?n+=i[0]:n+=r.groupmarker.start+i.join(r.groupmarker.end+r.alternatormarker+r.groupmarker.start)+r.groupmarker.end,n}var s={};return r.phoneCodes&&(r.phoneCodes&&r.phoneCodes.length>1e3&&(o((t=t.substr(1,t.length-2)).split(r.groupmarker.end+r.alternatormarker+r.groupmarker.start)),t=a(s)),t=t.replace(/9/g,"\\9")),i.call(this,t,n,r)},t.extendAliases({abstractphone:{groupmarker:{start:"<",end:">"},countrycode:"",phoneCodes:[],mask:function(e){return e.definitions={"#":t.prototype.definitions[9]},e.phoneCodes.sort(n)},keepStatic:!0,onBeforeMask:function(e,t){var n=e.replace(/^0{1,2}/,"").replace(/[\s]/g,"");return(n.indexOf(t.countrycode)>1||-1===n.indexOf(t.countrycode))&&(n="+"+t.countrycode+n),n},onUnMask:function(e,t,n){return e.replace(/[()#-]/g,"")},inputmode:"tel"}}),t})},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,function(a){r=[n(0),n(1)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t){return t.extendAliases({Regex:{mask:"r",greedy:!1,repeat:"*",regex:null,regexTokens:null,tokenizer:/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,quantifierFilter:/[0-9]+[^,]/,isComplete:function(e,t){return new RegExp(t.regex,t.casing?"i":"").test(e.join(""))},definitions:{r:{validator:function(t,n,i,r,o){function a(e,t){this.matches=[],this.isGroup=e||!1,this.isQuantifier=t||!1,this.quantifier={min:1,max:1},this.repeaterPart=void 0}function s(t,n){var i=!1;n&&(d+="(",p++);for(var r=0;r<t.matches.length;r++){var a=t.matches[r];if(!0===a.isGroup)i=s(a,!0);else if(!0===a.isQuantifier){var c=e.inArray(a,t.matches),u=t.matches[c-1],f=d;if(isNaN(a.quantifier.max)){for(;a.repeaterPart&&a.repeaterPart!==d&&a.repeaterPart.length>d.length&&!(i=s(u,!0)););(i=i||s(u,!0))&&(a.repeaterPart=d),d=f+a.quantifier.max}else{for(var h=0,g=a.quantifier.max-1;h<g&&!(i=s(u,!0));h++);d=f+"{"+a.quantifier.min+","+a.quantifier.max+"}"}}else if(void 0!==a.matches)for(var m=0;m<a.length&&!(i=s(a[m],n));m++);else{var v;if("["==a.charAt(0)){for(v=d,v+=a,x=0;x<p;x++)v+=")";i=(w=new RegExp("^("+v+")$",o.casing?"i":"")).test(l)}else for(var y=0,b=a.length;y<b;y++)if("\\"!==a.charAt(y)){v=d,v=(v+=a.substr(0,y+1)).replace(/\|$/,"");for(var x=0;x<p;x++)v+=")";var w=new RegExp("^("+v+")$",o.casing?"i":"");if(i=w.test(l))break}d+=a}if(i)break}return n&&(d+=")",p--),i}var l,c,u=n.buffer.slice(),d="",f=!1,p=0;null===o.regexTokens&&function(){var e,t,n=new a,i=[];for(o.regexTokens=[];e=o.tokenizer.exec(o.regex);)switch((t=e[0]).charAt(0)){case"(":i.push(new a(!0));break;case")":c=i.pop(),i.length>0?i[i.length-1].matches.push(c):n.matches.push(c);break;case"{":case"+":case"*":var r=new a(!1,!0),s=(t=t.replace(/[{}]/g,"")).split(","),l=isNaN(s[0])?s[0]:parseInt(s[0]),u=1===s.length?l:isNaN(s[1])?s[1]:parseInt(s[1]);if(r.quantifier={min:l,max:u},i.length>0){var d=i[i.length-1].matches;(e=d.pop()).isGroup||((c=new a(!0)).matches.push(e),e=c),d.push(e),d.push(r)}else(e=n.matches.pop()).isGroup||((c=new a(!0)).matches.push(e),e=c),n.matches.push(e),n.matches.push(r);break;default:i.length>0?i[i.length-1].matches.push(t):n.matches.push(t)}n.matches.length>0&&o.regexTokens.push(n)}(),u.splice(i,0,t),l=u.join("");for(var h=0;h<o.regexTokens.length;h++){var g=o.regexTokens[h];if(f=s(g,g.isGroup))break}return f},cardinality:1}}}}),t})},function(e,t,n){"use strict";var i,r,o,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(a){r=[n(2),n(1)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t){return void 0===e.fn.inputmask&&(e.fn.inputmask=function(n,i){var r,o=this[0];if(void 0===i&&(i={}),"string"==typeof n)switch(n){case"unmaskedvalue":return o&&o.inputmask?o.inputmask.unmaskedvalue():e(o).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return o&&o.inputmask?o.inputmask.getemptymask():"";case"hasMaskedValue":return!(!o||!o.inputmask)&&o.inputmask.hasMaskedValue();case"isComplete":return!o||!o.inputmask||o.inputmask.isComplete();case"getmetadata":return o&&o.inputmask?o.inputmask.getmetadata():void 0;case"setvalue":e(o).val(i),o&&void 0===o.inputmask&&e(o).triggerHandler("setvalue");break;case"option":if("string"!=typeof i)return this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(i)});if(o&&void 0!==o.inputmask)return o.inputmask.option(i);break;default:return i.alias=n,r=new t(i),this.each(function(){r.mask(this)})}else{if("object"==(void 0===n?"undefined":a(n)))return r=new t(n),void 0===n.mask&&void 0===n.alias?this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(n);r.mask(this)}):this.each(function(){r.mask(this)});if(void 0===n)return this.each(function(){(r=new t(i)).mask(this)})}}),e.fn.inputmask})}]),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.flatpickr=t()}(this,function(){"use strict";function e(e,t,n){return!1!==n?new Date(e.getTime()).setHours(0,0,0,0)-new Date(t.getTime()).setHours(0,0,0,0):e.getTime()-t.getTime()}function t(e,t,n){void 0===n&&(n=!1);var i;return function(){var r=this,o=arguments;null!==i&&clearTimeout(i),i=window.setTimeout(function(){i=null,n||e.apply(r,o)},t),n&&!i&&e.apply(r,o)}}function n(e){return(e.wheelDelta||-e.deltaY)>=0?1:-1}function i(e,t,n){if(!0===n)return e.classList.add(t);e.classList.remove(t)}function r(e,t,n){var i=window.document.createElement(e);return t=t||"",n=n||"",i.className=t,void 0!==n&&(i.textContent=n),i}function o(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function a(e,t){return t(e)?e:e.parentNode?a(e.parentNode,t):void 0}function s(e){var t=r("div","numInputWrapper"),n=r("input","numInput "+e),i=r("span","arrowUp"),o=r("span","arrowDown");return n.type="text",n.pattern="\\d*",t.appendChild(n),t.appendChild(i),t.appendChild(o),t}function l(l,c){function f(){Oe.utils={getDaysInMonth:function(e,t){return void 0===e&&(e=Oe.currentMonth),void 0===t&&(t=Oe.currentYear),1===e&&(t%4==0&&t%100!=0||t%400==0)?29:Oe.l10n.daysInMonth[e]}}}function h(e){return e.bind(Oe)}function g(e){Oe.config.noCalendar&&!Oe.selectedDates.length&&(Oe.setDate((new Date).setHours(Oe.config.defaultHour,Oe.config.defaultMinute,Oe.config.defaultSeconds),!1),E(),Pe()),Ae(e),0!==Oe.selectedDates.length&&(!Oe.minDateHasTime||"input"!==e.type||e.target.value.length>=2?(E(),Pe()):setTimeout(function(){E(),Pe()},1e3))}function b(e,t){return e%12+12*v("PM"===t)}function S(e){switch(e%24){case 0:case 12:return 12;default:return e%12}}function E(){if(void 0!==Oe.hourElement&&void 0!==Oe.minuteElement){var t=(parseInt(Oe.hourElement.value.slice(-2),10)||0)%24,n=(parseInt(Oe.minuteElement.value,10)||0)%60,i=void 0!==Oe.secondElement?(parseInt(Oe.secondElement.value,10)||0)%60:0;void 0!==Oe.amPM&&(t=b(t,Oe.amPM.textContent)),Oe.config.minDate&&Oe.minDateHasTime&&Oe.latestSelectedDateObj&&0===e(Oe.latestSelectedDateObj,Oe.config.minDate)&&(t=Math.max(t,Oe.config.minDate.getHours()))===Oe.config.minDate.getHours()&&(n=Math.max(n,Oe.config.minDate.getMinutes())),Oe.config.maxDate&&Oe.maxDateHasTime&&Oe.latestSelectedDateObj&&0===e(Oe.latestSelectedDateObj,Oe.config.maxDate)&&(t=Math.min(t,Oe.config.maxDate.getHours()))===Oe.config.maxDate.getHours()&&(n=Math.min(n,Oe.config.maxDate.getMinutes())),P(t,n,i)}}function T(e){var t=e||Oe.latestSelectedDateObj;t&&P(t.getHours(),t.getMinutes(),t.getSeconds())}function P(e,t,n){void 0!==Oe.latestSelectedDateObj&&Oe.latestSelectedDateObj.setHours(e%24,t,n||0,0),Oe.hourElement&&Oe.minuteElement&&!Oe.isMobile&&(Oe.hourElement.value=m(Oe.config.time_24hr?e:(12+e)%12+12*v(e%12==0)),Oe.minuteElement.value=m(t),void 0!==Oe.amPM&&(Oe.amPM.textContent=e>=12?"PM":"AM"),void 0!==Oe.secondElement&&(Oe.secondElement.value=m(n)))}function D(e){var t=parseInt(e.target.value)+(e.delta||0);4!==t.toString().length&&"Enter"!==e.key||(Oe.currentYearElement.blur(),/[^\d]/.test(t.toString())||ee(t))}function M(e,t,n){return t instanceof Array?t.forEach(function(t){return M(e,t,n)}):e instanceof Array?e.forEach(function(e){return M(e,t,n)}):(e.addEventListener(t,n),void Oe._handlers.push({element:e,event:t,handler:n}))}function A(e){return function(t){return 1===t.which&&e(t)}}function O(){ke("onChange")}function L(){if(Oe.config.wrap&&["open","close","toggle","clear"].forEach(function(e){Array.prototype.forEach.call(Oe.element.querySelectorAll("[data-"+e+"]"),function(t){return M(t,"click",Oe[e])})}),Oe.isMobile)return void xe();var e=t(re,50);if(Oe._debouncedChange=t(O,300),"range"===Oe.config.mode&&Oe.daysContainer&&M(Oe.daysContainer,"mouseover",function(e){return ie(e.target)}),M(window.document.body,"keydown",ne),Oe.config.static||M(Oe._input,"keydown",ne),Oe.config.inline||Oe.config.static||M(window,"resize",e),void 0!==window.ontouchstart&&M(window.document.body,"touchstart",J),M(window.document.body,"mousedown",A(J)),M(Oe._input,"blur",J),!0===Oe.config.clickOpens&&(M(Oe._input,"focus",Oe.open),M(Oe._input,"mousedown",A(Oe.open))),void 0!==Oe.daysContainer&&(Oe.monthNav.addEventListener("wheel",function(e){return e.preventDefault()}),M(Oe.monthNav,"wheel",t(De,10)),M(Oe.monthNav,"mousedown",A(Me)),M(Oe.monthNav,["keyup","increment"],D),M(Oe.daysContainer,"mousedown",A(de)),Oe.config.animate&&(M(Oe.daysContainer,["webkitAnimationEnd","animationend"],I),M(Oe.monthNav,["webkitAnimationEnd","animationend"],j))),void 0!==Oe.timeContainer&&void 0!==Oe.minuteElement&&void 0!==Oe.hourElement){var n=function(e){return e.target.select()};M(Oe.timeContainer,["wheel","input","increment"],g),
M(Oe.timeContainer,"mousedown",A(R)),M(Oe.timeContainer,["wheel","increment"],Oe._debouncedChange),M(Oe.timeContainer,"input",O),M([Oe.hourElement,Oe.minuteElement],["focus","click"],n),void 0!==Oe.secondElement&&M(Oe.secondElement,"focus",function(){return Oe.secondElement&&Oe.secondElement.select()}),void 0!==Oe.amPM&&M(Oe.amPM,"mousedown",A(function(e){g(e),O()}))}}function N(){Oe._animationLoop.forEach(function(e){return e()}),Oe._animationLoop=[]}function I(e){if(Oe.daysContainer&&Oe.daysContainer.childNodes.length>1)switch(e.animationName){case"fpSlideLeft":Oe.daysContainer.lastChild&&Oe.daysContainer.lastChild.classList.remove("slideLeftNew"),Oe.daysContainer.removeChild(Oe.daysContainer.firstChild),Oe.days=Oe.daysContainer.firstChild,N();break;case"fpSlideRight":Oe.daysContainer.firstChild&&Oe.daysContainer.firstChild.classList.remove("slideRightNew"),Oe.daysContainer.removeChild(Oe.daysContainer.lastChild),Oe.days=Oe.daysContainer.firstChild,N()}}function j(e){switch(e.animationName){case"fpSlideLeftNew":case"fpSlideRightNew":Oe.navigationCurrentMonth.classList.remove("slideLeftNew"),Oe.navigationCurrentMonth.classList.remove("slideRightNew");for(var t=Oe.navigationCurrentMonth;t.nextSibling&&/curr/.test(t.nextSibling.className);)Oe.monthNav.removeChild(t.nextSibling);for(;t.previousSibling&&/curr/.test(t.previousSibling.className);)Oe.monthNav.removeChild(t.previousSibling);Oe.oldCurMonth=void 0}}function F(e){var t=void 0!==e?ye(e):Oe.latestSelectedDateObj||(Oe.config.minDate&&Oe.config.minDate>Oe.now?Oe.config.minDate:Oe.config.maxDate&&Oe.config.maxDate<Oe.now?Oe.config.maxDate:Oe.now);try{void 0!==t&&(Oe.currentYear=t.getFullYear(),Oe.currentMonth=t.getMonth())}catch(e){console.error(e.stack),console.warn("Invalid date supplied: "+t)}Oe.redraw()}function R(e){~e.target.className.indexOf("arrow")&&$(e,e.target.classList.contains("arrowUp")?1:-1)}function $(e,t,n){var i=e&&e.target,r=n||i&&i.parentNode&&i.parentNode.firstChild,o=Ce("increment");o.delta=t,r&&r.dispatchEvent(o)}function _(){var e=window.document.createDocumentFragment();if(Oe.calendarContainer=r("div","flatpickr-calendar"),Oe.calendarContainer.tabIndex=-1,!Oe.config.noCalendar){if(e.appendChild(W()),Oe.innerContainer=r("div","flatpickr-innerContainer"),Oe.config.weekNumbers){var t=G(),n=t.weekWrapper,o=t.weekNumbers;Oe.innerContainer.appendChild(n),Oe.weekNumbers=o,Oe.weekWrapper=n}Oe.rContainer=r("div","flatpickr-rContainer"),Oe.rContainer.appendChild(U()),Oe.daysContainer||(Oe.daysContainer=r("div","flatpickr-days"),Oe.daysContainer.tabIndex=-1),Y(),Oe.rContainer.appendChild(Oe.daysContainer),Oe.innerContainer.appendChild(Oe.rContainer),e.appendChild(Oe.innerContainer)}Oe.config.enableTime&&e.appendChild(z()),i(Oe.calendarContainer,"rangeMode","range"===Oe.config.mode),i(Oe.calendarContainer,"animate",Oe.config.animate),Oe.calendarContainer.appendChild(e);var a=void 0!==Oe.config.appendTo&&Oe.config.appendTo.nodeType;if((Oe.config.inline||Oe.config.static)&&(Oe.calendarContainer.classList.add(Oe.config.inline?"inline":"static"),Oe.config.inline&&(!a&&Oe.element.parentNode?Oe.element.parentNode.insertBefore(Oe.calendarContainer,Oe._input.nextSibling):void 0!==Oe.config.appendTo&&Oe.config.appendTo.appendChild(Oe.calendarContainer)),Oe.config.static)){var s=r("div","flatpickr-wrapper");Oe.element.parentNode&&Oe.element.parentNode.insertBefore(s,Oe.element),s.appendChild(Oe.element),Oe.altInput&&s.appendChild(Oe.altInput),s.appendChild(Oe.calendarContainer)}Oe.config.static||Oe.config.inline||(void 0!==Oe.config.appendTo?Oe.config.appendTo:window.document.body).appendChild(Oe.calendarContainer)}function H(t,n,o,a){var s=te(n,!0),l=r("span","flatpickr-day "+t,n.getDate().toString());return l.dateObj=n,l.$i=a,l.setAttribute("aria-label",Oe.formatDate(n,Oe.config.ariaDateFormat)),0===e(n,Oe.now)&&(Oe.todayDateElem=l,l.classList.add("today")),s?(l.tabIndex=-1,Se(n)&&(l.classList.add("selected"),Oe.selectedDateElem=l,"range"===Oe.config.mode&&(i(l,"startRange",Oe.selectedDates[0]&&0===e(n,Oe.selectedDates[0])),i(l,"endRange",Oe.selectedDates[1]&&0===e(n,Oe.selectedDates[1]))))):(l.classList.add("disabled"),Oe.selectedDates[0]&&Oe.minRangeDate&&n>Oe.minRangeDate&&n<Oe.selectedDates[0]?Oe.minRangeDate=n:Oe.selectedDates[0]&&Oe.maxRangeDate&&n<Oe.maxRangeDate&&n>Oe.selectedDates[0]&&(Oe.maxRangeDate=n)),"range"===Oe.config.mode&&(Ee(n)&&!Se(n)&&l.classList.add("inRange"),1===Oe.selectedDates.length&&void 0!==Oe.minRangeDate&&void 0!==Oe.maxRangeDate&&(n<Oe.minRangeDate||n>Oe.maxRangeDate)&&l.classList.add("notAllowed")),Oe.weekNumbers&&"prevMonthDay"!==t&&o%7==1&&Oe.weekNumbers.insertAdjacentHTML("beforeend","<span class='disabled flatpickr-day'>"+Oe.config.getWeek(n)+"</span>"),ke("onDayCreate",l),l}function q(e,t){var n=e+t||0,i=void 0!==e?Oe.days.childNodes[n]:Oe.selectedDateElem||Oe.todayDateElem||Oe.days.childNodes[0],r=function(){i=i||Oe.days.childNodes[n],i.focus(),"range"===Oe.config.mode&&ie(i)};if(void 0===i&&0!==t)return t>0?(Oe.changeMonth(1,!0,void 0,!0),n%=42):t<0&&(Oe.changeMonth(-1,!0,void 0,!0),n+=42),B(r);r()}function B(e){!0===Oe.config.animate?Oe._animationLoop.push(e):e()}function Y(e){if(void 0!==Oe.daysContainer){var t=(new Date(Oe.currentYear,Oe.currentMonth,1).getDay()-Oe.l10n.firstDayOfWeek+7)%7,n="range"===Oe.config.mode,i=Oe.utils.getDaysInMonth((Oe.currentMonth-1+12)%12),a=Oe.utils.getDaysInMonth(),s=window.document.createDocumentFragment(),l=i+1-t,c=0;for(Oe.weekNumbers&&Oe.weekNumbers.firstChild&&(Oe.weekNumbers.textContent=""),n&&(Oe.minRangeDate=new Date(Oe.currentYear,Oe.currentMonth-1,l),Oe.maxRangeDate=new Date(Oe.currentYear,Oe.currentMonth+1,(42-t)%a));l<=i;l++,c++)s.appendChild(H("prevMonthDay",new Date(Oe.currentYear,Oe.currentMonth-1,l),l,c));for(l=1;l<=a;l++,c++)s.appendChild(H("",new Date(Oe.currentYear,Oe.currentMonth,l),l,c));for(var u=a+1;u<=42-t;u++,c++)s.appendChild(H("nextMonthDay",new Date(Oe.currentYear,Oe.currentMonth+1,u%a),u,c));n&&1===Oe.selectedDates.length&&s.childNodes[0]?(Oe._hidePrevMonthArrow=Oe._hidePrevMonthArrow||!!Oe.minRangeDate&&Oe.minRangeDate>s.childNodes[0].dateObj,Oe._hideNextMonthArrow=Oe._hideNextMonthArrow||!!Oe.maxRangeDate&&Oe.maxRangeDate<new Date(Oe.currentYear,Oe.currentMonth+1,1)):Te();var d=r("div","dayContainer");if(d.appendChild(s),Oe.config.animate&&void 0!==e)for(;Oe.daysContainer.childNodes.length>1;)Oe.daysContainer.removeChild(Oe.daysContainer.firstChild);else o(Oe.daysContainer);e&&e>=0?Oe.daysContainer.appendChild(d):Oe.daysContainer.insertBefore(d,Oe.daysContainer.firstChild),Oe.days=Oe.daysContainer.childNodes[0]}}function W(){var e=window.document.createDocumentFragment();Oe.monthNav=r("div","flatpickr-month"),Oe.prevMonthNav=r("span","flatpickr-prev-month"),Oe.prevMonthNav.innerHTML=Oe.config.prevArrow,Oe.currentMonthElement=r("span","cur-month"),Oe.currentMonthElement.title=Oe.l10n.scrollTitle;var t=s("cur-year");return Oe.currentYearElement=t.childNodes[0],Oe.currentYearElement.title=Oe.l10n.scrollTitle,Oe.config.minDate&&(Oe.currentYearElement.min=Oe.config.minDate.getFullYear().toString()),Oe.config.maxDate&&(Oe.currentYearElement.max=Oe.config.maxDate.getFullYear().toString(),Oe.currentYearElement.disabled=!!Oe.config.minDate&&Oe.config.minDate.getFullYear()===Oe.config.maxDate.getFullYear()),Oe.nextMonthNav=r("span","flatpickr-next-month"),Oe.nextMonthNav.innerHTML=Oe.config.nextArrow,Oe.navigationCurrentMonth=r("span","flatpickr-current-month"),Oe.navigationCurrentMonth.appendChild(Oe.currentMonthElement),Oe.navigationCurrentMonth.appendChild(t),e.appendChild(Oe.prevMonthNav),e.appendChild(Oe.navigationCurrentMonth),e.appendChild(Oe.nextMonthNav),Oe.monthNav.appendChild(e),Object.defineProperty(Oe,"_hidePrevMonthArrow",{get:function(){return Oe.__hidePrevMonthArrow},set:function(e){Oe.__hidePrevMonthArrow!==e&&(Oe.prevMonthNav.style.display=e?"none":"block"),Oe.__hidePrevMonthArrow=e}}),Object.defineProperty(Oe,"_hideNextMonthArrow",{get:function(){return Oe.__hideNextMonthArrow},set:function(e){Oe.__hideNextMonthArrow!==e&&(Oe.nextMonthNav.style.display=e?"none":"block"),Oe.__hideNextMonthArrow=e}}),Te(),Oe.monthNav}function z(){Oe.calendarContainer.classList.add("hasTime"),Oe.config.noCalendar&&Oe.calendarContainer.classList.add("noCalendar"),Oe.timeContainer=r("div","flatpickr-time"),Oe.timeContainer.tabIndex=-1;var e=r("span","flatpickr-time-separator",":"),t=s("flatpickr-hour");Oe.hourElement=t.childNodes[0];var n=s("flatpickr-minute");if(Oe.minuteElement=n.childNodes[0],Oe.hourElement.tabIndex=Oe.minuteElement.tabIndex=-1,Oe.hourElement.value=m(Oe.latestSelectedDateObj?Oe.latestSelectedDateObj.getHours():Oe.config.time_24hr?Oe.config.defaultHour:S(Oe.config.defaultHour)),Oe.minuteElement.value=m(Oe.latestSelectedDateObj?Oe.latestSelectedDateObj.getMinutes():Oe.config.defaultMinute),Oe.hourElement.step=Oe.config.hourIncrement.toString(),Oe.minuteElement.step=Oe.config.minuteIncrement.toString(),Oe.hourElement.min=Oe.config.time_24hr?"0":"1",Oe.hourElement.max=Oe.config.time_24hr?"23":"12",Oe.minuteElement.min="0",Oe.minuteElement.max="59",Oe.hourElement.title=Oe.minuteElement.title=Oe.l10n.scrollTitle,Oe.timeContainer.appendChild(t),Oe.timeContainer.appendChild(e),Oe.timeContainer.appendChild(n),Oe.config.time_24hr&&Oe.timeContainer.classList.add("time24hr"),Oe.config.enableSeconds){Oe.timeContainer.classList.add("hasSeconds");var i=s("flatpickr-second");Oe.secondElement=i.childNodes[0],Oe.secondElement.value=m(Oe.latestSelectedDateObj?Oe.latestSelectedDateObj.getSeconds():Oe.config.defaultSeconds),Oe.secondElement.step=Oe.minuteElement.step,Oe.secondElement.min=Oe.minuteElement.min,Oe.secondElement.max=Oe.minuteElement.max,Oe.timeContainer.appendChild(r("span","flatpickr-time-separator",":")),Oe.timeContainer.appendChild(i)}return Oe.config.time_24hr||(Oe.amPM=r("span","flatpickr-am-pm",Oe.l10n.amPM[v((Oe.latestSelectedDateObj?Oe.hourElement.value:Oe.config.defaultHour)>11)]),Oe.amPM.title=Oe.l10n.toggleTitle,Oe.amPM.tabIndex=-1,Oe.timeContainer.appendChild(Oe.amPM)),Oe.timeContainer}function U(){Oe.weekdayContainer||(Oe.weekdayContainer=r("div","flatpickr-weekdays"));var e=Oe.l10n.firstDayOfWeek,t=Oe.l10n.weekdays.shorthand.slice();return e>0&&e<t.length&&(t=t.splice(e,t.length).concat(t.splice(0,e))),Oe.weekdayContainer.innerHTML="\n    <span class=flatpickr-weekday>\n      "+t.join("</span><span class=flatpickr-weekday>")+"\n    </span>\n    ",Oe.weekdayContainer}function G(){Oe.calendarContainer.classList.add("hasWeeks");var e=r("div","flatpickr-weekwrapper");e.appendChild(r("span","flatpickr-weekday",Oe.l10n.weekAbbreviation));var t=r("div","flatpickr-weeks");return e.appendChild(t),{weekWrapper:e,weekNumbers:t}}function X(e,t,n,i){void 0===t&&(t=!0),void 0===n&&(n=Oe.config.animate),void 0===i&&(i=!1);var r=t?e:e-Oe.currentMonth;if(!(r<0&&Oe._hidePrevMonthArrow||r>0&&Oe._hideNextMonthArrow)){if(Oe.currentMonth+=r,(Oe.currentMonth<0||Oe.currentMonth>11)&&(Oe.currentYear+=Oe.currentMonth>11?1:-1,Oe.currentMonth=(Oe.currentMonth+12)%12,ke("onYearChange")),Y(n?r:void 0),!n)return ke("onMonthChange"),Te();var o=Oe.navigationCurrentMonth;if(r<0)for(;o.nextSibling&&/curr/.test(o.nextSibling.className);)Oe.monthNav.removeChild(o.nextSibling);else if(r>0)for(;o.previousSibling&&/curr/.test(o.previousSibling.className);)Oe.monthNav.removeChild(o.previousSibling);Oe.oldCurMonth=Oe.navigationCurrentMonth,Oe.navigationCurrentMonth=Oe.monthNav.insertBefore(Oe.oldCurMonth.cloneNode(!0),r>0?Oe.oldCurMonth.nextSibling:Oe.oldCurMonth);var a=Oe.daysContainer;if(a.firstChild&&a.lastChild&&(r>0?(a.firstChild.classList.add("slideLeft"),a.lastChild.classList.add("slideLeftNew"),Oe.oldCurMonth.classList.add("slideLeft"),Oe.navigationCurrentMonth.classList.add("slideLeftNew")):r<0&&(a.firstChild.classList.add("slideRightNew"),a.lastChild.classList.add("slideRight"),Oe.oldCurMonth.classList.add("slideRight"),Oe.navigationCurrentMonth.classList.add("slideRightNew"))),Oe.currentMonthElement=Oe.navigationCurrentMonth.firstChild,Oe.currentYearElement=Oe.navigationCurrentMonth.lastChild.childNodes[0],Te(),Oe.oldCurMonth.firstChild&&(Oe.oldCurMonth.firstChild.textContent=d(Oe.currentMonth-r,Oe.config.shorthandCurrentMonth,Oe.l10n)),ke("onMonthChange"),i&&document.activeElement&&document.activeElement.$i){var s=document.activeElement.$i;B(function(){q(s,0)})}}}function V(e){void 0===e&&(e=!0),Oe.input.value="",Oe.altInput&&(Oe.altInput.value=""),Oe.mobileInput&&(Oe.mobileInput.value=""),Oe.selectedDates=[],Oe.latestSelectedDateObj=void 0,Oe.showTimeInput=!1,Oe.redraw(),e&&ke("onChange")}function K(){Oe.isOpen=!1,Oe.isMobile||(Oe.calendarContainer.classList.remove("open"),Oe._input.classList.remove("active")),ke("onClose")}function Q(){void 0!==Oe.config&&ke("onDestroy");for(var e=Oe._handlers.length;e--;){var t=Oe._handlers[e];t.element.removeEventListener(t.event,t.handler)}Oe._handlers=[],Oe.mobileInput?(Oe.mobileInput.parentNode&&Oe.mobileInput.parentNode.removeChild(Oe.mobileInput),Oe.mobileInput=void 0):Oe.calendarContainer&&Oe.calendarContainer.parentNode&&Oe.calendarContainer.parentNode.removeChild(Oe.calendarContainer),Oe.altInput&&(Oe.input.type="text",Oe.altInput.parentNode&&Oe.altInput.parentNode.removeChild(Oe.altInput),delete Oe.altInput),Oe.input&&(Oe.input.type=Oe.input._type,Oe.input.classList.remove("flatpickr-input"),Oe.input.removeAttribute("readonly"),Oe.input.value=""),["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach(function(e){try{delete Oe[e]}catch(e){}})}function Z(e){return!(!Oe.config.appendTo||!Oe.config.appendTo.contains(e))||Oe.calendarContainer.contains(e)}function J(e){if(Oe.isOpen&&!Oe.config.inline){var t=Z(e.target),n=e.target===Oe.input||e.target===Oe.altInput||Oe.element.contains(e.target)||e.path&&e.path.indexOf&&(~e.path.indexOf(Oe.input)||~e.path.indexOf(Oe.altInput));("blur"===e.type?n&&e.relatedTarget&&!Z(e.relatedTarget):!n&&!t)&&-1===Oe.config.ignoredFocusElements.indexOf(e.target)&&(Oe.close(),"range"===Oe.config.mode&&1===Oe.selectedDates.length&&(Oe.clear(!1),Oe.redraw()))}}function ee(e){if(!(!e||Oe.currentYearElement.min&&e<parseInt(Oe.currentYearElement.min)||Oe.currentYearElement.max&&e>parseInt(Oe.currentYearElement.max))){var t=e,n=Oe.currentYear!==t;Oe.currentYear=t||Oe.currentYear,Oe.config.maxDate&&Oe.currentYear===Oe.config.maxDate.getFullYear()?Oe.currentMonth=Math.min(Oe.config.maxDate.getMonth(),Oe.currentMonth):Oe.config.minDate&&Oe.currentYear===Oe.config.minDate.getFullYear()&&(Oe.currentMonth=Math.max(Oe.config.minDate.getMonth(),Oe.currentMonth)),n&&(Oe.redraw(),ke("onYearChange"))}}function te(t,n){void 0===n&&(n=!0);var i=Oe.parseDate(t,void 0,n);if(Oe.config.minDate&&i&&e(i,Oe.config.minDate,void 0!==n?n:!Oe.minDateHasTime)<0||Oe.config.maxDate&&i&&e(i,Oe.config.maxDate,void 0!==n?n:!Oe.maxDateHasTime)>0)return!1;if(!Oe.config.enable.length&&!Oe.config.disable.length)return!0;if(void 0===i)return!1;for(var r=Oe.config.enable.length>0,o=r?Oe.config.enable:Oe.config.disable,a=0,s=void 0;a<o.length;a++){if("function"==typeof(s=o[a])&&s(i))return r;if(s instanceof Date&&void 0!==i&&s.getTime()===i.getTime())return r;if("string"==typeof s&&void 0!==i){var l=Oe.parseDate(s,void 0,!0);return l&&l.getTime()===i.getTime()?r:!r}if("object"==typeof s&&void 0!==i&&s.from&&s.to&&i.getTime()>=s.from.getTime()&&i.getTime()<=s.to.getTime())return r}return!r}function ne(e){var t=e.target===Oe._input,n=Z(e.target),i=Oe.config.allowInput,r=Oe.isOpen&&(!i||!t),o=Oe.config.inline&&t&&!i;if("Enter"===e.key&&t){if(i)return Oe.setDate(Oe._input.value,!0,e.target===Oe.altInput?Oe.config.altFormat:Oe.config.dateFormat),e.target.blur();Oe.open()}else if(n||r||o){var a=!!Oe.timeContainer&&Oe.timeContainer.contains(e.target);switch(e.key){case"Enter":a?Pe():de(e);break;case"Escape":e.preventDefault(),Oe.close();break;case"Backspace":case"Delete":t&&!Oe.config.allowInput&&Oe.clear();break;case"ArrowLeft":case"ArrowRight":if(a)Oe.hourElement&&Oe.hourElement.focus();else if(e.preventDefault(),Oe.daysContainer){var s="ArrowRight"===e.key?1:-1;e.ctrlKey?X(s,!0,void 0,!0):q(e.target.$i,s)}break;case"ArrowUp":case"ArrowDown":e.preventDefault();var l="ArrowDown"===e.key?1:-1;Oe.daysContainer&&void 0!==e.target.$i?e.ctrlKey?(ee(Oe.currentYear-l),q(e.target.$i,0)):a||q(e.target.$i,7*l):Oe.config.enableTime&&(!a&&Oe.hourElement&&Oe.hourElement.focus(),g(e),Oe._debouncedChange());break;case"Tab":e.target===Oe.hourElement?(e.preventDefault(),Oe.minuteElement.select()):e.target===Oe.minuteElement&&(Oe.secondElement||Oe.amPM)?(e.preventDefault(),void 0!==Oe.secondElement?Oe.secondElement.focus():void 0!==Oe.amPM&&Oe.amPM.focus()):e.target===Oe.secondElement&&Oe.amPM&&(e.preventDefault(),Oe.amPM.focus());break;case"a":void 0!==Oe.amPM&&e.target===Oe.amPM&&(Oe.amPM.textContent="AM",E(),Pe());break;case"p":void 0!==Oe.amPM&&e.target===Oe.amPM&&(Oe.amPM.textContent="PM",E(),Pe())}ke("onKeyDown",e)}}function ie(e){if(1===Oe.selectedDates.length&&e.classList.contains("flatpickr-day")&&void 0!==Oe.minRangeDate&&void 0!==Oe.maxRangeDate){for(var t=e.dateObj,n=Oe.parseDate(Oe.selectedDates[0],void 0,!0),i=Math.min(t.getTime(),Oe.selectedDates[0].getTime()),r=Math.max(t.getTime(),Oe.selectedDates[0].getTime()),o=!1,a=i;a<r;a+=p.DAY)if(!te(new Date(a))){o=!0;break}for(var s=Oe.days.childNodes[0].dateObj.getTime(),l=0;l<42;l++,s+=p.DAY)!function(a,s){var l=a<Oe.minRangeDate.getTime()||a>Oe.maxRangeDate.getTime(),c=Oe.days.childNodes[s];if(l)return c.classList.add("notAllowed"),["inRange","startRange","endRange"].forEach(function(e){c.classList.remove(e)}),"continue";if(o&&!l)return"continue";["startRange","inRange","endRange","notAllowed"].forEach(function(e){c.classList.remove(e)});var u=Math.max(Oe.minRangeDate.getTime(),i),d=Math.min(Oe.maxRangeDate.getTime(),r);e.classList.add(t<Oe.selectedDates[0]?"startRange":"endRange"),n<t&&a===n.getTime()?c.classList.add("startRange"):n>t&&a===n.getTime()&&c.classList.add("endRange"),a>=u&&a<=d&&c.classList.add("inRange")}(s,l)}}function re(){!Oe.isOpen||Oe.config.static||Oe.config.inline||ce()}function oe(e,t){if(void 0===t&&(t=Oe._input),Oe.isMobile)return e&&(e.preventDefault(),e.target&&e.target.blur()),setTimeout(function(){void 0!==Oe.mobileInput&&Oe.mobileInput.click()},0),void ke("onOpen");Oe._input.disabled||Oe.config.inline||(Oe.isOpen=!0,Oe.calendarContainer.classList.add("open"),ce(t),Oe._input.classList.add("active"),ke("onOpen"))}function ae(e){return function(t){var n=Oe.config["_"+e+"Date"]=Oe.parseDate(t),i=Oe.config["_"+("min"===e?"max":"min")+"Date"];void 0!==n&&(Oe["min"===e?"minDateHasTime":"maxDateHasTime"]=n.getHours()>0||n.getMinutes()>0||n.getSeconds()>0),Oe.selectedDates&&(Oe.selectedDates=Oe.selectedDates.filter(function(e){return te(e)}),Oe.selectedDates.length||"min"!==e||T(n),Pe()),Oe.daysContainer&&(ue(),void 0!==n?Oe.currentYearElement[e]=n.getFullYear().toString():Oe.currentYearElement.removeAttribute(e),Oe.currentYearElement.disabled=!!i&&void 0!==n&&i.getFullYear()===n.getFullYear())}}function se(){var e=["wrap","weekNumbers","allowInput","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],t=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange"];Oe.config=u({},C.defaultConfig);var n=u({},c,JSON.parse(JSON.stringify(l.dataset||{}))),i={};Object.defineProperty(Oe.config,"enable",{get:function(){return Oe.config._enable||[]},set:function(e){Oe.config._enable=ge(e)}}),Object.defineProperty(Oe.config,"disable",{get:function(){return Oe.config._disable||[]},set:function(e){Oe.config._disable=ge(e)}}),!n.dateFormat&&n.enableTime&&(i.dateFormat=n.noCalendar?"H:i"+(n.enableSeconds?":S":""):C.defaultConfig.dateFormat+" H:i"+(n.enableSeconds?":S":"")),n.altInput&&n.enableTime&&!n.altFormat&&(i.altFormat=n.noCalendar?"h:i"+(n.enableSeconds?":S K":" K"):C.defaultConfig.altFormat+" h:i"+(n.enableSeconds?":S":"")+" K"),Object.defineProperty(Oe.config,"minDate",{get:function(){return Oe.config._minDate},set:ae("min")}),Object.defineProperty(Oe.config,"maxDate",{get:function(){return Oe.config._maxDate},set:ae("max")}),Object.assign(Oe.config,i,n);for(var r=0;r<e.length;r++)Oe.config[e[r]]=!0===Oe.config[e[r]]||"true"===Oe.config[e[r]];for(var r=t.length;r--;)void 0!==Oe.config[t[r]]&&(Oe.config[t[r]]=y(Oe.config[t[r]]||[]).map(h));for(var r=0;r<Oe.config.plugins.length;r++){var o=Oe.config.plugins[r](Oe)||{};for(var a in o)~t.indexOf(a)?Oe.config[a]=y(o[a]).map(h).concat(Oe.config[a]):void 0===n[a]&&(Oe.config[a]=o[a])}Oe.isMobile=!Oe.config.disableMobile&&!Oe.config.inline&&"single"===Oe.config.mode&&!Oe.config.disable.length&&!Oe.config.enable.length&&!Oe.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),ke("onParseConfig")}function le(){"object"!=typeof Oe.config.locale&&void 0===C.l10ns[Oe.config.locale]&&console.warn("flatpickr: invalid locale "+Oe.config.locale),Oe.l10n=u({},C.l10ns.default,"object"==typeof Oe.config.locale?Oe.config.locale:"default"!==Oe.config.locale?C.l10ns[Oe.config.locale]:void 0)}function ce(e){if(void 0===e&&(e=Oe._positionElement),void 0!==Oe.calendarContainer){var t=Oe.calendarContainer.offsetHeight,n=Oe.calendarContainer.offsetWidth,r=Oe.config.position,o=e.getBoundingClientRect(),a=window.innerHeight-o.bottom,s="above"===r||"below"!==r&&a<t&&o.top>t,l=window.pageYOffset+o.top+(s?-t-2:e.offsetHeight+2);if(i(Oe.calendarContainer,"arrowTop",!s),i(Oe.calendarContainer,"arrowBottom",s),!Oe.config.inline){var c=window.pageXOffset+o.left,u=window.document.body.offsetWidth-o.right,d=c+n>window.document.body.offsetWidth;i(Oe.calendarContainer,"rightMost",d),Oe.config.static||(Oe.calendarContainer.style.top=l+"px",d?(Oe.calendarContainer.style.left="auto",Oe.calendarContainer.style.right=u+"px"):(Oe.calendarContainer.style.left=c+"px",Oe.calendarContainer.style.right="auto"))}}}function ue(){Oe.config.noCalendar||Oe.isMobile||(U(),Te(),Y())}function de(t){t.preventDefault(),t.stopPropagation();var n=function(e){return e.classList&&e.classList.contains("flatpickr-day")&&!e.classList.contains("disabled")&&!e.classList.contains("notAllowed")},i=a(t.target,n);if(void 0!==i){var r=i,o=Oe.latestSelectedDateObj=new Date(r.dateObj.getTime()),s=o.getMonth()!==Oe.currentMonth&&"range"!==Oe.config.mode;if(Oe.selectedDateElem=r,"single"===Oe.config.mode)Oe.selectedDates=[o];else if("multiple"===Oe.config.mode){var l=Se(o);l?Oe.selectedDates.splice(parseInt(l),1):Oe.selectedDates.push(o)}else"range"===Oe.config.mode&&(2===Oe.selectedDates.length&&Oe.clear(),Oe.selectedDates.push(o),0!==e(o,Oe.selectedDates[0],!0)&&Oe.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()}));if(E(),s){var c=Oe.currentYear!==o.getFullYear();Oe.currentYear=o.getFullYear(),Oe.currentMonth=o.getMonth(),c&&ke("onYearChange"),ke("onMonthChange")}if(Y(),Oe.config.minDate&&Oe.minDateHasTime&&Oe.config.enableTime&&0===e(o,Oe.config.minDate)&&T(Oe.config.minDate),Pe(),Oe.config.enableTime&&setTimeout(function(){return Oe.showTimeInput=!0},50),"range"===Oe.config.mode&&(1===Oe.selectedDates.length?(ie(r),Oe._hidePrevMonthArrow=Oe._hidePrevMonthArrow||void 0!==Oe.minRangeDate&&Oe.minRangeDate>Oe.days.childNodes[0].dateObj,Oe._hideNextMonthArrow=Oe._hideNextMonthArrow||void 0!==Oe.maxRangeDate&&Oe.maxRangeDate<new Date(Oe.currentYear,Oe.currentMonth+1,1)):Te()),ke("onChange"),s?B(function(){return Oe.selectedDateElem&&Oe.selectedDateElem.focus()}):q(r.$i,0),void 0!==Oe.hourElement&&setTimeout(function(){return void 0!==Oe.hourElement&&Oe.hourElement.select()},451),Oe.config.closeOnSelect){var u="single"===Oe.config.mode&&!Oe.config.enableTime,d="range"===Oe.config.mode&&2===Oe.selectedDates.length&&!Oe.config.enableTime;(u||d)&&Oe.close()}}}function fe(e,t){null!==e&&"object"==typeof e?Object.assign(Oe.config,e):Oe.config[e]=t,Oe.redraw(),F()}function pe(e,t){var n=[];if(e instanceof Array)n=e.map(function(e){return Oe.parseDate(e,t)});else if(e instanceof Date||"number"==typeof e)n=[Oe.parseDate(e,t)];else if("string"==typeof e)switch(Oe.config.mode){case"single":n=[Oe.parseDate(e,t)];break;case"multiple":n=e.split("; ").map(function(e){return Oe.parseDate(e,t)});break;case"range":n=e.split(Oe.l10n.rangeSeparator).map(function(e){return Oe.parseDate(e,t)})}Oe.selectedDates=n.filter(function(e){return e instanceof Date&&te(e,!1)}),Oe.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()})}function he(e,t,n){if(void 0===t&&(t=!1),void 0===n&&(n=void 0),0!==e&&!e)return Oe.clear(t);pe(e,n),Oe.showTimeInput=Oe.selectedDates.length>0,Oe.latestSelectedDateObj=Oe.selectedDates[0],Oe.redraw(),F(),T(),Pe(t),t&&ke("onChange")}function ge(e){return e.map(function(e){return"string"==typeof e||"number"==typeof e||e instanceof Date?Oe.parseDate(e,void 0,!0):e&&"object"==typeof e&&e.from&&e.to?{from:Oe.parseDate(e.from,void 0),to:Oe.parseDate(e.to,void 0)}:e}).filter(function(e){return e})}function me(){Oe.selectedDates=[],Oe.now=new Date;var e=Oe.config.defaultDate||Oe.input.value;e&&pe(e,Oe.config.dateFormat);var t=Oe.selectedDates.length?Oe.selectedDates[0]:Oe.config.minDate&&Oe.config.minDate.getTime()>Oe.now.getTime()?Oe.config.minDate:Oe.config.maxDate&&Oe.config.maxDate.getTime()<Oe.now.getTime()?Oe.config.maxDate:Oe.now;Oe.currentYear=t.getFullYear(),Oe.currentMonth=t.getMonth(),Oe.selectedDates.length&&(Oe.latestSelectedDateObj=Oe.selectedDates[0]),Oe.minDateHasTime=!!Oe.config.minDate&&(Oe.config.minDate.getHours()>0||Oe.config.minDate.getMinutes()>0||Oe.config.minDate.getSeconds()>0),Oe.maxDateHasTime=!!Oe.config.maxDate&&(Oe.config.maxDate.getHours()>0||Oe.config.maxDate.getMinutes()>0||Oe.config.maxDate.getSeconds()>0),Object.defineProperty(Oe,"showTimeInput",{get:function(){return Oe._showTimeInput},set:function(e){Oe._showTimeInput=e,Oe.calendarContainer&&i(Oe.calendarContainer,"showTimeInput",e),ce()}})}function ve(e,t){return void 0!==Oe.config&&void 0!==Oe.config.formatDate?Oe.config.formatDate(e,t):t.split("").map(function(t,n,i){return k[t]&&"\\"!==i[n-1]?k[t](e,Oe.l10n,Oe.config):"\\"!==t?t:""}).join("")}function ye(e,t,n){if(0===e||e){var i,r=e;if(e instanceof Date)i=new Date(e.getTime());else if("string"!=typeof e&&void 0!==e.toFixed)i=new Date(e);else if("string"==typeof e){var o=t||(Oe.config||C.defaultConfig).dateFormat,a=String(e).trim();if("today"===a)i=new Date,n=!0;else if(/Z$/.test(a)||/GMT$/.test(a))i=new Date(e);else if(Oe.config&&Oe.config.parseDate)i=Oe.config.parseDate(e,o);else{i=Oe.config&&Oe.config.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0);for(var s=void 0,l=[],c=0,u=0,d="";c<o.length;c++){var f=o[c],p="\\"===f,h="\\"===o[c-1]||p;if(w[f]&&!h){d+=w[f];var g=new RegExp(d).exec(e);g&&(s=!0)&&l["Y"!==f?"push":"unshift"]({fn:x[f],val:g[++u]})}else p||(d+=".");l.forEach(function(e){var t=e.fn,n=e.val;return i=t(i,n,Oe.l10n)||i})}i=s?i:void 0}}return i instanceof Date?(!0===n&&i.setHours(0,0,0,0),i):(console.warn("flatpickr: invalid date "+r),void console.info(Oe.element))}}function be(){if(Oe.input=Oe.config.wrap?l.querySelector("[data-input]"):l,!Oe.input)return void console.warn("Error: invalid input element specified",Oe.input);Oe.input._type=Oe.input.type,Oe.input.type="text",Oe.input.classList.add("flatpickr-input"),Oe._input=Oe.input,Oe.config.altInput&&(Oe.altInput=r(Oe.input.nodeName,Oe.input.className+" "+Oe.config.altInputClass),Oe._input=Oe.altInput,Oe.altInput.placeholder=Oe.input.placeholder,Oe.altInput.disabled=Oe.input.disabled,Oe.altInput.required=Oe.input.required,Oe.altInput.type="text",Oe.input.type="hidden",!Oe.config.static&&Oe.input.parentNode&&Oe.input.parentNode.insertBefore(Oe.altInput,Oe.input.nextSibling)),Oe.config.allowInput||Oe._input.setAttribute("readonly","readonly"),Oe._positionElement=Oe.config.positionElement||Oe._input}function xe(){var e=Oe.config.enableTime?Oe.config.noCalendar?"time":"datetime-local":"date";Oe.mobileInput=r("input",Oe.input.className+" flatpickr-mobile"),Oe.mobileInput.step=Oe.input.getAttribute("step")||"any",Oe.mobileInput.tabIndex=1,Oe.mobileInput.type=e,Oe.mobileInput.disabled=Oe.input.disabled,Oe.mobileInput.placeholder=Oe.input.placeholder,Oe.mobileFormatStr="datetime-local"===e?"Y-m-d\\TH:i:S":"date"===e?"Y-m-d":"H:i:S",Oe.selectedDates.length&&(Oe.mobileInput.defaultValue=Oe.mobileInput.value=Oe.formatDate(Oe.selectedDates[0],Oe.mobileFormatStr)),Oe.config.minDate&&(Oe.mobileInput.min=Oe.formatDate(Oe.config.minDate,"Y-m-d")),Oe.config.maxDate&&(Oe.mobileInput.max=Oe.formatDate(Oe.config.maxDate,"Y-m-d")),Oe.input.type="hidden",void 0!==Oe.altInput&&(Oe.altInput.type="hidden");try{Oe.input.parentNode&&Oe.input.parentNode.insertBefore(Oe.mobileInput,Oe.input.nextSibling)}catch(e){}Oe.mobileInput.addEventListener("change",function(e){Oe.setDate(e.target.value,!1,Oe.mobileFormatStr),ke("onChange"),ke("onClose")})}function we(){if(Oe.isOpen)return Oe.close();Oe.open()}function ke(e,t){var n=Oe.config[e];if(void 0!==n&&n.length>0)for(var i=0;n[i]&&i<n.length;i++)n[i](Oe.selectedDates,Oe.input.value,Oe,t);"onChange"===e&&(Oe.input.dispatchEvent(Ce("change")),Oe.input.dispatchEvent(Ce("input")))}function Ce(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}function Se(t){for(var n=0;n<Oe.selectedDates.length;n++)if(0===e(Oe.selectedDates[n],t))return""+n;return!1}function Ee(t){return!("range"!==Oe.config.mode||Oe.selectedDates.length<2)&&(e(t,Oe.selectedDates[0])>=0&&e(t,Oe.selectedDates[1])<=0)}function Te(){Oe.config.noCalendar||Oe.isMobile||!Oe.monthNav||(Oe.currentMonthElement.textContent=d(Oe.currentMonth,Oe.config.shorthandCurrentMonth,Oe.l10n)+" ",Oe.currentYearElement.value=Oe.currentYear.toString(),Oe._hidePrevMonthArrow=void 0!==Oe.config.minDate&&(Oe.currentYear===Oe.config.minDate.getFullYear()?Oe.currentMonth<=Oe.config.minDate.getMonth():Oe.currentYear<Oe.config.minDate.getFullYear()),Oe._hideNextMonthArrow=void 0!==Oe.config.maxDate&&(Oe.currentYear===Oe.config.maxDate.getFullYear()?Oe.currentMonth+1>Oe.config.maxDate.getMonth():Oe.currentYear>Oe.config.maxDate.getFullYear()))}function Pe(e){if(void 0===e&&(e=!0),!Oe.selectedDates.length)return Oe.clear(e);void 0!==Oe.mobileInput&&Oe.mobileFormatStr&&(Oe.mobileInput.value=void 0!==Oe.latestSelectedDateObj?Oe.formatDate(Oe.latestSelectedDateObj,Oe.mobileFormatStr):"");var t="range"!==Oe.config.mode?Oe.config.conjunction:Oe.l10n.rangeSeparator;Oe.input.value=Oe.selectedDates.map(function(e){return Oe.formatDate(e,Oe.config.dateFormat)}).join(t),void 0!==Oe.altInput&&(Oe.altInput.value=Oe.selectedDates.map(function(e){return Oe.formatDate(e,Oe.config.altFormat)}).join(t)),!1!==e&&ke("onValueUpdate")}function De(e){e.preventDefault();var t=Oe.currentYearElement.parentNode&&Oe.currentYearElement.parentNode.contains(e.target);if(e.target===Oe.currentMonthElement||t){var i=n(e);t?(ee(Oe.currentYear+i),e.target.value=Oe.currentYear.toString()):Oe.changeMonth(i,!0,!1)}}function Me(e){var t=Oe.prevMonthNav.contains(e.target),n=Oe.nextMonthNav.contains(e.target);t||n?X(t?-1:1):e.target===Oe.currentYearElement?(e.preventDefault(),Oe.currentYearElement.select()):"arrowUp"===e.target.className?Oe.changeYear(Oe.currentYear+1):"arrowDown"===e.target.className&&Oe.changeYear(Oe.currentYear-1)}function Ae(e){e.preventDefault();var t="keydown"===e.type,n=e.target;void 0!==Oe.amPM&&e.target===Oe.amPM&&(Oe.amPM.textContent=Oe.l10n.amPM["AM"===Oe.amPM.textContent?1:0])
;var i=Number(n.min),r=Number(n.max),o=Number(n.step),a=parseInt(n.value,10),s=e.delta||(t?38===e.which?1:-1:Math.max(-1,Math.min(1,e.wheelDelta||-e.deltaY))||0),l=a+o*s;if(void 0!==n.value&&2===n.value.length){var c=n===Oe.hourElement,u=n===Oe.minuteElement;l<i?(l=r+l+v(!c)+(v(c)&&v(!Oe.amPM)),u&&$(void 0,-1,Oe.hourElement)):l>r&&(l=n===Oe.hourElement?l-r-v(!Oe.amPM):i,u&&$(void 0,1,Oe.hourElement)),Oe.amPM&&c&&(1===o?l+a===23:Math.abs(l-a)>o)&&(Oe.amPM.textContent="PM"===Oe.amPM.textContent?"AM":"PM"),n.value=m(l)}}var Oe={};return Oe.parseDate=ye,Oe.formatDate=ve,Oe._animationLoop=[],Oe._handlers=[],Oe._bind=M,Oe._setHoursFromDate=T,Oe.changeMonth=X,Oe.changeYear=ee,Oe.clear=V,Oe.close=K,Oe._createElement=r,Oe.destroy=Q,Oe.isEnabled=te,Oe.jumpToDate=F,Oe.open=oe,Oe.redraw=ue,Oe.set=fe,Oe.setDate=he,Oe.toggle=we,function(){Oe.element=Oe.input=l,Oe.isOpen=!1,se(),le(),be(),me(),f(),Oe.isMobile||_(),L(),(Oe.selectedDates.length||Oe.config.noCalendar)&&(Oe.config.enableTime&&T(Oe.config.noCalendar?Oe.latestSelectedDateObj||Oe.config.minDate:void 0),Pe(!1)),Oe.showTimeInput=Oe.selectedDates.length>0||Oe.config.noCalendar,void 0!==Oe.weekWrapper&&void 0!==Oe.daysContainer&&(Oe.calendarContainer.style.width=Oe.daysContainer.offsetWidth+Oe.weekWrapper.offsetWidth+"px"),Oe.isMobile||ce(),ke("onReady")}(),Oe}function c(e,t){for(var n=Array.prototype.slice.call(e),i=[],r=0;r<n.length;r++){var o=n[r];try{if(null!==o.getAttribute("data-fp-omit"))continue;void 0!==o._flatpickr&&(o._flatpickr.destroy(),o._flatpickr=void 0),o._flatpickr=l(o,t||{}),i.push(o._flatpickr)}catch(e){console.warn(e,e.stack)}}return 1===i.length?i[0]:i}var u=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},d=function(e,t,n){return n.months[t?"shorthand":"longhand"][e]},f=function(e){var t=new Date(e.getFullYear(),0,1);return Math.ceil(((e.getTime()-t.getTime())/864e5+t.getDay()+1)/7)},p={DAY:864e5},h={_disable:[],_enable:[],allowInput:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enable:[],enableSeconds:!1,enableTime:!1,getWeek:f,hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1},g={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function(e){var t=e%100;if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"]},m=function(e){return("0"+e).slice(-2)},v=function(e){return!0===e?1:0},y=function(e){return e instanceof Array?e:[e]},b=function(){},x={D:b,F:function(e,t,n){e.setMonth(n.months.longhand.indexOf(t))},G:function(e,t){e.setHours(parseFloat(t))},H:function(e,t){e.setHours(parseFloat(t))},J:function(e,t){e.setDate(parseFloat(t))},K:function(e,t){e.setHours(e.getHours()%12+12*v(/pm/i.test(t)))},M:function(e,t,n){e.setMonth(n.months.shorthand.indexOf(t))},S:function(e,t){e.setSeconds(parseFloat(t))},U:function(e,t){return new Date(1e3*parseFloat(t))},W:function(e,t){var n=parseInt(t);return new Date(e.getFullYear(),0,2+7*(n-1),0,0,0,0)},Y:function(e,t){e.setFullYear(parseFloat(t))},Z:function(e,t){return new Date(t)},d:function(e,t){e.setDate(parseFloat(t))},h:function(e,t){e.setHours(parseFloat(t))},i:function(e,t){e.setMinutes(parseFloat(t))},j:function(e,t){e.setDate(parseFloat(t))},l:b,m:function(e,t){e.setMonth(parseFloat(t)-1)},n:function(e,t){e.setMonth(parseFloat(t)-1)},s:function(e,t){e.setSeconds(parseFloat(t))},w:b,y:function(e,t){e.setFullYear(2e3+parseFloat(t))}},w={D:"(\\w+)",F:"(\\w+)",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"(am|AM|Am|aM|pm|PM|Pm|pM)",M:"(\\w+)",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"(\\w+)",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},k={Z:function(e){return e.toISOString()},D:function(e,t,n){return t.weekdays.shorthand[k.w(e,t,n)]},F:function(e,t,n){return d(k.n(e,t,n)-1,!1,t)},G:function(e,t,n){return m(k.h(e,t,n))},H:function(e){return m(e.getHours())},J:function(e,t){return void 0!==t.ordinal?e.getDate()+t.ordinal(e.getDate()):e.getDate()},K:function(e){return e.getHours()>11?"PM":"AM"},M:function(e,t){return d(e.getMonth(),!0,t)},S:function(e){return m(e.getSeconds())},U:function(e){return e.getTime()/1e3},W:function(e,t,n){return n.getWeek(e)},Y:function(e){return e.getFullYear()},d:function(e){return m(e.getDate())},h:function(e){return e.getHours()%12?e.getHours()%12:12},i:function(e){return m(e.getMinutes())},j:function(e){return e.getDate()},l:function(e,t){return t.weekdays.longhand[e.getDay()]},m:function(e){return m(e.getMonth()+1)},n:function(e){return e.getMonth()+1},s:function(e){return e.getSeconds()},w:function(e){return e.getDay()},y:function(e){return String(e.getFullYear()).substring(2)}};"function"!=typeof Object.assign&&(Object.assign=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(!e)throw TypeError("Cannot convert undefined or null to object");for(var i=0,r=t;i<r.length;i++){var o=r[i];!function(t){t&&Object.keys(t).forEach(function(n){return e[n]=t[n]})}(o)}return e}),"undefined"!=typeof HTMLElement&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(e){return c(this,e)},HTMLElement.prototype.flatpickr=function(e){return c([this],e)});var C;return C=function(e,t){return e instanceof NodeList?c(e,t):"string"==typeof e?c(window.document.querySelectorAll(e),t):c([e],t)},"object"==typeof window&&(window.flatpickr=C),C.defaultConfig=h,C.l10ns={en:u({},g),default:u({},g)},C.localize=function(e){C.l10ns.default=u({},C.l10ns.default,e)},C.setDefaults=function(e){C.defaultConfig=u({},C.defaultConfig,e)},"undefined"!=typeof jQuery&&(jQuery.fn.flatpickr=function(e){return c(this,e)}),Date.prototype.fp_incr=function(e){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof e?parseInt(e,10):e))},C}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.ru={})}(this,function(e){"use strict";var t="undefined"!=typeof window&&void 0!==window.flatpickr?window.flatpickr:{l10ns:{}},n={firstDayOfWeek:1,weekdays:{shorthand:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],longhand:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"]},months:{shorthand:["Янв","Фев","Март","Апр","Май","Июнь","Июль","Авг","Сен","Окт","Ноя","Дек"],longhand:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"]}};t.l10ns.ru=n;var i=t.l10ns;e.Russian=n,e.default=i,Object.defineProperty(e,"__esModule",{value:!0})}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.tippy=t()}(this,function(){"use strict";function e(e){$e.forEach(function(t){var n=t.popper,i=t.tippyInstance,r=t.settings,o=r.appendTo,a=r.hideOnClick,s=r.trigger;if(o.contains(n)){var l=!0===a||-1!==s.indexOf("focus"),c=!e||n!==e.popper;l&&c&&i.hide(n)}})}function t(e,t){return(Element.prototype.closest||function(e){for(var t=this;t;){if(We.call(t,e))return t;t=t.parentElement}}).call(e,t)}function n(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function i(){var i=function(){Re.touch=!0,Re.iOS()&&document.body.classList.add("tippy-touch"),Re.dynamicInputDetection&&window.performance&&document.addEventListener("mousemove",r)},r=function(){var e=void 0;return function(){var t=performance.now();t-e<20&&(Re.touch=!1,document.removeEventListener("mousemove",r),Re.iOS()||document.body.classList.remove("tippy-touch")),e=t}}(),o=function(i){if(!(i.target instanceof Element))return e();var r=t(i.target,_e.TOOLTIPPED_EL),o=t(i.target,_e.POPPER);if(o){if(n($e,function(e){return e.popper===o}).settings.interactive)return}if(r){var a=n($e,function(e){return e.el===r}),s=a.settings,l=s.hideOnClick,c=s.multiple,u=s.trigger;if(!c&&Re.touch||!c&&-1!==u.indexOf("click"))return e(a);if(!0!==l||-1!==u.indexOf("click"))return}!t(i.target,_e.CONTROLLER)&&document.querySelector(_e.POPPER)&&e()},a=function(e){var t=document,n=t.activeElement;n&&n.blur&&We.call(n,_e.TOOLTIPPED_EL)&&n.blur()};document.addEventListener("click",o),document.addEventListener("touchstart",i),window.addEventListener("blur",a),!Re.SUPPORTS_TOUCH&&(navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0)&&document.addEventListener("pointerdown",i)}function r(){return!r.done&&(r.done=!0,i(),!0)}function o(e){window.requestAnimationFrame(function(){setTimeout(e,0)})}function a(e){for(var t=[!1,"webkit"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length;i++){var r=t[i],o=r?""+r+n:e;if(void 0!==window.document.body.style[o])return o}return null}function s(e,t){return Array.prototype.findIndex?e.findIndex(t):e.indexOf(n(e,t))}function l(e){var t=e.getAttribute("title");t&&e.setAttribute("data-original-title",t),e.removeAttribute("title")}function c(e){var t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)}function u(e,t){t?window.getComputedStyle(t)[a("transform")]:window.getComputedStyle(e).opacity}function d(e,t){e.forEach(function(e){e&&t(e.classList)})}function f(e){return{tooltip:e.querySelector(_e.TOOLTIP),circle:e.querySelector(_e.CIRCLE),content:e.querySelector(_e.CONTENT)}}function p(e,t){e.forEach(function(e){if(e){var n=We.call(e,_e.CONTENT),i=n?Math.round(t/1.3):t;e.style[a("transitionDuration")]=i+"ms"}})}function h(e){return"visible"===e.style.visibility}function g(){}function m(e){return!!e&&"[object Object]"===e.toString()}function v(e){return e.replace(/-.+/,"")}function y(e){var t=this,i=n($e,function(e){return e.el===t}),r=i.popper,o=i.settings.offset,s=v(r.getAttribute("x-placement")),l=Math.round(r.offsetWidth/2),c=Math.round(r.offsetHeight/2),u=document.documentElement.offsetWidth||document.body.offsetWidth,d=e.pageX,f=e.pageY,p=void 0,h=void 0;switch(s){case"top":p=d-l+o,h=f-2*c;break;case"bottom":p=d-l+o,h=f+10;break;case"left":p=d-2*l,h=f-c+o;break;case"right":p=d+5,h=f-c+o}var g=d+5+l+o>u,m=d-5-l+o<0;"top"!==s&&"bottom"!==s||(g&&(p=u-5-2*l),m&&(p=5)),r.style[a("transform")]="translate3d("+p+"px, "+h+"px, 0)"}function b(e){if(e instanceof Element||m(e))return[e];if(e instanceof NodeList)return[].slice.call(e);if(Array.isArray(e))return e;try{return[].slice.call(document.querySelectorAll(e))}catch(e){return[]}}function x(e,t,n){if(!t)return n();var i=f(e.popper),r=i.tooltip,o=!1,a=function(e){e.target!==r||o||(o=!0,n())};r.addEventListener("webkitTransitionEnd",a),r.addEventListener("transitionend",a),clearTimeout(e._transitionendTimeout),e._transitionendTimeout=setTimeout(function(){o||n()},t)}function w(e){var t=!1,n=0,i=document.createElement("span");return new MutationObserver(function(){e(),t=!1}).observe(i,{attributes:!0}),function(){t||(t=!0,i.setAttribute("x-index",n),n+=1)}}function k(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},Xe))}}function C(e){var t={};return e&&"[object Function]"===t.toString.call(e)}function S(e,t){if(1!==e.nodeType)return[];var n=window.getComputedStyle(e,null);return t?n[t]:n}function E(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function T(e){if(!e||-1!==["HTML","BODY","#document"].indexOf(e.nodeName))return window.document.body;var t=S(e),n=t.overflow,i=t.overflowX;return/(auto|scroll)/.test(n+t.overflowY+i)?e:T(E(e))}function P(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(t.nodeName)&&"static"===S(t,"position")?P(t):t:window.document.documentElement}function D(e){var t=e.nodeName;return"BODY"!==t&&("HTML"===t||P(e.firstElementChild)===e)}function M(e){return null!==e.parentNode?M(e.parentNode):e}function A(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return window.document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,r=n?t:e,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var a=o.commonAncestorContainer;if(e!==a&&t!==a||i.contains(r))return D(a)?a:P(a);var s=M(e);return s.host?A(s.host,t):A(e,M(t).host)}function O(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",i=e.nodeName;if("BODY"===i||"HTML"===i){var r=window.document.documentElement;return(window.document.scrollingElement||r)[n]}return e[n]}function L(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=O(t,"top"),r=O(t,"left"),o=n?-1:1;return e.top+=i*o,e.bottom+=i*o,e.left+=r*o,e.right+=r*o,e}function N(e,t){var n="x"===t?"Left":"Top",i="Left"===n?"Right":"Bottom";return+e["border"+n+"Width"].split("px")[0]+ +e["border"+i+"Width"].split("px")[0]}function I(e,t,n,i,r){return Math.max(t["offset"+e],r?t["scroll"+e]:0,n["client"+e],n["offset"+e],r?n["scroll"+e]:0,Je()?n["offset"+e]+i["margin"+("Height"===e?"Top":"Left")]+i["margin"+("Height"===e?"Bottom":"Right")]:0)}function j(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=window.document.body,n=window.document.documentElement,i=Je()&&window.getComputedStyle(n);return{height:I("Height",t,n,i,e),width:I("Width",t,n,i,e)}}function F(e){return it({},e,{right:e.left+e.width,bottom:e.top+e.height})}function R(e){var t={};if(Je())try{t=e.getBoundingClientRect();var n=O(e,"top"),i=O(e,"left");t.top+=n,t.left+=i,t.bottom+=n,t.right+=i}catch(e){}else t=e.getBoundingClientRect();var r={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?j():{},a=o.width||e.clientWidth||r.right-r.left,s=o.height||e.clientHeight||r.bottom-r.top,l=e.offsetWidth-a,c=e.offsetHeight-s;if(l||c){var u=S(e);l-=N(u,"x"),c-=N(u,"y"),r.width-=l,r.height-=c}return F(r)}function $(e,t){var n=Je(),i="HTML"===t.nodeName,r=R(e),o=R(t),a=T(e),s=S(t),l=+s.borderTopWidth.split("px")[0],c=+s.borderLeftWidth.split("px")[0],u=F({top:r.top-o.top-l,left:r.left-o.left-c,width:r.width,height:r.height});if(u.marginTop=0,u.marginLeft=0,!n&&i){var d=+s.marginTop.split("px")[0],f=+s.marginLeft.split("px")[0];u.top-=l-d,u.bottom-=l-d,u.left-=c-f,u.right-=c-f,u.marginTop=d,u.marginLeft=f}return(n?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(u=L(u,t)),u}function _(e){var t=window.document.documentElement,n=$(e,t),i=Math.max(t.clientWidth,window.innerWidth||0),r=Math.max(t.clientHeight,window.innerHeight||0),o=O(t),a=O(t,"left");return F({top:o-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:i,height:r})}function H(e){var t=e.nodeName;return"BODY"!==t&&"HTML"!==t&&("fixed"===S(e,"position")||H(E(e)))}function q(e,t,n,i){var r={top:0,left:0},o=A(e,t);if("viewport"===i)r=_(o);else{var a=void 0;"scrollParent"===i?(a=T(E(e)),"BODY"===a.nodeName&&(a=window.document.documentElement)):a="window"===i?window.document.documentElement:i;var s=$(a,o);if("HTML"!==a.nodeName||H(o))r=s;else{var l=j(!1),c=l.height,u=l.width;r.top+=s.top-s.marginTop,r.bottom=c+s.top,r.left+=s.left-s.marginLeft,r.right=u+s.left}}return r.left+=n,r.top+=n,r.right-=n,r.bottom-=n,r}function B(e){return e.width*e.height}function Y(e,t,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=q(n,i,o,r),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(s).map(function(e){return it({key:e},s[e],{area:B(s[e])})}).sort(function(e,t){return t.area-e.area}),c=l.filter(function(e){var t=e.width,i=e.height;return t>=n.clientWidth&&i>=n.clientHeight}),u=c.length>0?c[0].key:l[0].key,d=e.split("-")[1];return u+(d?"-"+d:"")}function W(e,t,n){return $(n,A(t,n))}function z(e){var t=window.getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),i=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+i,height:e.offsetHeight+n}}function U(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function G(e,t,n){n=n.split("-")[0];var i=z(e),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",l=o?"height":"width",c=o?"width":"height";return r[a]=t[a]+t[l]/2-i[l]/2,r[s]=n===s?t[s]-i[c]:t[U(s)],r}function X(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function V(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var i=X(e,function(e){return e[t]===n});return e.indexOf(i)}function K(e,t,n){return(void 0===n?e:e.slice(0,V(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&C(n)&&(t.offsets.popper=F(t.offsets.popper),t.offsets.reference=F(t.offsets.reference),t=n(t,e))}),t}function Q(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=W(this.state,this.popper,this.reference),e.placement=Y(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=G(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=K(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function Z(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function J(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length-1;i++){var r=t[i],o=r?""+r+n:e;if(void 0!==window.document.body.style[o])return o}return null}function ee(){return this.state.isDestroyed=!0,Z(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[J("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function te(e,t,n,i){var r="BODY"===e.nodeName,o=r?window:e;o.addEventListener(t,n,{passive:!0}),r||te(T(o.parentNode),t,n,i),i.push(o)}function ne(e,t,n,i){n.updateBound=i,window.addEventListener("resize",n.updateBound,{passive:!0});var r=T(e);return te(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function ie(){this.state.eventsEnabled||(this.state=ne(this.reference,this.options,this.state,this.scheduleUpdate))}function re(e,t){return window.removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t}function oe(){this.state.eventsEnabled&&(window.cancelAnimationFrame(this.scheduleUpdate),this.state=re(this.reference,this.state))}function ae(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function se(e,t){Object.keys(t).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&ae(t[n])&&(i="px"),e.style[n]=t[n]+i})}function le(e,t){Object.keys(t).forEach(function(n){!1!==t[n]?e.setAttribute(n,t[n]):e.removeAttribute(n)})}function ce(e){return se(e.instance.popper,e.styles),le(e.instance.popper,e.attributes),e.arrowElement&&Object.keys(e.arrowStyles).length&&se(e.arrowElement,e.arrowStyles),e}function ue(e,t,n,i,r){var o=W(r,t,e),a=Y(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),se(t,{position:"absolute"}),n}function de(e,t){var n=t.x,i=t.y,r=e.offsets.popper,o=X(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,s=P(e.instance.popper),l=R(s),c={position:r.position},u={left:Math.floor(r.left),top:Math.floor(r.top),bottom:Math.floor(r.bottom),right:Math.floor(r.right)},d="bottom"===n?"top":"bottom",f="right"===i?"left":"right",p=J("transform"),h=void 0,g=void 0;if(g="bottom"===d?-l.height+u.bottom:u.top,h="right"===f?-l.width+u.right:u.left,a&&p)c[p]="translate3d("+h+"px, "+g+"px, 0)",c[d]=0,c[f]=0,c.willChange="transform";else{var m="bottom"===d?-1:1,v="right"===f?-1:1;c[d]=g*m,c[f]=h*v,c.willChange=d+", "+f}var y={"x-placement":e.placement};return e.attributes=it({},y,e.attributes),e.styles=it({},c,e.styles),e.arrowStyles=it({},e.offsets.arrow,e.arrowStyles),e}function fe(e,t,n){var i=X(e,function(e){return e.name===t}),r=!!i&&e.some(function(e){return e.name===n&&e.enabled&&e.order<i.order});if(!r){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}function pe(e,t){if(!fe(e.instance.modifiers,"arrow","keepTogether"))return e;var n=t.element;if("string"==typeof n){if(!(n=e.instance.popper.querySelector(n)))return e}else if(!e.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],r=e.offsets,o=r.popper,a=r.reference,s=-1!==["left","right"].indexOf(i),l=s?"height":"width",c=s?"Top":"Left",u=c.toLowerCase(),d=s?"left":"top",f=s?"bottom":"right",p=z(n)[l];a[f]-p<o[u]&&(e.offsets.popper[u]-=o[u]-(a[f]-p)),a[u]+p>o[f]&&(e.offsets.popper[u]+=a[u]+p-o[f]);var h=a[u]+a[l]/2-p/2,g=S(e.instance.popper,"margin"+c).replace("px",""),m=h-F(e.offsets.popper)[u]-g;return m=Math.max(Math.min(o[l]-p,m),0),e.arrowElement=n,e.offsets.arrow={},e.offsets.arrow[u]=Math.round(m),e.offsets.arrow[d]="",e}function he(e){return"end"===e?"start":"start"===e?"end":e}function ge(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=ot.indexOf(e),i=ot.slice(n+1).concat(ot.slice(0,n));return t?i.reverse():i}function me(e,t){if(Z(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=q(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),i=e.placement.split("-")[0],r=U(i),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case at.FLIP:a=[i,r];break;case at.CLOCKWISE:a=ge(i);break;case at.COUNTERCLOCKWISE:a=ge(i,!0);break;default:a=t.behavior}return a.forEach(function(s,l){if(i!==s||a.length===l+1)return e;i=e.placement.split("-")[0],r=U(i);var c=e.offsets.popper,u=e.offsets.reference,d=Math.floor,f="left"===i&&d(c.right)>d(u.left)||"right"===i&&d(c.left)<d(u.right)||"top"===i&&d(c.bottom)>d(u.top)||"bottom"===i&&d(c.top)<d(u.bottom),p=d(c.left)<d(n.left),h=d(c.right)>d(n.right),g=d(c.top)<d(n.top),m=d(c.bottom)>d(n.bottom),v="left"===i&&p||"right"===i&&h||"top"===i&&g||"bottom"===i&&m,y=-1!==["top","bottom"].indexOf(i),b=!!t.flipVariations&&(y&&"start"===o&&p||y&&"end"===o&&h||!y&&"start"===o&&g||!y&&"end"===o&&m);(f||v||b)&&(e.flipped=!0,(f||v)&&(i=a[l+1]),b&&(o=he(o)),e.placement=i+(o?"-"+o:""),e.offsets.popper=it({},e.offsets.popper,G(e.instance.popper,e.offsets.reference,e.placement)),e=K(e.instance.modifiers,e,"flip"))}),e}function ve(e){var t=e.offsets,n=t.popper,i=t.reference,r=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(r),s=a?"right":"bottom",l=a?"left":"top",c=a?"width":"height";return n[s]<o(i[l])&&(e.offsets.popper[l]=o(i[l])-n[c]),n[l]>o(i[s])&&(e.offsets.popper[l]=o(i[s])),e}function ye(e,t,n,i){var r=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],a=r[2];if(!o)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=i}return F(s)[t]/100*o}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}function be(e,t,n,i){var r=[0,0],o=-1!==["right","left"].indexOf(i),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=a.indexOf(X(a,function(e){return-1!==e.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return c=c.map(function(e,i){var r=(1===i?!o:o)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return ye(e,r,t,n)})}),c.forEach(function(e,t){e.forEach(function(n,i){ae(n)&&(r[t]+=n*("-"===e[i-1]?-1:1))})}),r}function xe(e,t){var n=t.offset,i=e.placement,r=e.offsets,o=r.popper,a=r.reference,s=i.split("-")[0],l=void 0;return l=ae(+n)?[+n,0]:be(n,o,a,s),"left"===s?(o.top+=l[0],o.left-=l[1]):"right"===s?(o.top+=l[0],o.left+=l[1]):"top"===s?(o.left+=l[0],o.top-=l[1]):"bottom"===s&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e}function we(e,t){var n=t.boundariesElement||P(e.instance.popper);e.instance.reference===n&&(n=P(n));var i=q(e.instance.popper,e.instance.reference,t.padding,n);t.boundaries=i;var r=t.priority,o=e.offsets.popper,a={primary:function(e){var n=o[e];return o[e]<i[e]&&!t.escapeWithReference&&(n=Math.max(o[e],i[e])),nt({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=o[n];return o[e]>i[e]&&!t.escapeWithReference&&(r=Math.min(o[n],i[e]-("right"===e?o.width:o.height))),nt({},n,r)}};return r.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";o=it({},o,a[t](e))}),e.offsets.popper=o,e}function ke(e){var t=e.placement,n=t.split("-")[0],i=t.split("-")[1];if(i){var r=e.offsets,o=r.reference,a=r.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",c=s?"width":"height",u={start:nt({},l,o[l]),end:nt({},l,o[l]+o[c]-a[c])};e.offsets.popper=it({},a,u[i])}return e}function Ce(e){if(!fe(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=X(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}function Se(e){var t=e.placement,n=t.split("-")[0],i=e.offsets,r=i.popper,o=i.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return r[a?"left":"top"]=o[n]-(s?r[a?"width":"height"]:0),e.placement=U(t),e.offsets.popper=F(r),e}function Ee(e){return-(e-He.distance)+"px"}function Te(e){var t=e.el,n=e.popper,i=e.settings,r=i.position,s=i.popperOptions,l=i.offset,c=i.distance,u=i.flipDuration,d=f(n),p=d.tooltip,h=ft({placement:r},s||{},{modifiers:ft({},s?s.modifiers:{},{flip:ft({padding:c+5},s&&s.modifiers?s.modifiers.flip:{}),offset:ft({offset:l},s&&s.modifiers?s.modifiers.offset:{})}),onUpdate:function(){var e=p.style;e.top="",e.bottom="",e.left="",e.right="",e[v(n.getAttribute("x-placement"))]=Ee(c)}});if(window.MutationObserver){var g=n.style,m=new MutationObserver(function(){g[a("transitionDuration")]="0ms",e.popperInstance.update(),o(function(){g[a("transitionDuration")]=u+"ms"})});m.observe(n,{childList:!0,subtree:!0,characterData:!0}),e._mutationObservers.push(m)}return new ct(t,n,h)}function Pe(e){var t=e.el,n=e.popper,i=e.settings,r=i.appendTo,o=i.followCursor;r.contains(n)||(r.appendChild(n),e.popperInstance?(e.popperInstance.update(),o&&!Re.touch||e.popperInstance.enableEventListeners()):e.popperInstance=Te(e),o&&!Re.touch&&(t.addEventListener("mousemove",y),e.popperInstance.disableEventListeners()))}function De(e){var t=e.popper,n=e.popperInstance,i=e.settings.stickyDuration,r=function(){return t.style[a("transitionDuration")]=i+"ms"},s=function(){return t.style[a("transitionDuration")]=""};o(function e(){n&&n.scheduleUpdate(),r(),h(t)?window.requestAnimationFrame(e):s()})}function Me(e,t){var n=qe.reduce(function(n,i){var r=e.getAttribute("data-"+i.toLowerCase())||t[i];return"false"===r&&(r=!1),"true"===r&&(r=!0),isFinite(r)&&!isNaN(parseFloat(r))&&(r=parseFloat(r)),"string"==typeof r&&"["===r.trim().charAt(0)&&(r=JSON.parse(r)),n[i]=r,n},{});return ft({},t,n)}function Ae(e,t,n){var i=n.position,r=n.distance,o=n.arrow,a=n.animateFill,s=n.inertia,l=n.animation,c=n.arrowSize,u=n.size,d=n.theme,f=n.html,p=n.zIndex,h=n.interactive,g=document.createElement("div");g.setAttribute("class","tippy-popper"),g.setAttribute("role","tooltip"),g.setAttribute("aria-hidden","true"),g.setAttribute("id","tippy-tooltip-"+e),g.style.zIndex=p;var m=document.createElement("div");if(m.setAttribute("class","tippy-tooltip tippy-tooltip--"+u+" leave"),m.setAttribute("data-animation",l),d.split(" ").forEach(function(e){m.classList.add(e+"-theme")}),o){var y=document.createElement("div");y.setAttribute("class","arrow-"+c),y.setAttribute("x-arrow",""),m.appendChild(y)}if(a){m.setAttribute("data-animatefill","");var b=document.createElement("div");b.setAttribute("class","leave"),b.setAttribute("x-circle",""),m.appendChild(b)}s&&m.setAttribute("data-inertia",""),h&&m.setAttribute("data-interactive","");var x=document.createElement("div");if(x.setAttribute("class","tippy-tooltip-content"),f){var w=void 0;f instanceof Element?(x.appendChild(f),w="#"+f.id||"tippy-html-template"):(x.innerHTML=document.getElementById(f.replace("#","")).innerHTML,w=f),g.classList.add("html-template"),h&&g.setAttribute("tabindex","-1"),m.setAttribute("data-template-id",w)}else x.innerHTML=t;return m.style[v(i)]=Ee(r),m.appendChild(x),g.appendChild(m),g}function Oe(e,t,n,i){var r=[];return"manual"===e?r:(t.addEventListener(e,n.handleTrigger),r.push({event:e,handler:n.handleTrigger}),"mouseenter"===e&&(Re.SUPPORTS_TOUCH&&i&&(t.addEventListener("touchstart",n.handleTrigger),r.push({event:"touchstart",handler:n.handleTrigger}),t.addEventListener("touchend",n.handleMouseleave),r.push({event:"touchend",handler:n.handleMouseleave})),t.addEventListener("mouseleave",n.handleMouseleave),r.push({event:"mouseleave",handler:n.handleMouseleave})),"focus"===e&&(t.addEventListener("blur",n.handleBlur),r.push({event:"blur",handler:n.handleBlur})),r)}function Le(e,t,n){if(!t.getAttribute("x-placement"))return!0;var i=e.clientX,r=e.clientY,o=n.interactiveBorder,a=n.distance,s=t.getBoundingClientRect(),l=v(t.getAttribute("x-placement")),c=o+a,u={top:s.top-r>o,
bottom:r-s.bottom>o,left:s.left-i>o,right:i-s.right>o};switch(l){case"top":u.top=s.top-r>c;break;case"bottom":u.bottom=r-s.bottom>c;break;case"left":u.left=s.left-i>c;break;case"right":u.right=i-s.right>c}return u.top||u.bottom||u.left||u.right}function Ne(e,n,i){var r=this,o=(i.position,i.delay),a=(i.duration,i.interactive),s=(i.interactiveBorder,i.distance,i.hideOnClick),l=i.trigger,c=i.touchHold,u=(i.touchWait,void 0),d=void 0,f=function(){clearTimeout(u),clearTimeout(d)},p=function(){if(f(),!h(n)){var e=Array.isArray(o)?o[0]:o;o?u=setTimeout(function(){return r.show(n)},e):r.show(n)}},g=function(e){return r.callbacks.wait?r.callbacks.wait.call(n,p,e):p()},m=function(){f();var e=Array.isArray(o)?o[1]:o;o?d=setTimeout(function(){return r.hide(n)},e):r.hide(n)};return{handleTrigger:function(t){var i="mouseenter"===t.type&&Re.SUPPORTS_TOUCH&&Re.touch;if(!i||!c){var r="click"===t.type,o="persistent"!==s;r&&h(n)&&o?m():g(t),i&&Re.iOS()&&e.click&&e.click()}},handleMouseleave:function(r){if(!("mouseleave"===r.type&&Re.SUPPORTS_TOUCH&&Re.touch&&c)){if(a){var o=function r(o){var a=function(){document.body.removeEventListener("mouseleave",m),document.removeEventListener("mousemove",r),m()},s=t(o.target,_e.TOOLTIPPED_EL),c=t(o.target,_e.POPPER)===n,u=s===e,d=-1!==l.indexOf("click");if(s&&s!==e)return a();c||u||d||Le(o,n,i)&&a()};return document.body.addEventListener("mouseleave",m),void document.addEventListener("mousemove",o)}m()}},handleBlur:function(e){e.relatedTarget&&!Re.touch&&(t(e.relatedTarget,_e.POPPER)||m())}}}function Ie(e){return e.arrow&&(e.animateFill=!1),e.appendTo&&"function"==typeof e.appendTo&&(e.appendTo=e.appendTo()),e}function je(e){var t=this;return e.reduce(function(e,n){var i=pt,r=ft({},Ie(t.settings.performance?t.settings:Me(n,t.settings)));"function"==typeof r.html&&(r.html=r.html(n));var o=r.html,a=r.trigger,s=r.touchHold,c=r.dynamicTitle,u=n.getAttribute("title");if(!u&&!o)return e;n.setAttribute("data-tooltipped",""),n.setAttribute("aria-describedby","tippy-tooltip-"+i),l(n);var d=Ae(i,u,r),p=Ne.call(t,n,d,r),h=[];a.trim().split(" ").forEach(function(e){return h=h.concat(Oe(e,n,p,s))});var g=void 0;if(c&&window.MutationObserver){var m=f(d),v=m.content;g=new MutationObserver(function(){var e=n.getAttribute("title");e&&(v.innerHTML=e,l(n))}),g.observe(n,{attributes:!0})}return e.push({id:i,el:n,popper:d,settings:r,listeners:h,tippyInstance:t,_mutationObservers:[g]}),pt++,e},[])}function Fe(e,t){return m(e)&&(e={refObj:!0,attributes:e.attributes||{},getBoundingClientRect:e.getBoundingClientRect,clientWidth:e.clientWidth,clientHeight:e.clientHeight,setAttribute:function(t,n){e.attributes[t]=n},getAttribute:function(t){return e.attributes[t]},removeAttribute:function(t){delete e.attributes[t]},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(t){e.classList.classNames[t]=!0},remove:function(t){return e.classList.classNames[t]=!1,!0},contains:function(t){return!!e.classList.classNames[t]}}}),new ht(e,t)}var Re={};"undefined"!=typeof window&&(Re.SUPPORTED="requestAnimationFrame"in window,Re.SUPPORTS_TOUCH="ontouchstart"in window,Re.touch=!1,Re.dynamicInputDetection=!0,Re.iOS=function(){return/iPhone|iPad|iPod/.test(navigator.userAgent)&&!window.MSStream});var $e=[],_e={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-tooltip-content",CIRCLE:"[x-circle]",ARROW:"[x-arrow]",TOOLTIPPED_EL:"[data-tooltipped]",CONTROLLER:"[data-tippy-controller]"},He={html:!1,position:"top",animation:"shift",animateFill:!0,arrow:!1,arrowSize:"regular",delay:0,trigger:"mouseenter focus",duration:350,interactive:!1,interactiveBorder:2,theme:"dark",size:"regular",distance:10,offset:0,hideOnClick:!0,multiple:!1,followCursor:!1,inertia:!1,flipDuration:350,sticky:!1,stickyDuration:200,appendTo:function(){return document.body},zIndex:9999,touchHold:!1,performance:!1,dynamicTitle:!1,popperOptions:{}},qe=Re.SUPPORTED&&Object.keys(He),Be={};if("undefined"!=typeof Element){var Ye=Element.prototype;Be=Ye.matches||Ye.matchesSelector||Ye.webkitMatchesSelector||Ye.mozMatchesSelector||Ye.msMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}}for(var We=Be,ze=["native code","[object MutationObserverConstructor]"],Ue="undefined"!=typeof window,Ge=["Edge","Trident","Firefox"],Xe=0,Ve=0;Ve<Ge.length;Ve+=1)if(Ue&&navigator.userAgent.indexOf(Ge[Ve])>=0){Xe=1;break}var Ke=Ue&&function(e){return ze.some(function(t){return(e||"").toString().indexOf(t)>-1})}(window.MutationObserver),Qe=Ke?w:k,Ze=void 0,Je=function(){return void 0===Ze&&(Ze=-1!==navigator.appVersion.indexOf("MSIE 10")),Ze},et=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},tt=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),nt=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},it=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},rt=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],ot=rt.slice(3),at={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"},st={shift:{order:100,enabled:!0,fn:ke},offset:{order:200,enabled:!0,fn:xe,offset:0},preventOverflow:{order:300,enabled:!0,fn:we,priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:ve},arrow:{order:500,enabled:!0,fn:pe,element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:me,behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:Se},hide:{order:800,enabled:!0,fn:Ce},computeStyle:{order:850,enabled:!0,fn:de,gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:ce,onLoad:ue,gpuAcceleration:void 0}},lt={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:st},ct=function(){function e(t,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};et(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=Qe(this.update.bind(this)),this.options=it({},e.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t.jquery?t[0]:t,this.popper=n.jquery?n[0]:n,this.options.modifiers={},Object.keys(it({},e.Defaults.modifiers,r.modifiers)).forEach(function(t){i.options.modifiers[t]=it({},e.Defaults.modifiers[t]||{},r.modifiers?r.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return it({name:e},i.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&C(e.onLoad)&&e.onLoad(i.reference,i.popper,i.options,e,i.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return tt(e,[{key:"update",value:function(){return Q.call(this)}},{key:"destroy",value:function(){return ee.call(this)}},{key:"enableEventListeners",value:function(){return ie.call(this)}},{key:"disableEventListeners",value:function(){return oe.call(this)}}]),e}();ct.Utils=("undefined"!=typeof window?window:global).PopperUtils,ct.placements=rt,ct.Defaults=lt;var ut=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},dt=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),ft=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},pt=1,ht=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};ut(this,e),Re.SUPPORTED&&(r(),this.state={destroyed:!1},this.selector=t,this.settings=ft({},He,n),(n.show||n.shown||n.hide||n.hidden)&&console.warn("Callbacks without the `on` prefix are deprecated (with the exception of `wait`). Use onShow, onShown, onHide, and onHidden instead."),this.callbacks={wait:n.wait,show:n.onShow||n.show||g,shown:n.onShown||n.shown||g,hide:n.onHide||n.hide||g,hidden:n.onHidden||n.hidden||g},this.store=je.call(this,b(t)),$e.push.apply($e,this.store))}return dt(e,[{key:"getPopperElement",value:function(e){try{return n(this.store,function(t){return t.el===e}).popper}catch(e){console.error("[getPopperElement]: Element passed as the argument does not exist in the instance")}}},{key:"getReferenceElement",value:function(e){try{return n(this.store,function(t){return t.popper===e}).el}catch(e){console.error("[getReferenceElement]: Popper passed as the argument does not exist in the instance")}}},{key:"getReferenceData",value:function(e){return n(this.store,function(t){return t.el===e||t.popper===e})}},{key:"show",value:function(e,t){var i=this;if(!this.state.destroyed){var r=n(this.store,function(t){return t.popper===e}),a=f(e),s=a.tooltip,l=a.circle,c=a.content;if(!this.selector.refObj&&!document.body.contains(r.el))return void this.destroy(e);this.callbacks.show.call(e);var g=r.el,m=r.settings,v=(m.appendTo,m.sticky),y=m.interactive,b=m.followCursor,w=m.flipDuration,k=m.duration,C=void 0!==t?t:Array.isArray(k)?k[0]:k;p([e,s,l],0),Pe(r),e.style.visibility="visible",e.setAttribute("aria-hidden","false"),o(function(){h(e)&&(b&&!Re.touch||(r.popperInstance.update(),p([e],w)),p([s,l],C),l&&(c.style.opacity=1),y&&g.classList.add("active"),v&&De(r),u(s,l),d([s,l],function(e){e.contains("tippy-notransition")&&e.remove("tippy-notransition"),e.remove("leave"),e.add("enter")}),x(r,C,function(){h(e)&&!r._onShownFired&&(y&&e.focus(),s.classList.add("tippy-notransition"),r._onShownFired=!0,i.callbacks.shown.call(e))}))})}}},{key:"hide",value:function(e,t){var i=this;if(!this.state.destroyed){this.callbacks.hide.call(e);var r=n(this.store,function(t){return t.popper===e}),o=f(e),a=o.tooltip,s=o.circle,l=o.content,u=r.el,g=r.settings,m=g.appendTo,v=(g.sticky,g.interactive),b=(g.followCursor,g.html),w=g.trigger,k=g.duration,C=void 0!==t?t:Array.isArray(k)?k[1]:k;r._onShownFired=!1,v&&u.classList.remove("active"),e.style.visibility="hidden",e.setAttribute("aria-hidden","true"),p([a,s,s?l:null],C),s&&(l.style.opacity=0),d([a,s],function(e){e.contains("tippy-tooltip")&&e.remove("tippy-notransition"),e.remove("enter"),e.add("leave")}),b&&-1!==w.indexOf("click")&&c(u)&&u.focus(),x(r,C,function(){!h(e)&&m.contains(e)&&"1"!==getComputedStyle(a).opacity&&(u.removeEventListener("mousemove",y),r.popperInstance.disableEventListeners(),m.removeChild(e),i.callbacks.hidden.call(e))})}}},{key:"update",value:function(e){if(!this.state.destroyed){var t=n(this.store,function(t){return t.popper===e}),i=f(e),r=i.content,o=t.el,a=t.settings.html;if(a instanceof Element)return void console.warn("Aborted: update() should not be used if `html` is a DOM element");r.innerHTML=a?document.getElementById(a.replace("#","")).innerHTML:o.getAttribute("title")||o.getAttribute("data-original-title"),a||l(o)}}},{key:"destroy",value:function(e,t){var i=this;if(!this.state.destroyed){var r=n(this.store,function(t){return t.popper===e}),o=r.el,a=r.popperInstance,l=r.listeners,c=r._mutationObservers;h(e)&&this.hide(e,0),l.forEach(function(e){return o.removeEventListener(e.event,e.handler)}),o.setAttribute("title",o.getAttribute("data-original-title")),o.removeAttribute("data-original-title"),o.removeAttribute("data-tooltipped"),o.removeAttribute("aria-describedby"),a&&a.destroy(),c.forEach(function(e){e&&e.disconnect()}),$e.splice(s($e,function(t){return t.popper===e}),1),(void 0===t||t)&&(this.store=$e.filter(function(e){return e.tippyInstance===i}))}}},{key:"destroyAll",value:function(){var e=this;if(!this.state.destroyed){var t=this.store.length;this.store.forEach(function(n,i){var r=n.popper;e.destroy(r,i===t-1)}),this.store=null,this.state.destroyed=!0}}}]),e}();return Fe.Browser=Re,Fe.Defaults=He,Fe.disableDynamicInputDetection=function(){return Re.dynamicInputDetection=!1},Fe.enableDynamicInputDetection=function(){return Re.dynamicInputDetection=!0},Fe}),function(){$("[data-flatpickr]").each(function(){var e={locale:"ru",dateFormat:"d.m.Y"},t=$(this).data("flatpickr");for(var n in t)e[n]=t[n];$(this).flatpickr(e)})}(),function(){$(".js-header-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(".js-header-slider-next").click(function(){return e.goToNextSlide(),!1}),$(".js-header-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})})}(),function(){$(".js-logotypes-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-next").click(function(){return e.goToNextSlide(),!1}),$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})})}(),function(){function e(t,n,i){$(t.target).closest(n).length||(i(),$(document).off("click","body",e))}$(".js-offcanvas").click(function(){function t(){$(".js-offcanvas, "+n).removeClass("active")}var n="#offcanvas",i="#offcanvas > .main-offcanvas";return $(this).hasClass("active")?t():function(){$(".js-offcanvas").addClass("active"),$(n).addClass("active"),$(document).on("click","body",function(n){e(n,i,t)})}(),!1})}(),function(e){e.fn.toggler=function(){return this.each(function(){e(this).on("click",function(t){var n=e(this).data("toggle")||e(this).attr("href"),i=e(this).data("toggle-class")||"active",r=e(this).data("toggle-group"),o=e(this).is("[data-toggle-self-deactive]");return console.log(n,i,r),e('[data-toggle-group="'+r+'"]').not(this).each(function(){var t=e(this).data("toggle")||e(this).attr("href"),n=e(this).data("toggle-class")||"active";e(t).removeClass(n),e(this).removeClass(n)}),e(this).hasClass(i)&&o?(e(this).removeClass(i),e(n).removeClass(i)):(e(this).addClass(i),e(n).addClass(i)),!1})}),this}}(jQuery),$(document).ready(function(){$("[data-toggle]").toggler(),$(":input").inputmask(),tippy("[data-tooltip]",{theme:"light"})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
